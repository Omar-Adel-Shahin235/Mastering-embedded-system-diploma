
WDT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000114  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000144  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000066c  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000059f  00000000  00000000  0000081c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029a  00000000  00000000  00000dbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001058  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000330  00000000  00000000  0000109c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  000013cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001414  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 41 00 	call	0x82	; 0x82 <main>
  64:	0c 94 5e 00 	jmp	0xbc	; 0xbc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Watchdog_disable>:
#define LED_Pin      0

void Watchdog_disable(void)
{

WDTCR = (1<<WDTOE)|(1<<WDE);
  6c:	88 e1       	ldi	r24, 0x18	; 24
  6e:	81 bd       	out	0x21, r24	; 33
WDTCR = 0x00;
  70:	11 bc       	out	0x21, r1	; 33
  72:	08 95       	ret

00000074 <Watchdog_enable>:

void Watchdog_enable(void)
{
//2 SECOND

	WDTCR |=  (1 << WDP1) | (1 << WDP2) | (1 << WDE);
  74:	81 b5       	in	r24, 0x21	; 33
  76:	8e 60       	ori	r24, 0x0E	; 14
  78:	81 bd       	out	0x21, r24	; 33
	WDTCR &= ~(1 << WDP0);
  7a:	81 b5       	in	r24, 0x21	; 33
  7c:	8e 7f       	andi	r24, 0xFE	; 254
  7e:	81 bd       	out	0x21, r24	; 33
  80:	08 95       	ret

00000082 <main>:
}

int main(void)
{
	LED_DDR |= (1<<LED_Pin);
  82:	a0 9a       	sbi	0x14, 0	; 20
    /* Replace with your application code */
	LED_PORT |= (1<<LED_Pin);
  84:	a8 9a       	sbi	0x15, 0	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  86:	2f ef       	ldi	r18, 0xFF	; 255
  88:	84 e3       	ldi	r24, 0x34	; 52
  8a:	9c e0       	ldi	r25, 0x0C	; 12
  8c:	21 50       	subi	r18, 0x01	; 1
  8e:	80 40       	sbci	r24, 0x00	; 0
  90:	90 40       	sbci	r25, 0x00	; 0
  92:	e1 f7       	brne	.-8      	; 0x8c <main+0xa>
  94:	00 c0       	rjmp	.+0      	; 0x96 <main+0x14>
  96:	00 00       	nop
	_delay_ms(500);
    while (1) 
    {
	Watchdog_enable();
	LED_PORT ^= (1<<LED_Pin);
  98:	c1 e0       	ldi	r28, 0x01	; 1
    /* Replace with your application code */
	LED_PORT |= (1<<LED_Pin);
	_delay_ms(500);
    while (1) 
    {
	Watchdog_enable();
  9a:	0e 94 3a 00 	call	0x74	; 0x74 <Watchdog_enable>
	LED_PORT ^= (1<<LED_Pin);
  9e:	85 b3       	in	r24, 0x15	; 21
  a0:	8c 27       	eor	r24, r28
  a2:	85 bb       	out	0x15, r24	; 21
  a4:	2f ef       	ldi	r18, 0xFF	; 255
  a6:	83 ed       	ldi	r24, 0xD3	; 211
  a8:	90 e3       	ldi	r25, 0x30	; 48
  aa:	21 50       	subi	r18, 0x01	; 1
  ac:	80 40       	sbci	r24, 0x00	; 0
  ae:	90 40       	sbci	r25, 0x00	; 0
  b0:	e1 f7       	brne	.-8      	; 0xaa <main+0x28>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <main+0x32>
  b4:	00 00       	nop
	_delay_ms(2000);
	Watchdog_disable();
  b6:	0e 94 36 00 	call	0x6c	; 0x6c <Watchdog_disable>
  ba:	ef cf       	rjmp	.-34     	; 0x9a <main+0x18>

000000bc <_exit>:
  bc:	f8 94       	cli

000000be <__stop_program>:
  be:	ff cf       	rjmp	.-2      	; 0xbe <__stop_program>
