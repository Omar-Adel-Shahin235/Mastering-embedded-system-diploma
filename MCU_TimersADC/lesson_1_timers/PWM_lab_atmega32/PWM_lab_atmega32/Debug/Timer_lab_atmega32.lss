
Timer_lab_atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001c0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800060  00800060  00000234  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000264  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d47  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007ea  00000000  00000000  000010af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005f5  00000000  00000000  00001899  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a4  00000000  00000000  00001e90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000653  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000388  00000000  00000000  00002687  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00002a0f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__vector_10>
  2c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	aa 36       	cpi	r26, 0x6A	; 106
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:




int main(void)
{
  7c:	cf 93       	push	r28
  7e:	df 93       	push	r29
  80:	00 d0       	rcall	.+0      	; 0x82 <main+0x6>
  82:	1f 92       	push	r1
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
	int i;
	
	SPWM_config_t PWM_config = {Fast_pwm , No_prescaler, non_inverting};
  88:	19 82       	std	Y+1, r1	; 0x01
  8a:	81 e0       	ldi	r24, 0x01	; 1
  8c:	8a 83       	std	Y+2, r24	; 0x02
  8e:	83 e0       	ldi	r24, 0x03	; 3
  90:	8b 83       	std	Y+3, r24	; 0x03
    DDRB |= (1<<3);  //dc motor control
  92:	bb 9a       	sbi	0x17, 3	; 23
	
	PWM_init(&PWM_config);
  94:	ce 01       	movw	r24, r28
  96:	01 96       	adiw	r24, 0x01	; 1
  98:	0e 94 5c 00 	call	0xb8	; 0xb8 <PWM_init>




int main(void)
{
  9c:	10 e0       	ldi	r17, 0x00	; 0
	
    while (1) 
    {
		for(i=0 ; i<= 100 ; i++)
		{
			PWM_Set_duty(i);
  9e:	81 2f       	mov	r24, r17
  a0:	0e 94 95 00 	call	0x12a	; 0x12a <PWM_Set_duty>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	8f e0       	ldi	r24, 0x0F	; 15
  a6:	97 e2       	ldi	r25, 0x27	; 39
  a8:	01 97       	sbiw	r24, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <main+0x2c>
  ac:	00 c0       	rjmp	.+0      	; 0xae <main+0x32>
  ae:	00 00       	nop
  b0:	1f 5f       	subi	r17, 0xFF	; 255
	
	PWM_init(&PWM_config);
	
    while (1) 
    {
		for(i=0 ; i<= 100 ; i++)
  b2:	15 36       	cpi	r17, 0x65	; 101
  b4:	a1 f7       	brne	.-24     	; 0x9e <main+0x22>
  b6:	f2 cf       	rjmp	.-28     	; 0x9c <main+0x20>

000000b8 <PWM_init>:
	TCCR0 = timer_val;	
	
}
void PWM_Stop()
{
	TCNT0 = 0x00;
  b8:	fc 01       	movw	r30, r24
  ba:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <config+0x1>
  be:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <config>
  c2:	90 81       	ld	r25, Z
  c4:	81 81       	ldd	r24, Z+1	; 0x01
  c6:	89 2b       	or	r24, r25
  c8:	92 81       	ldd	r25, Z+2	; 0x02
  ca:	89 2b       	or	r24, r25
  cc:	82 bf       	out	0x32, r24	; 50
  ce:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <config>
  d2:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <config+0x1>
  d6:	80 81       	ld	r24, Z
  d8:	81 11       	cpse	r24, r1
  da:	06 c0       	rjmp	.+12     	; 0xe8 <PWM_init+0x30>
  dc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  e0:	88 64       	ori	r24, 0x48	; 72
  e2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  e6:	06 c0       	rjmp	.+12     	; 0xf4 <PWM_init+0x3c>
  e8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ec:	8f 7b       	andi	r24, 0xBF	; 191
  ee:	88 60       	ori	r24, 0x08	; 8
  f0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  f4:	91 81       	ldd	r25, Z+1	; 0x01
  f6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  fa:	89 2b       	or	r24, r25
  fc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 100:	92 81       	ldd	r25, Z+2	; 0x02
 102:	93 30       	cpi	r25, 0x03	; 3
 104:	29 f4       	brne	.+10     	; 0x110 <PWM_init+0x58>
 106:	8f 7e       	andi	r24, 0xEF	; 239
 108:	80 62       	ori	r24, 0x20	; 32
 10a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 10e:	09 c0       	rjmp	.+18     	; 0x122 <PWM_init+0x6a>
 110:	92 30       	cpi	r25, 0x02	; 2
 112:	21 f4       	brne	.+8      	; 0x11c <PWM_init+0x64>
 114:	80 63       	ori	r24, 0x30	; 48
 116:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 11a:	03 c0       	rjmp	.+6      	; 0x122 <PWM_init+0x6a>
 11c:	8f 7c       	andi	r24, 0xCF	; 207
 11e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 122:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 126:	83 bf       	out	0x33, r24	; 51
 128:	08 95       	ret

0000012a <PWM_Set_duty>:
}
void PWM_Set_duty(uint8_t duty)
{
		if(config->operation == non_inverting)
 12a:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <config>
 12e:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <config+0x1>
 132:	92 81       	ldd	r25, Z+2	; 0x02
 134:	93 30       	cpi	r25, 0x03	; 3
 136:	19 f4       	brne	.+6      	; 0x13e <PWM_Set_duty+0x14>
		{
			OCR0 = (255/100)*duty;
 138:	88 0f       	add	r24, r24
 13a:	8c bf       	out	0x3c, r24	; 60
 13c:	08 95       	ret
		}
		else
		{
			OCR0 = 255 - ((255/100)*duty);
 13e:	88 0f       	add	r24, r24
 140:	80 95       	com	r24
 142:	8c bf       	out	0x3c, r24	; 60
 144:	08 95       	ret

00000146 <__vector_11>:
	callback_cmp = callback;
}


ISR(TIMER0_OVF_vect)
{
 146:	1f 92       	push	r1
 148:	0f 92       	push	r0
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	0f 92       	push	r0
 14e:	11 24       	eor	r1, r1
 150:	2f 93       	push	r18
 152:	3f 93       	push	r19
 154:	4f 93       	push	r20
 156:	5f 93       	push	r21
 158:	6f 93       	push	r22
 15a:	7f 93       	push	r23
 15c:	8f 93       	push	r24
 15e:	9f 93       	push	r25
 160:	af 93       	push	r26
 162:	bf 93       	push	r27
 164:	ef 93       	push	r30
 166:	ff 93       	push	r31
	ovf_counter++;
 168:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <ovf_counter>
 16c:	8f 5f       	subi	r24, 0xFF	; 255
 16e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <ovf_counter>
	callback_ovf();
 172:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <callback_ovf>
 176:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <callback_ovf+0x1>
 17a:	09 95       	icall

}
 17c:	ff 91       	pop	r31
 17e:	ef 91       	pop	r30
 180:	bf 91       	pop	r27
 182:	af 91       	pop	r26
 184:	9f 91       	pop	r25
 186:	8f 91       	pop	r24
 188:	7f 91       	pop	r23
 18a:	6f 91       	pop	r22
 18c:	5f 91       	pop	r21
 18e:	4f 91       	pop	r20
 190:	3f 91       	pop	r19
 192:	2f 91       	pop	r18
 194:	0f 90       	pop	r0
 196:	0f be       	out	0x3f, r0	; 63
 198:	0f 90       	pop	r0
 19a:	1f 90       	pop	r1
 19c:	18 95       	reti

0000019e <__vector_10>:

ISR(TIMER0_COMP_vect)
{
 19e:	1f 92       	push	r1
 1a0:	0f 92       	push	r0
 1a2:	0f b6       	in	r0, 0x3f	; 63
 1a4:	0f 92       	push	r0
 1a6:	11 24       	eor	r1, r1
 1a8:	8f 93       	push	r24
	
	PORTA = ~PORTA;
 1aa:	8b b3       	in	r24, 0x1b	; 27
 1ac:	80 95       	com	r24
 1ae:	8b bb       	out	0x1b, r24	; 27
}
 1b0:	8f 91       	pop	r24
 1b2:	0f 90       	pop	r0
 1b4:	0f be       	out	0x3f, r0	; 63
 1b6:	0f 90       	pop	r0
 1b8:	1f 90       	pop	r1
 1ba:	18 95       	reti

000001bc <_exit>:
 1bc:	f8 94       	cli

000001be <__stop_program>:
 1be:	ff cf       	rjmp	.-2      	; 0x1be <__stop_program>
