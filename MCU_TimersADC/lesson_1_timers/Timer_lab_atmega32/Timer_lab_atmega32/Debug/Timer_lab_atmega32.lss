
Timer_lab_atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001d2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000246  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800060  00800060  00000246  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000246  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000278  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b39  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006b4  00000000  00000000  00000e8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000477  00000000  00000000  00001541  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a8  00000000  00000000  000019b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000056b  00000000  00000000  00001b60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000034d  00000000  00000000  000020cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00002418  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 be 00 	jmp	0x17c	; 0x17c <__vector_10>
  2c:	0c 94 90 00 	jmp	0x120	; 0x120 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a7 36       	cpi	r26, 0x67	; 103
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 42 00 	call	0x84	; 0x84 <main>
  74:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <timer_ovf_callback>:

extern uint8_t ovf_counter;

void timer_ovf_callback()
{
	PORTA = ~PORTA;
  7c:	8b b3       	in	r24, 0x1b	; 27
  7e:	80 95       	com	r24
  80:	8b bb       	out	0x1b, r24	; 27
  82:	08 95       	ret

00000084 <main>:
}

int main(void)
{
  84:	cf 93       	push	r28
  86:	df 93       	push	r29
  88:	00 d0       	rcall	.+0      	; 0x8a <main+0x6>
  8a:	00 d0       	rcall	.+0      	; 0x8c <main+0x8>
  8c:	cd b7       	in	r28, 0x3d	; 61
  8e:	de b7       	in	r29, 0x3e	; 62
    DDRA = 0xFF;
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	8a bb       	out	0x1a, r24	; 26
    Timer0_callback_cmp_interrupt(timer_ovf_callback);
  94:	8e e3       	ldi	r24, 0x3E	; 62
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	0e 94 8b 00 	call	0x116	; 0x116 <Timer0_callback_cmp_interrupt>


    Stimer0_config_t config = {ctc , prescaler8 ,  OCIE_enable , TOIE0_Dis};
  9c:	88 e0       	ldi	r24, 0x08	; 8
  9e:	89 83       	std	Y+1, r24	; 0x01
  a0:	82 e0       	ldi	r24, 0x02	; 2
  a2:	8a 83       	std	Y+2, r24	; 0x02
  a4:	8b 83       	std	Y+3, r24	; 0x03
  a6:	1c 82       	std	Y+4, r1	; 0x04
    Timer0_set_compare_val(0xF0);
  a8:	80 ef       	ldi	r24, 0xF0	; 240
  aa:	0e 94 88 00 	call	0x110	; 0x110 <Timer0_set_compare_val>
    Timer0_init(&config);
  ae:	ce 01       	movw	r24, r28
  b0:	01 96       	adiw	r24, 0x01	; 1
  b2:	0e 94 5f 00 	call	0xbe	; 0xbe <Timer0_init>
	
	while(!get_bit(TIFR,OCF0));
  b6:	08 b6       	in	r0, 0x38	; 56
  b8:	01 fe       	sbrs	r0, 1
  ba:	fd cf       	rjmp	.-6      	; 0xb6 <main+0x32>
  bc:	ff cf       	rjmp	.-2      	; 0xbc <main+0x38>

000000be <Timer0_init>:

}

void Timer0_callback_ovf_interrupt(PTR_VoidFuncVoid_t callback)
{
	callback_ovf = callback;
  be:	00 97       	sbiw	r24, 0x00	; 0
  c0:	19 f1       	breq	.+70     	; 0x108 <Timer0_init+0x4a>
  c2:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <TIMER0_Config+0x1>
  c6:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <TIMER0_Config>
  ca:	fc 01       	movw	r30, r24
  cc:	80 81       	ld	r24, Z
  ce:	87 7f       	andi	r24, 0xF7	; 247
  d0:	11 f4       	brne	.+4      	; 0xd6 <Timer0_init+0x18>
  d2:	83 b7       	in	r24, 0x33	; 51
  d4:	83 bf       	out	0x33, r24	; 51
  d6:	83 b7       	in	r24, 0x33	; 51
  d8:	82 60       	ori	r24, 0x02	; 2
  da:	83 bf       	out	0x33, r24	; 51
  dc:	e0 91 65 00 	lds	r30, 0x0065	; 0x800065 <TIMER0_Config>
  e0:	f0 91 66 00 	lds	r31, 0x0066	; 0x800066 <TIMER0_Config+0x1>
  e4:	82 81       	ldd	r24, Z+2	; 0x02
  e6:	8d 7f       	andi	r24, 0xFD	; 253
  e8:	19 f4       	brne	.+6      	; 0xf0 <Timer0_init+0x32>
  ea:	89 b7       	in	r24, 0x39	; 57
  ec:	82 60       	ori	r24, 0x02	; 2
  ee:	89 bf       	out	0x39, r24	; 57
  f0:	e0 91 65 00 	lds	r30, 0x0065	; 0x800065 <TIMER0_Config>
  f4:	f0 91 66 00 	lds	r31, 0x0066	; 0x800066 <TIMER0_Config+0x1>
  f8:	83 81       	ldd	r24, Z+3	; 0x03
  fa:	82 30       	cpi	r24, 0x02	; 2
  fc:	38 f4       	brcc	.+14     	; 0x10c <Timer0_init+0x4e>
  fe:	89 b7       	in	r24, 0x39	; 57
 100:	81 60       	ori	r24, 0x01	; 1
 102:	89 bf       	out	0x39, r24	; 57
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	08 95       	ret
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	08 95       	ret
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	08 95       	ret

00000110 <Timer0_set_compare_val>:
 110:	8c bf       	out	0x3c, r24	; 60
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	08 95       	ret

00000116 <Timer0_callback_cmp_interrupt>:
	
}

void Timer0_callback_cmp_interrupt(PTR_VoidFuncVoid_t callback)
{
	callback_cmp = callback;
 116:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <callback_cmp+0x1>
 11a:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <callback_cmp>
 11e:	08 95       	ret

00000120 <__vector_11>:
}


ISR(TIMER0_OVF_vect)
{
 120:	1f 92       	push	r1
 122:	0f 92       	push	r0
 124:	0f b6       	in	r0, 0x3f	; 63
 126:	0f 92       	push	r0
 128:	11 24       	eor	r1, r1
 12a:	2f 93       	push	r18
 12c:	3f 93       	push	r19
 12e:	4f 93       	push	r20
 130:	5f 93       	push	r21
 132:	6f 93       	push	r22
 134:	7f 93       	push	r23
 136:	8f 93       	push	r24
 138:	9f 93       	push	r25
 13a:	af 93       	push	r26
 13c:	bf 93       	push	r27
 13e:	ef 93       	push	r30
 140:	ff 93       	push	r31
	ovf_counter++;
 142:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 146:	8f 5f       	subi	r24, 0xFF	; 255
 148:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	PORTA = 0x1;
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	8b bb       	out	0x1b, r24	; 27
	callback_ovf();
 150:	e0 91 61 00 	lds	r30, 0x0061	; 0x800061 <callback_ovf>
 154:	f0 91 62 00 	lds	r31, 0x0062	; 0x800062 <callback_ovf+0x1>
 158:	09 95       	icall

}
 15a:	ff 91       	pop	r31
 15c:	ef 91       	pop	r30
 15e:	bf 91       	pop	r27
 160:	af 91       	pop	r26
 162:	9f 91       	pop	r25
 164:	8f 91       	pop	r24
 166:	7f 91       	pop	r23
 168:	6f 91       	pop	r22
 16a:	5f 91       	pop	r21
 16c:	4f 91       	pop	r20
 16e:	3f 91       	pop	r19
 170:	2f 91       	pop	r18
 172:	0f 90       	pop	r0
 174:	0f be       	out	0x3f, r0	; 63
 176:	0f 90       	pop	r0
 178:	1f 90       	pop	r1
 17a:	18 95       	reti

0000017c <__vector_10>:

ISR(TIMER0_COMP_vect)
{
 17c:	1f 92       	push	r1
 17e:	0f 92       	push	r0
 180:	0f b6       	in	r0, 0x3f	; 63
 182:	0f 92       	push	r0
 184:	11 24       	eor	r1, r1
 186:	2f 93       	push	r18
 188:	3f 93       	push	r19
 18a:	4f 93       	push	r20
 18c:	5f 93       	push	r21
 18e:	6f 93       	push	r22
 190:	7f 93       	push	r23
 192:	8f 93       	push	r24
 194:	9f 93       	push	r25
 196:	af 93       	push	r26
 198:	bf 93       	push	r27
 19a:	ef 93       	push	r30
 19c:	ff 93       	push	r31
	PORTA = 0x1;
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	8b bb       	out	0x1b, r24	; 27
	callback_cmp();
 1a2:	e0 91 63 00 	lds	r30, 0x0063	; 0x800063 <callback_cmp>
 1a6:	f0 91 64 00 	lds	r31, 0x0064	; 0x800064 <callback_cmp+0x1>
 1aa:	09 95       	icall
}
 1ac:	ff 91       	pop	r31
 1ae:	ef 91       	pop	r30
 1b0:	bf 91       	pop	r27
 1b2:	af 91       	pop	r26
 1b4:	9f 91       	pop	r25
 1b6:	8f 91       	pop	r24
 1b8:	7f 91       	pop	r23
 1ba:	6f 91       	pop	r22
 1bc:	5f 91       	pop	r21
 1be:	4f 91       	pop	r20
 1c0:	3f 91       	pop	r19
 1c2:	2f 91       	pop	r18
 1c4:	0f 90       	pop	r0
 1c6:	0f be       	out	0x3f, r0	; 63
 1c8:	0f 90       	pop	r0
 1ca:	1f 90       	pop	r1
 1cc:	18 95       	reti

000001ce <_exit>:
 1ce:	f8 94       	cli

000001d0 <__stop_program>:
 1d0:	ff cf       	rjmp	.-2      	; 0x1d0 <__stop_program>
