
SPI_master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000106  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000106  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000138  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000065f  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005d5  00000000  00000000  00000803  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029a  00000000  00000000  00000dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001074  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000343  00000000  00000000  000010b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000086  00000000  00000000  000013fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001481  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 43 00 	call	0x86	; 0x86 <main>
  64:	0c 94 57 00 	jmp	0xae	; 0xae <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Master_init>:


void Master_init(void)
{
	//set pins as output
	DDRB |= ( (1<<SS) | (1<<MOSI) | (1<<CLK) );
  6c:	87 b3       	in	r24, 0x17	; 23
  6e:	80 6b       	ori	r24, 0xB0	; 176
  70:	87 bb       	out	0x17, r24	; 23
	
	//Set MISO pin as input
	DDRB &= ~(1<<MISO);
  72:	be 98       	cbi	0x17, 6	; 23
	
	//enable SPI and master and Fclk/16
	SPCR |= ( (1<<SPE) | (1<<MSTR) | (1<<SPR0) );
  74:	8d b1       	in	r24, 0x0d	; 13
  76:	81 65       	ori	r24, 0x51	; 81
  78:	8d b9       	out	0x0d, r24	; 13
  7a:	08 95       	ret

0000007c <Master_transmit>:
}

uint8_t Master_transmit(uint8_t Data)
{
	SPDR = Data;
  7c:	8f b9       	out	0x0f, r24	; 15
	
	while(!(SPSR & (1<<SPIF)));
  7e:	77 9b       	sbis	0x0e, 7	; 14
  80:	fe cf       	rjmp	.-4      	; 0x7e <Master_transmit+0x2>
	
	return SPDR;
  82:	8f b1       	in	r24, 0x0f	; 15
}
  84:	08 95       	ret

00000086 <main>:

int main(void)
{
	Master_init();
  86:	0e 94 36 00 	call	0x6c	; 0x6c <Master_init>
	
	
	//Set 7-segment pins as putput
	DDRA = 0xFF;
  8a:	8f ef       	ldi	r24, 0xFF	; 255
  8c:	8a bb       	out	0x1a, r24	; 26
	
	uint8_t data;
	
	for(data =0 ; data<=255 ; data++)
  8e:	c0 e0       	ldi	r28, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	2f e3       	ldi	r18, 0x3F	; 63
  92:	8d e0       	ldi	r24, 0x0D	; 13
  94:	93 e0       	ldi	r25, 0x03	; 3
  96:	21 50       	subi	r18, 0x01	; 1
  98:	80 40       	sbci	r24, 0x00	; 0
  9a:	90 40       	sbci	r25, 0x00	; 0
  9c:	e1 f7       	brne	.-8      	; 0x96 <main+0x10>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <main+0x1a>
  a0:	00 00       	nop
	{
		_delay_ms(1000);
		PORTA = Master_transmit(data);
  a2:	8c 2f       	mov	r24, r28
  a4:	0e 94 3e 00 	call	0x7c	; 0x7c <Master_transmit>
  a8:	8b bb       	out	0x1b, r24	; 27
	//Set 7-segment pins as putput
	DDRA = 0xFF;
	
	uint8_t data;
	
	for(data =0 ; data<=255 ; data++)
  aa:	cf 5f       	subi	r28, 0xFF	; 255
  ac:	f1 cf       	rjmp	.-30     	; 0x90 <main+0xa>

000000ae <_exit>:
  ae:	f8 94       	cli

000000b0 <__stop_program>:
  b0:	ff cf       	rjmp	.-2      	; 0xb0 <__stop_program>
