
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f14  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08001044  08001044  00011044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001060  08001060  00011068  2**0
                  CONTENTS
  4 .ARM          00000000  08001060  08001060  00011068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001060  08001068  00011068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001060  08001060  00011060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001064  08001064  00011064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00011068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  20000000  08001068  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  08001068  000200b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00011068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006e17  00000000  00000000  00011091  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000106f  00000000  00000000  00017ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001356  00000000  00000000  00018f17  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000002f0  00000000  00000000  0001a270  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000268  00000000  00000000  0001a560  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00002eb1  00000000  00000000  0001a7c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000035cb  00000000  00000000  0001d679  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000bfb8  00000000  00000000  00020c44  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002cbfc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000009c0  00000000  00000000  0002cc78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	0800102c 	.word	0x0800102c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	0800102c 	.word	0x0800102c

08000170 <EEPROM_Init>:
 */

#include  "I2C_EEPROM.h"

void EEPROM_Init(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b08a      	sub	sp, #40	; 0x28
 8000174:	af00      	add	r7, sp, #0
	I2C_InitTypedef I2C1CFG;

	I2C1CFG.I2C_General_call_address = I2C_CR1_ENGC;
 8000176:	2340      	movs	r3, #64	; 0x40
 8000178:	623b      	str	r3, [r7, #32]
	I2C1CFG.I2C_ACK_CONTROL = I2C_ACK_Enable;
 800017a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800017e:	61fb      	str	r3, [r7, #28]
	I2C1CFG.clk_speed = I2C_Sclk_sm_100kH;
 8000180:	4b09      	ldr	r3, [pc, #36]	; (80001a8 <EEPROM_Init+0x38>)
 8000182:	607b      	str	r3, [r7, #4]
	I2C1CFG.I2C_Mode = I2C_Mode_I2C;
 8000184:	2300      	movs	r3, #0
 8000186:	60fb      	str	r3, [r7, #12]
	I2C1CFG.P_Slave_event_callback = NULL;
 8000188:	2300      	movs	r3, #0
 800018a:	627b      	str	r3, [r7, #36]	; 0x24
	I2C1CFG.Stretch_mode = I2C_Stretch_enable;
 800018c:	2300      	movs	r3, #0
 800018e:	60bb      	str	r3, [r7, #8]

	MCAL_I2C_GPIO_SetPins(I2C1);
 8000190:	4806      	ldr	r0, [pc, #24]	; (80001ac <EEPROM_Init+0x3c>)
 8000192:	f000 fc0d 	bl	80009b0 <MCAL_I2C_GPIO_SetPins>
	MCAL_I2C_init(I2C1, &I2C1CFG);
 8000196:	1d3b      	adds	r3, r7, #4
 8000198:	4619      	mov	r1, r3
 800019a:	4804      	ldr	r0, [pc, #16]	; (80001ac <EEPROM_Init+0x3c>)
 800019c:	f000 fb00 	bl	80007a0 <MCAL_I2C_init>
}
 80001a0:	bf00      	nop
 80001a2:	3728      	adds	r7, #40	; 0x28
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bd80      	pop	{r7, pc}
 80001a8:	000186a0 	.word	0x000186a0
 80001ac:	40005400 	.word	0x40005400

080001b0 <EEPROM_Send_NBytes>:

void EEPROM_Send_NBytes(uint16_t address ,uint8_t* data_byte , uint8_t data_length)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b0c6      	sub	sp, #280	; 0x118
 80001b4:	af02      	add	r7, sp, #8
 80001b6:	463b      	mov	r3, r7
 80001b8:	6019      	str	r1, [r3, #0]
 80001ba:	4611      	mov	r1, r2
 80001bc:	1dbb      	adds	r3, r7, #6
 80001be:	4602      	mov	r2, r0
 80001c0:	801a      	strh	r2, [r3, #0]
 80001c2:	1d7b      	adds	r3, r7, #5
 80001c4:	460a      	mov	r2, r1
 80001c6:	701a      	strb	r2, [r3, #0]
	uint8_t i=0;
 80001c8:	2300      	movs	r3, #0
 80001ca:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

	uint8_t buffer[256];

	buffer[0] = address >>8;
 80001ce:	1dbb      	adds	r3, r7, #6
 80001d0:	881b      	ldrh	r3, [r3, #0]
 80001d2:	0a1b      	lsrs	r3, r3, #8
 80001d4:	b29b      	uxth	r3, r3
 80001d6:	b2da      	uxtb	r2, r3
 80001d8:	f107 030c 	add.w	r3, r7, #12
 80001dc:	701a      	strb	r2, [r3, #0]
	buffer[1] = address;
 80001de:	1dbb      	adds	r3, r7, #6
 80001e0:	881b      	ldrh	r3, [r3, #0]
 80001e2:	b2da      	uxtb	r2, r3
 80001e4:	f107 030c 	add.w	r3, r7, #12
 80001e8:	705a      	strb	r2, [r3, #1]

	for(i=2 ; i<(data_length +2) ; i++)
 80001ea:	2302      	movs	r3, #2
 80001ec:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80001f0:	e010      	b.n	8000214 <EEPROM_Send_NBytes+0x64>
	{
		buffer[i] = data_byte[i-2];
 80001f2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80001f6:	3b02      	subs	r3, #2
 80001f8:	463a      	mov	r2, r7
 80001fa:	6812      	ldr	r2, [r2, #0]
 80001fc:	441a      	add	r2, r3
 80001fe:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000202:	7811      	ldrb	r1, [r2, #0]
 8000204:	f107 020c 	add.w	r2, r7, #12
 8000208:	54d1      	strb	r1, [r2, r3]
	for(i=2 ; i<(data_length +2) ; i++)
 800020a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800020e:	3301      	adds	r3, #1
 8000210:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000214:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 8000218:	1d7b      	adds	r3, r7, #5
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	3302      	adds	r3, #2
 800021e:	429a      	cmp	r2, r3
 8000220:	dbe7      	blt.n	80001f2 <EEPROM_Send_NBytes+0x42>
	}

	MCAL_I2C_MASTER_Transmit(I2C1, EEPROM_Slave_address, buffer, (data_length+2), with_stop, Start);
 8000222:	1d7b      	adds	r3, r7, #5
 8000224:	781b      	ldrb	r3, [r3, #0]
 8000226:	3302      	adds	r3, #2
 8000228:	4619      	mov	r1, r3
 800022a:	f107 020c 	add.w	r2, r7, #12
 800022e:	2300      	movs	r3, #0
 8000230:	9301      	str	r3, [sp, #4]
 8000232:	2300      	movs	r3, #0
 8000234:	9300      	str	r3, [sp, #0]
 8000236:	460b      	mov	r3, r1
 8000238:	212a      	movs	r1, #42	; 0x2a
 800023a:	4804      	ldr	r0, [pc, #16]	; (800024c <EEPROM_Send_NBytes+0x9c>)
 800023c:	f000 fbfc 	bl	8000a38 <MCAL_I2C_MASTER_Transmit>


}
 8000240:	bf00      	nop
 8000242:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	40005400 	.word	0x40005400

08000250 <EEPROM_read_Bytes>:

void EEPROM_read_Bytes(uint16_t address ,uint8_t* data_byte , uint8_t data_length)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b086      	sub	sp, #24
 8000254:	af02      	add	r7, sp, #8
 8000256:	4603      	mov	r3, r0
 8000258:	6039      	str	r1, [r7, #0]
 800025a:	80fb      	strh	r3, [r7, #6]
 800025c:	4613      	mov	r3, r2
 800025e:	717b      	strb	r3, [r7, #5]
	uint8_t i=0;
 8000260:	2300      	movs	r3, #0
 8000262:	73fb      	strb	r3, [r7, #15]

	uint8_t buffer[2];

	buffer[0] = address >>8;
 8000264:	88fb      	ldrh	r3, [r7, #6]
 8000266:	0a1b      	lsrs	r3, r3, #8
 8000268:	b29b      	uxth	r3, r3
 800026a:	b2db      	uxtb	r3, r3
 800026c:	733b      	strb	r3, [r7, #12]
	buffer[1] = address;
 800026e:	88fb      	ldrh	r3, [r7, #6]
 8000270:	b2db      	uxtb	r3, r3
 8000272:	737b      	strb	r3, [r7, #13]


	MCAL_I2C_MASTER_Transmit(I2C1, EEPROM_Slave_address, buffer, 2, with_stop, Start);
 8000274:	f107 020c 	add.w	r2, r7, #12
 8000278:	2300      	movs	r3, #0
 800027a:	9301      	str	r3, [sp, #4]
 800027c:	2300      	movs	r3, #0
 800027e:	9300      	str	r3, [sp, #0]
 8000280:	2302      	movs	r3, #2
 8000282:	212a      	movs	r1, #42	; 0x2a
 8000284:	4808      	ldr	r0, [pc, #32]	; (80002a8 <EEPROM_read_Bytes+0x58>)
 8000286:	f000 fbd7 	bl	8000a38 <MCAL_I2C_MASTER_Transmit>
	MCAL_I2C_MASTER_Receive(I2C1, EEPROM_Slave_address, data_byte, data_length,with_stop, repeated_start);
 800028a:	797a      	ldrb	r2, [r7, #5]
 800028c:	2301      	movs	r3, #1
 800028e:	9301      	str	r3, [sp, #4]
 8000290:	2300      	movs	r3, #0
 8000292:	9300      	str	r3, [sp, #0]
 8000294:	4613      	mov	r3, r2
 8000296:	683a      	ldr	r2, [r7, #0]
 8000298:	212a      	movs	r1, #42	; 0x2a
 800029a:	4803      	ldr	r0, [pc, #12]	; (80002a8 <EEPROM_read_Bytes+0x58>)
 800029c:	f000 fc1e 	bl	8000adc <MCAL_I2C_MASTER_Receive>

}
 80002a0:	bf00      	nop
 80002a2:	3710      	adds	r7, #16
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	40005400 	.word	0x40005400

080002ac <clock_init>:


unsigned char IRQ_FLAG = 0;

void clock_init()
{
 80002ac:	b480      	push	{r7}
 80002ae:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN();
 80002b0:	4b0a      	ldr	r3, [pc, #40]	; (80002dc <clock_init+0x30>)
 80002b2:	699b      	ldr	r3, [r3, #24]
 80002b4:	4a09      	ldr	r2, [pc, #36]	; (80002dc <clock_init+0x30>)
 80002b6:	f043 0304 	orr.w	r3, r3, #4
 80002ba:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 80002bc:	4b07      	ldr	r3, [pc, #28]	; (80002dc <clock_init+0x30>)
 80002be:	699b      	ldr	r3, [r3, #24]
 80002c0:	4a06      	ldr	r2, [pc, #24]	; (80002dc <clock_init+0x30>)
 80002c2:	f043 0308 	orr.w	r3, r3, #8
 80002c6:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 80002c8:	4b04      	ldr	r3, [pc, #16]	; (80002dc <clock_init+0x30>)
 80002ca:	699b      	ldr	r3, [r3, #24]
 80002cc:	4a03      	ldr	r2, [pc, #12]	; (80002dc <clock_init+0x30>)
 80002ce:	f043 0301 	orr.w	r3, r3, #1
 80002d2:	6193      	str	r3, [r2, #24]
}
 80002d4:	bf00      	nop
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bc80      	pop	{r7}
 80002da:	4770      	bx	lr
 80002dc:	40021000 	.word	0x40021000

080002e0 <main>:
#endif
}


int main(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b084      	sub	sp, #16
 80002e4:	af00      	add	r7, sp, #0
	clock_init();
 80002e6:	f7ff ffe1 	bl	80002ac <clock_init>
	MCAL_SPI_GPIO_SetPins(SPI1);

*/

	//TEST CASE 1
	uint8_t ch1[]= {0x1 , 0x2 , 0x3 , 0x4 , 0x5 , 0x6 , 0x7};
 80002ea:	4a23      	ldr	r2, [pc, #140]	; (8000378 <main+0x98>)
 80002ec:	f107 0308 	add.w	r3, r7, #8
 80002f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002f4:	6018      	str	r0, [r3, #0]
 80002f6:	3304      	adds	r3, #4
 80002f8:	8019      	strh	r1, [r3, #0]
 80002fa:	3302      	adds	r3, #2
 80002fc:	0c0a      	lsrs	r2, r1, #16
 80002fe:	701a      	strb	r2, [r3, #0]
	uint8_t ch2[7]={0};
 8000300:	463b      	mov	r3, r7
 8000302:	2200      	movs	r2, #0
 8000304:	601a      	str	r2, [r3, #0]
 8000306:	f8c3 2003 	str.w	r2, [r3, #3]

	EEPROM_Init();
 800030a:	f7ff ff31 	bl	8000170 <EEPROM_Init>
	EEPROM_Send_NBytes(0xAF, ch1, 7);
 800030e:	f107 0308 	add.w	r3, r7, #8
 8000312:	2207      	movs	r2, #7
 8000314:	4619      	mov	r1, r3
 8000316:	20af      	movs	r0, #175	; 0xaf
 8000318:	f7ff ff4a 	bl	80001b0 <EEPROM_Send_NBytes>
	EEPROM_read_Bytes(0xAF, ch2, 7);
 800031c:	463b      	mov	r3, r7
 800031e:	2207      	movs	r2, #7
 8000320:	4619      	mov	r1, r3
 8000322:	20af      	movs	r0, #175	; 0xaf
 8000324:	f7ff ff94 	bl	8000250 <EEPROM_read_Bytes>

	//test case 2

	ch1[0] =0xA;
 8000328:	230a      	movs	r3, #10
 800032a:	723b      	strb	r3, [r7, #8]
	ch1[1] =0xB;
 800032c:	230b      	movs	r3, #11
 800032e:	727b      	strb	r3, [r7, #9]
	ch1[2] =0xC;
 8000330:	230c      	movs	r3, #12
 8000332:	72bb      	strb	r3, [r7, #10]
	ch1[3] =0xD;
 8000334:	230d      	movs	r3, #13
 8000336:	72fb      	strb	r3, [r7, #11]

	EEPROM_Send_NBytes(0xFFF, ch1, 4);
 8000338:	f107 0308 	add.w	r3, r7, #8
 800033c:	2204      	movs	r2, #4
 800033e:	4619      	mov	r1, r3
 8000340:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000344:	f7ff ff34 	bl	80001b0 <EEPROM_Send_NBytes>
	EEPROM_read_Bytes(0xFFF, ch2, 4);
 8000348:	463b      	mov	r3, r7
 800034a:	2204      	movs	r2, #4
 800034c:	4619      	mov	r1, r3
 800034e:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000352:	f7ff ff7d 	bl	8000250 <EEPROM_read_Bytes>
	//	MCAL_UART_Receive_Data(USART1, &ch, Polling_EN);
	//	MCAL_UART_Send_Data(USART1, &ch, Polling_EN);

	#ifdef SLAVE_Code

	if(((SPI1->SR)&1) == 1)
 8000356:	4b09      	ldr	r3, [pc, #36]	; (800037c <main+0x9c>)
 8000358:	689b      	ldr	r3, [r3, #8]
 800035a:	f003 0301 	and.w	r3, r3, #1
 800035e:	2b01      	cmp	r3, #1
 8000360:	d1f9      	bne.n	8000356 <main+0x76>
	{
		MCAL_SPI_SendReceive_Data(SPI1, &ch, Polling_ENABLE);
 8000362:	2201      	movs	r2, #1
 8000364:	4906      	ldr	r1, [pc, #24]	; (8000380 <main+0xa0>)
 8000366:	4805      	ldr	r0, [pc, #20]	; (800037c <main+0x9c>)
 8000368:	f000 fd7a 	bl	8000e60 <MCAL_SPI_SendReceive_Data>
		MCAL_UART_Send_Data(USART1, &ch, Polling_EN);
 800036c:	2201      	movs	r2, #1
 800036e:	4904      	ldr	r1, [pc, #16]	; (8000380 <main+0xa0>)
 8000370:	4804      	ldr	r0, [pc, #16]	; (8000384 <main+0xa4>)
 8000372:	f000 fdfd 	bl	8000f70 <MCAL_UART_Send_Data>
	if(((SPI1->SR)&1) == 1)
 8000376:	e7ee      	b.n	8000356 <main+0x76>
 8000378:	08001044 	.word	0x08001044
 800037c:	40013000 	.word	0x40013000
 8000380:	20000070 	.word	0x20000070
 8000384:	40013800 	.word	0x40013800

08000388 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000388:	480d      	ldr	r0, [pc, #52]	; (80003c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800038a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800038c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000390:	480c      	ldr	r0, [pc, #48]	; (80003c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000392:	490d      	ldr	r1, [pc, #52]	; (80003c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000394:	4a0d      	ldr	r2, [pc, #52]	; (80003cc <LoopForever+0xe>)
  movs r3, #0
 8000396:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000398:	e002      	b.n	80003a0 <LoopCopyDataInit>

0800039a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800039a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800039c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800039e:	3304      	adds	r3, #4

080003a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003a4:	d3f9      	bcc.n	800039a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003a6:	4a0a      	ldr	r2, [pc, #40]	; (80003d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003a8:	4c0a      	ldr	r4, [pc, #40]	; (80003d4 <LoopForever+0x16>)
  movs r3, #0
 80003aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003ac:	e001      	b.n	80003b2 <LoopFillZerobss>

080003ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003b0:	3204      	adds	r2, #4

080003b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003b4:	d3fb      	bcc.n	80003ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003b6:	f000 fe15 	bl	8000fe4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003ba:	f7ff ff91 	bl	80002e0 <main>

080003be <LoopForever>:

LoopForever:
    b LoopForever
 80003be:	e7fe      	b.n	80003be <LoopForever>
  ldr   r0, =_estack
 80003c0:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80003c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003c8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003cc:	08001068 	.word	0x08001068
  ldr r2, =_sbss
 80003d0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003d4:	200000b0 	.word	0x200000b0

080003d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003d8:	e7fe      	b.n	80003d8 <ADC1_2_IRQHandler>
	...

080003dc <EXTI0_IRQHandler>:
//======================================
//          ISR Functions
//======================================

void EXTI0_IRQHandler(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0


	//Clear pending register
	EXTI->PR |= (1<<0);
 80003e0:	4b05      	ldr	r3, [pc, #20]	; (80003f8 <EXTI0_IRQHandler+0x1c>)
 80003e2:	695b      	ldr	r3, [r3, #20]
 80003e4:	4a04      	ldr	r2, [pc, #16]	; (80003f8 <EXTI0_IRQHandler+0x1c>)
 80003e6:	f043 0301 	orr.w	r3, r3, #1
 80003ea:	6153      	str	r3, [r2, #20]

	//call IRQ function
	GP_IRQ_Call_Back[0]();
 80003ec:	4b03      	ldr	r3, [pc, #12]	; (80003fc <EXTI0_IRQHandler+0x20>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4798      	blx	r3
}
 80003f2:	bf00      	nop
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	40010400 	.word	0x40010400
 80003fc:	20000074 	.word	0x20000074

08000400 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
	//GP_IRQ_Call_Back[EXTI_Pin.EXI_InputLineNumber];

	//Clear pending register
	EXTI->PR |= (1<<1);
 8000404:	4b05      	ldr	r3, [pc, #20]	; (800041c <EXTI1_IRQHandler+0x1c>)
 8000406:	695b      	ldr	r3, [r3, #20]
 8000408:	4a04      	ldr	r2, [pc, #16]	; (800041c <EXTI1_IRQHandler+0x1c>)
 800040a:	f043 0302 	orr.w	r3, r3, #2
 800040e:	6153      	str	r3, [r2, #20]

	//call IRQ function
	GP_IRQ_Call_Back[1]();
 8000410:	4b03      	ldr	r3, [pc, #12]	; (8000420 <EXTI1_IRQHandler+0x20>)
 8000412:	685b      	ldr	r3, [r3, #4]
 8000414:	4798      	blx	r3

}
 8000416:	bf00      	nop
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	40010400 	.word	0x40010400
 8000420:	20000074 	.word	0x20000074

08000424 <EXTI2_IRQHandler>:


void EXTI2_IRQHandler(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
	//GP_IRQ_Call_Back[EXTI_Pin.EXI_InputLineNumber];

	//Clear pending register
		EXTI->PR |= (1<<2);
 8000428:	4b05      	ldr	r3, [pc, #20]	; (8000440 <EXTI2_IRQHandler+0x1c>)
 800042a:	695b      	ldr	r3, [r3, #20]
 800042c:	4a04      	ldr	r2, [pc, #16]	; (8000440 <EXTI2_IRQHandler+0x1c>)
 800042e:	f043 0304 	orr.w	r3, r3, #4
 8000432:	6153      	str	r3, [r2, #20]

	//call IRQ function
	GP_IRQ_Call_Back[2]();
 8000434:	4b03      	ldr	r3, [pc, #12]	; (8000444 <EXTI2_IRQHandler+0x20>)
 8000436:	689b      	ldr	r3, [r3, #8]
 8000438:	4798      	blx	r3

}
 800043a:	bf00      	nop
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	40010400 	.word	0x40010400
 8000444:	20000074 	.word	0x20000074

08000448 <EXTI3_IRQHandler>:


void EXTI3_IRQHandler(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
	//GP_IRQ_Call_Back[EXTI_Pin.EXI_InputLineNumber];

	//Clear pending register
		EXTI->PR |= (1<<3);
 800044c:	4b05      	ldr	r3, [pc, #20]	; (8000464 <EXTI3_IRQHandler+0x1c>)
 800044e:	695b      	ldr	r3, [r3, #20]
 8000450:	4a04      	ldr	r2, [pc, #16]	; (8000464 <EXTI3_IRQHandler+0x1c>)
 8000452:	f043 0308 	orr.w	r3, r3, #8
 8000456:	6153      	str	r3, [r2, #20]

	//call IRQ function
	GP_IRQ_Call_Back[3]();
 8000458:	4b03      	ldr	r3, [pc, #12]	; (8000468 <EXTI3_IRQHandler+0x20>)
 800045a:	68db      	ldr	r3, [r3, #12]
 800045c:	4798      	blx	r3
}
 800045e:	bf00      	nop
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	40010400 	.word	0x40010400
 8000468:	20000074 	.word	0x20000074

0800046c <EXTI4_IRQHandler>:


void EXTI4_IRQHandler(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
	//GP_IRQ_Call_Back[EXTI_Pin.EXI_InputLineNumber];

	//Clear pending register
	EXTI->PR |= (1<<4);
 8000470:	4b05      	ldr	r3, [pc, #20]	; (8000488 <EXTI4_IRQHandler+0x1c>)
 8000472:	695b      	ldr	r3, [r3, #20]
 8000474:	4a04      	ldr	r2, [pc, #16]	; (8000488 <EXTI4_IRQHandler+0x1c>)
 8000476:	f043 0310 	orr.w	r3, r3, #16
 800047a:	6153      	str	r3, [r2, #20]

	//call IRQ function
	GP_IRQ_Call_Back[4]();
 800047c:	4b03      	ldr	r3, [pc, #12]	; (800048c <EXTI4_IRQHandler+0x20>)
 800047e:	691b      	ldr	r3, [r3, #16]
 8000480:	4798      	blx	r3
}
 8000482:	bf00      	nop
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	40010400 	.word	0x40010400
 800048c:	20000074 	.word	0x20000074

08000490 <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
	//GP_IRQ_Call_Back[EXTI_Pin.EXI_InputLineNumber];

	//Clear pending register and call IRQ function
	if( EXTI->PR & (1<<5) ) { EXTI->PR |= (1<<5); GP_IRQ_Call_Back[5](); }
 8000494:	4b26      	ldr	r3, [pc, #152]	; (8000530 <EXTI9_5_IRQHandler+0xa0>)
 8000496:	695b      	ldr	r3, [r3, #20]
 8000498:	f003 0320 	and.w	r3, r3, #32
 800049c:	2b00      	cmp	r3, #0
 800049e:	d008      	beq.n	80004b2 <EXTI9_5_IRQHandler+0x22>
 80004a0:	4b23      	ldr	r3, [pc, #140]	; (8000530 <EXTI9_5_IRQHandler+0xa0>)
 80004a2:	695b      	ldr	r3, [r3, #20]
 80004a4:	4a22      	ldr	r2, [pc, #136]	; (8000530 <EXTI9_5_IRQHandler+0xa0>)
 80004a6:	f043 0320 	orr.w	r3, r3, #32
 80004aa:	6153      	str	r3, [r2, #20]
 80004ac:	4b21      	ldr	r3, [pc, #132]	; (8000534 <EXTI9_5_IRQHandler+0xa4>)
 80004ae:	695b      	ldr	r3, [r3, #20]
 80004b0:	4798      	blx	r3
	if( EXTI->PR & (1<<6) ) { EXTI->PR |= (1<<6); GP_IRQ_Call_Back[6](); }
 80004b2:	4b1f      	ldr	r3, [pc, #124]	; (8000530 <EXTI9_5_IRQHandler+0xa0>)
 80004b4:	695b      	ldr	r3, [r3, #20]
 80004b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d008      	beq.n	80004d0 <EXTI9_5_IRQHandler+0x40>
 80004be:	4b1c      	ldr	r3, [pc, #112]	; (8000530 <EXTI9_5_IRQHandler+0xa0>)
 80004c0:	695b      	ldr	r3, [r3, #20]
 80004c2:	4a1b      	ldr	r2, [pc, #108]	; (8000530 <EXTI9_5_IRQHandler+0xa0>)
 80004c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004c8:	6153      	str	r3, [r2, #20]
 80004ca:	4b1a      	ldr	r3, [pc, #104]	; (8000534 <EXTI9_5_IRQHandler+0xa4>)
 80004cc:	699b      	ldr	r3, [r3, #24]
 80004ce:	4798      	blx	r3
	if( EXTI->PR & (1<<7) ) { EXTI->PR |= (1<<7); GP_IRQ_Call_Back[7](); }
 80004d0:	4b17      	ldr	r3, [pc, #92]	; (8000530 <EXTI9_5_IRQHandler+0xa0>)
 80004d2:	695b      	ldr	r3, [r3, #20]
 80004d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d008      	beq.n	80004ee <EXTI9_5_IRQHandler+0x5e>
 80004dc:	4b14      	ldr	r3, [pc, #80]	; (8000530 <EXTI9_5_IRQHandler+0xa0>)
 80004de:	695b      	ldr	r3, [r3, #20]
 80004e0:	4a13      	ldr	r2, [pc, #76]	; (8000530 <EXTI9_5_IRQHandler+0xa0>)
 80004e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004e6:	6153      	str	r3, [r2, #20]
 80004e8:	4b12      	ldr	r3, [pc, #72]	; (8000534 <EXTI9_5_IRQHandler+0xa4>)
 80004ea:	69db      	ldr	r3, [r3, #28]
 80004ec:	4798      	blx	r3
	if( EXTI->PR & (1<<8) ) { EXTI->PR |= (1<<8); GP_IRQ_Call_Back[8](); }
 80004ee:	4b10      	ldr	r3, [pc, #64]	; (8000530 <EXTI9_5_IRQHandler+0xa0>)
 80004f0:	695b      	ldr	r3, [r3, #20]
 80004f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d008      	beq.n	800050c <EXTI9_5_IRQHandler+0x7c>
 80004fa:	4b0d      	ldr	r3, [pc, #52]	; (8000530 <EXTI9_5_IRQHandler+0xa0>)
 80004fc:	695b      	ldr	r3, [r3, #20]
 80004fe:	4a0c      	ldr	r2, [pc, #48]	; (8000530 <EXTI9_5_IRQHandler+0xa0>)
 8000500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000504:	6153      	str	r3, [r2, #20]
 8000506:	4b0b      	ldr	r3, [pc, #44]	; (8000534 <EXTI9_5_IRQHandler+0xa4>)
 8000508:	6a1b      	ldr	r3, [r3, #32]
 800050a:	4798      	blx	r3
	if( EXTI->PR & (1<<9) ) { EXTI->PR |= (1<<9); GP_IRQ_Call_Back[9](); }
 800050c:	4b08      	ldr	r3, [pc, #32]	; (8000530 <EXTI9_5_IRQHandler+0xa0>)
 800050e:	695b      	ldr	r3, [r3, #20]
 8000510:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000514:	2b00      	cmp	r3, #0
 8000516:	d008      	beq.n	800052a <EXTI9_5_IRQHandler+0x9a>
 8000518:	4b05      	ldr	r3, [pc, #20]	; (8000530 <EXTI9_5_IRQHandler+0xa0>)
 800051a:	695b      	ldr	r3, [r3, #20]
 800051c:	4a04      	ldr	r2, [pc, #16]	; (8000530 <EXTI9_5_IRQHandler+0xa0>)
 800051e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000522:	6153      	str	r3, [r2, #20]
 8000524:	4b03      	ldr	r3, [pc, #12]	; (8000534 <EXTI9_5_IRQHandler+0xa4>)
 8000526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000528:	4798      	blx	r3
}
 800052a:	bf00      	nop
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	40010400 	.word	0x40010400
 8000534:	20000074 	.word	0x20000074

08000538 <EXTI15_10_IRQHandler>:


void EXTI15_10_IRQHandler(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
	//Clear pending register and call IRQ function
		if( EXTI->PR & (1<<10) ) { EXTI->PR |= (1<<10); GP_IRQ_Call_Back[10](); }
 800053c:	4b2d      	ldr	r3, [pc, #180]	; (80005f4 <EXTI15_10_IRQHandler+0xbc>)
 800053e:	695b      	ldr	r3, [r3, #20]
 8000540:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000544:	2b00      	cmp	r3, #0
 8000546:	d008      	beq.n	800055a <EXTI15_10_IRQHandler+0x22>
 8000548:	4b2a      	ldr	r3, [pc, #168]	; (80005f4 <EXTI15_10_IRQHandler+0xbc>)
 800054a:	695b      	ldr	r3, [r3, #20]
 800054c:	4a29      	ldr	r2, [pc, #164]	; (80005f4 <EXTI15_10_IRQHandler+0xbc>)
 800054e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000552:	6153      	str	r3, [r2, #20]
 8000554:	4b28      	ldr	r3, [pc, #160]	; (80005f8 <EXTI15_10_IRQHandler+0xc0>)
 8000556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000558:	4798      	blx	r3
		if( EXTI->PR & (1<<11) ) { EXTI->PR |= (1<<11); GP_IRQ_Call_Back[11](); }
 800055a:	4b26      	ldr	r3, [pc, #152]	; (80005f4 <EXTI15_10_IRQHandler+0xbc>)
 800055c:	695b      	ldr	r3, [r3, #20]
 800055e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000562:	2b00      	cmp	r3, #0
 8000564:	d008      	beq.n	8000578 <EXTI15_10_IRQHandler+0x40>
 8000566:	4b23      	ldr	r3, [pc, #140]	; (80005f4 <EXTI15_10_IRQHandler+0xbc>)
 8000568:	695b      	ldr	r3, [r3, #20]
 800056a:	4a22      	ldr	r2, [pc, #136]	; (80005f4 <EXTI15_10_IRQHandler+0xbc>)
 800056c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000570:	6153      	str	r3, [r2, #20]
 8000572:	4b21      	ldr	r3, [pc, #132]	; (80005f8 <EXTI15_10_IRQHandler+0xc0>)
 8000574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000576:	4798      	blx	r3
		if( EXTI->PR & (1<<12) ) { EXTI->PR |= (1<<12); GP_IRQ_Call_Back[12](); }
 8000578:	4b1e      	ldr	r3, [pc, #120]	; (80005f4 <EXTI15_10_IRQHandler+0xbc>)
 800057a:	695b      	ldr	r3, [r3, #20]
 800057c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000580:	2b00      	cmp	r3, #0
 8000582:	d008      	beq.n	8000596 <EXTI15_10_IRQHandler+0x5e>
 8000584:	4b1b      	ldr	r3, [pc, #108]	; (80005f4 <EXTI15_10_IRQHandler+0xbc>)
 8000586:	695b      	ldr	r3, [r3, #20]
 8000588:	4a1a      	ldr	r2, [pc, #104]	; (80005f4 <EXTI15_10_IRQHandler+0xbc>)
 800058a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800058e:	6153      	str	r3, [r2, #20]
 8000590:	4b19      	ldr	r3, [pc, #100]	; (80005f8 <EXTI15_10_IRQHandler+0xc0>)
 8000592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000594:	4798      	blx	r3
		if( EXTI->PR & (1<<13) ) { EXTI->PR |= (1<<13); GP_IRQ_Call_Back[13](); }
 8000596:	4b17      	ldr	r3, [pc, #92]	; (80005f4 <EXTI15_10_IRQHandler+0xbc>)
 8000598:	695b      	ldr	r3, [r3, #20]
 800059a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d008      	beq.n	80005b4 <EXTI15_10_IRQHandler+0x7c>
 80005a2:	4b14      	ldr	r3, [pc, #80]	; (80005f4 <EXTI15_10_IRQHandler+0xbc>)
 80005a4:	695b      	ldr	r3, [r3, #20]
 80005a6:	4a13      	ldr	r2, [pc, #76]	; (80005f4 <EXTI15_10_IRQHandler+0xbc>)
 80005a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80005ac:	6153      	str	r3, [r2, #20]
 80005ae:	4b12      	ldr	r3, [pc, #72]	; (80005f8 <EXTI15_10_IRQHandler+0xc0>)
 80005b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005b2:	4798      	blx	r3
		if( EXTI->PR & (1<<14) ) { EXTI->PR |= (1<<14); GP_IRQ_Call_Back[14](); }
 80005b4:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <EXTI15_10_IRQHandler+0xbc>)
 80005b6:	695b      	ldr	r3, [r3, #20]
 80005b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d008      	beq.n	80005d2 <EXTI15_10_IRQHandler+0x9a>
 80005c0:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <EXTI15_10_IRQHandler+0xbc>)
 80005c2:	695b      	ldr	r3, [r3, #20]
 80005c4:	4a0b      	ldr	r2, [pc, #44]	; (80005f4 <EXTI15_10_IRQHandler+0xbc>)
 80005c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ca:	6153      	str	r3, [r2, #20]
 80005cc:	4b0a      	ldr	r3, [pc, #40]	; (80005f8 <EXTI15_10_IRQHandler+0xc0>)
 80005ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005d0:	4798      	blx	r3
		if( EXTI->PR & (1<<15) ) { EXTI->PR |= (1<<15); GP_IRQ_Call_Back[15](); }
 80005d2:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <EXTI15_10_IRQHandler+0xbc>)
 80005d4:	695b      	ldr	r3, [r3, #20]
 80005d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d008      	beq.n	80005f0 <EXTI15_10_IRQHandler+0xb8>
 80005de:	4b05      	ldr	r3, [pc, #20]	; (80005f4 <EXTI15_10_IRQHandler+0xbc>)
 80005e0:	695b      	ldr	r3, [r3, #20]
 80005e2:	4a04      	ldr	r2, [pc, #16]	; (80005f4 <EXTI15_10_IRQHandler+0xbc>)
 80005e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005e8:	6153      	str	r3, [r2, #20]
 80005ea:	4b03      	ldr	r3, [pc, #12]	; (80005f8 <EXTI15_10_IRQHandler+0xc0>)
 80005ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005ee:	4798      	blx	r3
}
 80005f0:	bf00      	nop
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	40010400 	.word	0x40010400
 80005f8:	20000074 	.word	0x20000074

080005fc <GET_CRLH_position>:

#include "Stm32f103c6_GPIO_Driver.h"


uint8_t GET_CRLH_position(uint16_t PinNumber)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 8000606:	88fb      	ldrh	r3, [r7, #6]
 8000608:	2b80      	cmp	r3, #128	; 0x80
 800060a:	d042      	beq.n	8000692 <GET_CRLH_position+0x96>
 800060c:	2b80      	cmp	r3, #128	; 0x80
 800060e:	dc11      	bgt.n	8000634 <GET_CRLH_position+0x38>
 8000610:	2b08      	cmp	r3, #8
 8000612:	d036      	beq.n	8000682 <GET_CRLH_position+0x86>
 8000614:	2b08      	cmp	r3, #8
 8000616:	dc06      	bgt.n	8000626 <GET_CRLH_position+0x2a>
 8000618:	2b02      	cmp	r3, #2
 800061a:	d02e      	beq.n	800067a <GET_CRLH_position+0x7e>
 800061c:	2b04      	cmp	r3, #4
 800061e:	d02e      	beq.n	800067e <GET_CRLH_position+0x82>
 8000620:	2b01      	cmp	r3, #1
 8000622:	d028      	beq.n	8000676 <GET_CRLH_position+0x7a>
 8000624:	e037      	b.n	8000696 <GET_CRLH_position+0x9a>
 8000626:	2b20      	cmp	r3, #32
 8000628:	d02f      	beq.n	800068a <GET_CRLH_position+0x8e>
 800062a:	2b40      	cmp	r3, #64	; 0x40
 800062c:	d02f      	beq.n	800068e <GET_CRLH_position+0x92>
 800062e:	2b10      	cmp	r3, #16
 8000630:	d029      	beq.n	8000686 <GET_CRLH_position+0x8a>
 8000632:	e030      	b.n	8000696 <GET_CRLH_position+0x9a>
 8000634:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000638:	d023      	beq.n	8000682 <GET_CRLH_position+0x86>
 800063a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800063e:	dc09      	bgt.n	8000654 <GET_CRLH_position+0x58>
 8000640:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000644:	d019      	beq.n	800067a <GET_CRLH_position+0x7e>
 8000646:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800064a:	d018      	beq.n	800067e <GET_CRLH_position+0x82>
 800064c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000650:	d011      	beq.n	8000676 <GET_CRLH_position+0x7a>
 8000652:	e020      	b.n	8000696 <GET_CRLH_position+0x9a>
 8000654:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000658:	d017      	beq.n	800068a <GET_CRLH_position+0x8e>
 800065a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800065e:	dc03      	bgt.n	8000668 <GET_CRLH_position+0x6c>
 8000660:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000664:	d00f      	beq.n	8000686 <GET_CRLH_position+0x8a>
 8000666:	e016      	b.n	8000696 <GET_CRLH_position+0x9a>
 8000668:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800066c:	d00f      	beq.n	800068e <GET_CRLH_position+0x92>
 800066e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000672:	d00e      	beq.n	8000692 <GET_CRLH_position+0x96>
 8000674:	e00f      	b.n	8000696 <GET_CRLH_position+0x9a>
	{

	case GPIO_PIN8:
	case GPIO_PIN0:
		return 0;
 8000676:	2300      	movs	r3, #0
 8000678:	e00e      	b.n	8000698 <GET_CRLH_position+0x9c>
		break;

	case GPIO_PIN9:
	case GPIO_PIN1:
		return 4;
 800067a:	2304      	movs	r3, #4
 800067c:	e00c      	b.n	8000698 <GET_CRLH_position+0x9c>
		break;

	case GPIO_PIN10:
	case GPIO_PIN2:
		return 8;
 800067e:	2308      	movs	r3, #8
 8000680:	e00a      	b.n	8000698 <GET_CRLH_position+0x9c>
		break;

	case GPIO_PIN11:
	case GPIO_PIN3:
		return 12;
 8000682:	230c      	movs	r3, #12
 8000684:	e008      	b.n	8000698 <GET_CRLH_position+0x9c>
		break;

	case GPIO_PIN12:
	case GPIO_PIN4:
		return 16;
 8000686:	2310      	movs	r3, #16
 8000688:	e006      	b.n	8000698 <GET_CRLH_position+0x9c>
		break;

	case GPIO_PIN13:
	case GPIO_PIN5:
		return 20;
 800068a:	2314      	movs	r3, #20
 800068c:	e004      	b.n	8000698 <GET_CRLH_position+0x9c>
		break;

	case GPIO_PIN14:
	case GPIO_PIN6:
		return 24;
 800068e:	2318      	movs	r3, #24
 8000690:	e002      	b.n	8000698 <GET_CRLH_position+0x9c>
		break;

	case GPIO_PIN15:
	case GPIO_PIN7:
		return 28;
 8000692:	231c      	movs	r3, #28
 8000694:	e000      	b.n	8000698 <GET_CRLH_position+0x9c>
		break;

	}
	return -1;
 8000696:	23ff      	movs	r3, #255	; 0xff
}
 8000698:	4618      	mov	r0, r3
 800069a:	370c      	adds	r7, #12
 800069c:	46bd      	mov	sp, r7
 800069e:	bc80      	pop	{r7}
 80006a0:	4770      	bx	lr

080006a2 <MCAL_GPIO_Init>:
* @retval 		 - none
* Note			 - stm32f103c6 has a GPIO A,B,C,D,E Modules but LQFP48 package
*                  has only GPIO A,B and part of C,D and not has E.
*/
void MCAL_GPIO_Init(GPIO_TypeDef* GPIOx , GPIO_PinConfig_t* PIN_config)
{
 80006a2:	b590      	push	{r4, r7, lr}
 80006a4:	b085      	sub	sp, #20
 80006a6:	af00      	add	r7, sp, #0
 80006a8:	6078      	str	r0, [r7, #4]
 80006aa:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) Configure pins 0 >>> 7
	//Port configuration register low (GPIOx_CRH) Configure pins 8 >>> 15

	volatile uint32_t *ConfigRegister = NULL;
 80006ac:	2300      	movs	r3, #0
 80006ae:	60bb      	str	r3, [r7, #8]
	uint8_t Pin_config = 0;
 80006b0:	2300      	movs	r3, #0
 80006b2:	73fb      	strb	r3, [r7, #15]

	ConfigRegister = (PIN_config->GPIO_pinNumber < GPIO_PIN8 )? &GPIOx->CRL : &GPIOx->CRH ;
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	881b      	ldrh	r3, [r3, #0]
 80006b8:	2bff      	cmp	r3, #255	; 0xff
 80006ba:	d801      	bhi.n	80006c0 <MCAL_GPIO_Init+0x1e>
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	e001      	b.n	80006c4 <MCAL_GPIO_Init+0x22>
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	3304      	adds	r3, #4
 80006c4:	60bb      	str	r3, [r7, #8]

	//Clear  CNFy[1:0] MODEy[1:0]
	*ConfigRegister &= ~(0xF << GET_CRLH_position(PIN_config->GPIO_pinNumber) );
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	881b      	ldrh	r3, [r3, #0]
 80006ca:	4618      	mov	r0, r3
 80006cc:	f7ff ff96 	bl	80005fc <GET_CRLH_position>
 80006d0:	4603      	mov	r3, r0
 80006d2:	461a      	mov	r2, r3
 80006d4:	230f      	movs	r3, #15
 80006d6:	4093      	lsls	r3, r2
 80006d8:	43da      	mvns	r2, r3
 80006da:	68bb      	ldr	r3, [r7, #8]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	401a      	ands	r2, r3
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	601a      	str	r2, [r3, #0]

	if(PIN_config->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD || PIN_config->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP || PIN_config->GPIO_MODE == GPIO_MODE_OUTPUT_OD || PIN_config->GPIO_MODE == GPIO_MODE_OUTPUT_PP)
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	789b      	ldrb	r3, [r3, #2]
 80006e8:	2b07      	cmp	r3, #7
 80006ea:	d00b      	beq.n	8000704 <MCAL_GPIO_Init+0x62>
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	789b      	ldrb	r3, [r3, #2]
 80006f0:	2b06      	cmp	r3, #6
 80006f2:	d007      	beq.n	8000704 <MCAL_GPIO_Init+0x62>
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	789b      	ldrb	r3, [r3, #2]
 80006f8:	2b05      	cmp	r3, #5
 80006fa:	d003      	beq.n	8000704 <MCAL_GPIO_Init+0x62>
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	789b      	ldrb	r3, [r3, #2]
 8000700:	2b04      	cmp	r3, #4
 8000702:	d10e      	bne.n	8000722 <MCAL_GPIO_Init+0x80>
	{
		Pin_config = (((( PIN_config->GPIO_MODE - 4 ) <<2) | (PIN_config->GPIO_OUTPUT_Speed)) & 0x0F );
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	789b      	ldrb	r3, [r3, #2]
 8000708:	3b04      	subs	r3, #4
 800070a:	009b      	lsls	r3, r3, #2
 800070c:	b25a      	sxtb	r2, r3
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	78db      	ldrb	r3, [r3, #3]
 8000712:	b25b      	sxtb	r3, r3
 8000714:	4313      	orrs	r3, r2
 8000716:	b25b      	sxtb	r3, r3
 8000718:	b2db      	uxtb	r3, r3
 800071a:	f003 030f 	and.w	r3, r3, #15
 800071e:	73fb      	strb	r3, [r7, #15]
 8000720:	e02c      	b.n	800077c <MCAL_GPIO_Init+0xda>
	}
	//if pin is input
	else
	{
		if(PIN_config->GPIO_MODE == GPIO_MODE_Analog || PIN_config->GPIO_MODE == GPIO_MODE_INPUT_FLO)
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	789b      	ldrb	r3, [r3, #2]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d003      	beq.n	8000732 <MCAL_GPIO_Init+0x90>
 800072a:	683b      	ldr	r3, [r7, #0]
 800072c:	789b      	ldrb	r3, [r3, #2]
 800072e:	2b01      	cmp	r3, #1
 8000730:	d107      	bne.n	8000742 <MCAL_GPIO_Init+0xa0>
		{
			Pin_config = ((( PIN_config->GPIO_MODE ) <<2) & 0x0F );
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	789b      	ldrb	r3, [r3, #2]
 8000736:	009b      	lsls	r3, r3, #2
 8000738:	b2db      	uxtb	r3, r3
 800073a:	f003 030f 	and.w	r3, r3, #15
 800073e:	73fb      	strb	r3, [r7, #15]
 8000740:	e01c      	b.n	800077c <MCAL_GPIO_Init+0xda>
		}
		else if(PIN_config->GPIO_MODE == GPIO_MODE_INPUT_AF)     //consider it as input floating
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	789b      	ldrb	r3, [r3, #2]
 8000746:	2b08      	cmp	r3, #8
 8000748:	d102      	bne.n	8000750 <MCAL_GPIO_Init+0xae>
		{
			Pin_config = ((( GPIO_MODE_INPUT_FLO ) <<2) & 0x0F );
 800074a:	2304      	movs	r3, #4
 800074c:	73fb      	strb	r3, [r7, #15]
 800074e:	e015      	b.n	800077c <MCAL_GPIO_Init+0xda>
		}
		else
		{
			Pin_config = ((( GPIO_MODE_INPUT_PU ) <<2) & 0x0F );
 8000750:	2308      	movs	r3, #8
 8000752:	73fb      	strb	r3, [r7, #15]

			if(PIN_config->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	789b      	ldrb	r3, [r3, #2]
 8000758:	2b02      	cmp	r3, #2
 800075a:	d107      	bne.n	800076c <MCAL_GPIO_Init+0xca>
			{
				//Table 20. Port bit configuration table --> PxODR register -> 1
				GPIOx->ODR |= (PIN_config->GPIO_pinNumber);
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	68db      	ldr	r3, [r3, #12]
 8000760:	683a      	ldr	r2, [r7, #0]
 8000762:	8812      	ldrh	r2, [r2, #0]
 8000764:	431a      	orrs	r2, r3
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	60da      	str	r2, [r3, #12]
 800076a:	e007      	b.n	800077c <MCAL_GPIO_Init+0xda>
			}
			else
			{
				//Table 20. Port bit configuration table --> PxODR register -> 0
				GPIOx->ODR &= ~(PIN_config->GPIO_pinNumber);
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	68db      	ldr	r3, [r3, #12]
 8000770:	683a      	ldr	r2, [r7, #0]
 8000772:	8812      	ldrh	r2, [r2, #0]
 8000774:	43d2      	mvns	r2, r2
 8000776:	401a      	ands	r2, r3
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	60da      	str	r2, [r3, #12]
			}
		}
	}
	//Write on the CRL or CRH
	*ConfigRegister |= ( (Pin_config)<< GET_CRLH_position(PIN_config->GPIO_pinNumber) );
 800077c:	7bfc      	ldrb	r4, [r7, #15]
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	881b      	ldrh	r3, [r3, #0]
 8000782:	4618      	mov	r0, r3
 8000784:	f7ff ff3a 	bl	80005fc <GET_CRLH_position>
 8000788:	4603      	mov	r3, r0
 800078a:	fa04 f203 	lsl.w	r2, r4, r3
 800078e:	68bb      	ldr	r3, [r7, #8]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	431a      	orrs	r2, r3
 8000794:	68bb      	ldr	r3, [r7, #8]
 8000796:	601a      	str	r2, [r3, #0]
}
 8000798:	bf00      	nop
 800079a:	3714      	adds	r7, #20
 800079c:	46bd      	mov	sp, r7
 800079e:	bd90      	pop	{r4, r7, pc}

080007a0 <MCAL_I2C_init>:
 * @param [in]    - I2C_Config: all SPI configuration
 * @retval        - none
 * Note           - none
 */
void MCAL_I2C_init(I2C_TypeDef* I2Cx , I2C_InitTypedef* I2C_Init_Struct)
{
 80007a0:	b5b0      	push	{r4, r5, r7, lr}
 80007a2:	b086      	sub	sp, #24
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	6039      	str	r1, [r7, #0]
	uint16_t temp_reg = 0 , freq_range =0;
 80007aa:	2300      	movs	r3, #0
 80007ac:	82fb      	strh	r3, [r7, #22]
 80007ae:	2300      	movs	r3, #0
 80007b0:	82bb      	strh	r3, [r7, #20]
	uint32_t P_clk = 8000000;
 80007b2:	4b77      	ldr	r3, [pc, #476]	; (8000990 <MCAL_I2C_init+0x1f0>)
 80007b4:	613b      	str	r3, [r7, #16]
	uint16_t result =0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	81fb      	strh	r3, [r7, #14]
	//enable RCC Clock

	if(I2Cx == I2C1)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	4a75      	ldr	r2, [pc, #468]	; (8000994 <MCAL_I2C_init+0x1f4>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d110      	bne.n	80007e4 <MCAL_I2C_init+0x44>
	{
		Global_I2C_Config[I2C1_index] = *I2C_Init_Struct;
 80007c2:	4a75      	ldr	r2, [pc, #468]	; (8000998 <MCAL_I2C_init+0x1f8>)
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	4614      	mov	r4, r2
 80007c8:	461d      	mov	r5, r3
 80007ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007d2:	682b      	ldr	r3, [r5, #0]
 80007d4:	6023      	str	r3, [r4, #0]
		RCC_I2C1_CLK_EN;
 80007d6:	4b71      	ldr	r3, [pc, #452]	; (800099c <MCAL_I2C_init+0x1fc>)
 80007d8:	69db      	ldr	r3, [r3, #28]
 80007da:	4a70      	ldr	r2, [pc, #448]	; (800099c <MCAL_I2C_init+0x1fc>)
 80007dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007e0:	61d3      	str	r3, [r2, #28]
 80007e2:	e010      	b.n	8000806 <MCAL_I2C_init+0x66>
	}
	else
	{
		Global_I2C_Config[I2C2_index] = *I2C_Init_Struct;
 80007e4:	4b6c      	ldr	r3, [pc, #432]	; (8000998 <MCAL_I2C_init+0x1f8>)
 80007e6:	683a      	ldr	r2, [r7, #0]
 80007e8:	f103 0424 	add.w	r4, r3, #36	; 0x24
 80007ec:	4615      	mov	r5, r2
 80007ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007f6:	682b      	ldr	r3, [r5, #0]
 80007f8:	6023      	str	r3, [r4, #0]
		RCC_I2C2_CLK_EN;
 80007fa:	4b68      	ldr	r3, [pc, #416]	; (800099c <MCAL_I2C_init+0x1fc>)
 80007fc:	69db      	ldr	r3, [r3, #28]
 80007fe:	4a67      	ldr	r2, [pc, #412]	; (800099c <MCAL_I2C_init+0x1fc>)
 8000800:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000804:	61d3      	str	r3, [r2, #28]
	}

	if(I2C_Init_Struct->I2C_Mode == I2C_Mode_I2C)
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	689b      	ldr	r3, [r3, #8]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d17c      	bne.n	8000908 <MCAL_I2C_init+0x168>
	{
		//init timing
		temp_reg = I2Cx->CR2 ;
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	685b      	ldr	r3, [r3, #4]
 8000812:	82fb      	strh	r3, [r7, #22]

		//clear freq bits
		temp_reg &= ~(I2C_CR2_FREQ);
 8000814:	8afb      	ldrh	r3, [r7, #22]
 8000816:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800081a:	82fb      	strh	r3, [r7, #22]

		//Get the clk freqency
		P_clk = MCAL_RCC_GetPCLKFreq();
 800081c:	f000 fb0c 	bl	8000e38 <MCAL_RCC_GetPCLKFreq>
 8000820:	6138      	str	r0, [r7, #16]

		freq_range = P_clk/1000000;
 8000822:	693b      	ldr	r3, [r7, #16]
 8000824:	4a5e      	ldr	r2, [pc, #376]	; (80009a0 <MCAL_I2C_init+0x200>)
 8000826:	fba2 2303 	umull	r2, r3, r2, r3
 800082a:	0c9b      	lsrs	r3, r3, #18
 800082c:	82bb      	strh	r3, [r7, #20]

		temp_reg |= freq_range;
 800082e:	8afa      	ldrh	r2, [r7, #22]
 8000830:	8abb      	ldrh	r3, [r7, #20]
 8000832:	4313      	orrs	r3, r2
 8000834:	82fb      	strh	r3, [r7, #22]

		//write on the CR2 register
		I2Cx->CR2 = temp_reg;
 8000836:	8afa      	ldrh	r2, [r7, #22]
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	605a      	str	r2, [r3, #4]

		//configure CCR register

		//first disable the i2c
		I2Cx->CR1 &= ~(I2C_CR1_PE);
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f023 0201 	bic.w	r2, r3, #1
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	601a      	str	r2, [r3, #0]
		temp_reg = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	82fb      	strh	r3, [r7, #22]

		if(I2C_Init_Struct->clk_speed == I2C_Sclk_sm_50kH || I2C_Init_Struct->clk_speed == I2C_Sclk_sm_100kH)
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000854:	4293      	cmp	r3, r2
 8000856:	d004      	beq.n	8000862 <MCAL_I2C_init+0xc2>
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a51      	ldr	r2, [pc, #324]	; (80009a4 <MCAL_I2C_init+0x204>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d110      	bne.n	8000884 <MCAL_I2C_init+0xe4>
		{
			//calculate CCR
			result = (uint16_t)(P_clk / (2*I2C_Init_Struct->clk_speed));
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	693a      	ldr	r2, [r7, #16]
 800086a:	fbb2 f3f3 	udiv	r3, r2, r3
 800086e:	81fb      	strh	r3, [r7, #14]
			temp_reg = result;
 8000870:	89fb      	ldrh	r3, [r7, #14]
 8000872:	82fb      	strh	r3, [r7, #22]

			I2Cx->CCR = temp_reg;
 8000874:	8afa      	ldrh	r2, [r7, #22]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	61da      	str	r2, [r3, #28]

			//for TRISE register , add 1 to the input p_clk
			I2Cx->TRISE = (freq_range + 1);
 800087a:	8abb      	ldrh	r3, [r7, #20]
 800087c:	3301      	adds	r3, #1
 800087e:	461a      	mov	r2, r3
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	621a      	str	r2, [r3, #32]
		{
			//fast mode not supported
		}

		//=== I2C CR1 configuration=====
		temp_reg = I2Cx->CR1;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	82fb      	strh	r3, [r7, #22]

		temp_reg = (uint16_t)(I2C_Init_Struct->I2C_ACK_CONTROL | I2C_Init_Struct->I2C_General_call_address | I2C_Init_Struct->I2C_Mode | I2C_Init_Struct->Stretch_mode);
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	699b      	ldr	r3, [r3, #24]
 800088e:	b29a      	uxth	r2, r3
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	69db      	ldr	r3, [r3, #28]
 8000894:	b29b      	uxth	r3, r3
 8000896:	4313      	orrs	r3, r2
 8000898:	b29a      	uxth	r2, r3
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	689b      	ldr	r3, [r3, #8]
 800089e:	b29b      	uxth	r3, r3
 80008a0:	4313      	orrs	r3, r2
 80008a2:	b29a      	uxth	r2, r3
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	685b      	ldr	r3, [r3, #4]
 80008a8:	b29b      	uxth	r3, r3
 80008aa:	4313      	orrs	r3, r2
 80008ac:	82fb      	strh	r3, [r7, #22]

		//write on the CR1 register
		I2Cx->CR1 = temp_reg;
 80008ae:	8afa      	ldrh	r2, [r7, #22]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	601a      	str	r2, [r3, #0]

		//I2C OAR1 & OAR2 addresses
		temp_reg = 0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	82fb      	strh	r3, [r7, #22]
		if(I2C_Init_Struct->I2C_Device_address.Enable_dual_address == 1)
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	899b      	ldrh	r3, [r3, #12]
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d10f      	bne.n	80008e0 <MCAL_I2C_init+0x140>
		{
			temp_reg |= I2C_OAR2_ENDUAL;
 80008c0:	8afb      	ldrh	r3, [r7, #22]
 80008c2:	f043 0301 	orr.w	r3, r3, #1
 80008c6:	82fb      	strh	r3, [r7, #22]
			temp_reg |= I2C_Init_Struct->I2C_Device_address.Secondary_slave_address << I2C_OAR2_ADD2_Pos;
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	8a1b      	ldrh	r3, [r3, #16]
 80008cc:	005b      	lsls	r3, r3, #1
 80008ce:	b21a      	sxth	r2, r3
 80008d0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80008d4:	4313      	orrs	r3, r2
 80008d6:	b21b      	sxth	r3, r3
 80008d8:	82fb      	strh	r3, [r7, #22]
			I2Cx->OAR2 = temp_reg;
 80008da:	8afa      	ldrh	r2, [r7, #22]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	60da      	str	r2, [r3, #12]
		}
		//for primary address
		temp_reg = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	82fb      	strh	r3, [r7, #22]
		temp_reg |= I2C_Init_Struct->I2C_Device_address.Primary_Slave_address << 1;
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	89db      	ldrh	r3, [r3, #14]
 80008e8:	005b      	lsls	r3, r3, #1
 80008ea:	b21a      	sxth	r2, r3
 80008ec:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80008f0:	4313      	orrs	r3, r2
 80008f2:	b21b      	sxth	r3, r3
 80008f4:	82fb      	strh	r3, [r7, #22]
		temp_reg |= I2C_Init_Struct->I2C_Device_address.I2C_Addressing_slave_mode ;
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	695b      	ldr	r3, [r3, #20]
 80008fa:	b29a      	uxth	r2, r3
 80008fc:	8afb      	ldrh	r3, [r7, #22]
 80008fe:	4313      	orrs	r3, r2
 8000900:	82fb      	strh	r3, [r7, #22]
		I2Cx->OAR1 = temp_reg;
 8000902:	8afa      	ldrh	r2, [r7, #22]
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	609a      	str	r2, [r3, #8]
	{
		//not supported
	}

	//Interrupt mode for slave only
	if(I2C_Init_Struct->P_Slave_event_callback != NULL)
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	6a1b      	ldr	r3, [r3, #32]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d02e      	beq.n	800096e <MCAL_I2C_init+0x1ce>
	{
		//enable IRQ
		I2Cx->CR1 |= (I2C_CR2_ITBUFEN);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	601a      	str	r2, [r3, #0]
		I2Cx->CR1 |= (I2C_CR2_ITEVTEN);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	601a      	str	r2, [r3, #0]
		I2Cx->CR1 |= (I2C_CR2_ITERREN);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	601a      	str	r2, [r3, #0]
		if(I2Cx == I2C1)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	4a17      	ldr	r2, [pc, #92]	; (8000994 <MCAL_I2C_init+0x1f4>)
 8000938:	4293      	cmp	r3, r2
 800093a:	d10c      	bne.n	8000956 <MCAL_I2C_init+0x1b6>
		{
			(*((volatile uint32_t *)0xE000E100UL + 0x00) |= (1<<(31)));    //NVIC_IRQ31_I2C1_EV_EN;
 800093c:	4b1a      	ldr	r3, [pc, #104]	; (80009a8 <MCAL_I2C_init+0x208>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a19      	ldr	r2, [pc, #100]	; (80009a8 <MCAL_I2C_init+0x208>)
 8000942:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000946:	6013      	str	r3, [r2, #0]
			(*((volatile uint32_t *)0xE000E100UL + 0x04) |= (1<<(32-32))); // NVIC_IRQ32_I2C1_ER_EN;
 8000948:	4b18      	ldr	r3, [pc, #96]	; (80009ac <MCAL_I2C_init+0x20c>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a17      	ldr	r2, [pc, #92]	; (80009ac <MCAL_I2C_init+0x20c>)
 800094e:	f043 0301 	orr.w	r3, r3, #1
 8000952:	6013      	str	r3, [r2, #0]
 8000954:	e00b      	b.n	800096e <MCAL_I2C_init+0x1ce>
		}
		else
		{
			(*((volatile uint32_t *)0xE000E100UL + 0x04) |= (1<<(33-32))); //NVIC_IRQ33_I2C2_EV_EN;
 8000956:	4b15      	ldr	r3, [pc, #84]	; (80009ac <MCAL_I2C_init+0x20c>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a14      	ldr	r2, [pc, #80]	; (80009ac <MCAL_I2C_init+0x20c>)
 800095c:	f043 0302 	orr.w	r3, r3, #2
 8000960:	6013      	str	r3, [r2, #0]
			(*((volatile uint32_t *)0xE000E100UL + 0x04) |= (1<<(34-32)));  //NVIC_IRQ34_I2C2_ER_EN	;
 8000962:	4b12      	ldr	r3, [pc, #72]	; (80009ac <MCAL_I2C_init+0x20c>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4a11      	ldr	r2, [pc, #68]	; (80009ac <MCAL_I2C_init+0x20c>)
 8000968:	f043 0304 	orr.w	r3, r3, #4
 800096c:	6013      	str	r3, [r2, #0]
		}
	}

	//clear statues register
	I2Cx->SR1 = 0;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	2200      	movs	r2, #0
 8000972:	615a      	str	r2, [r3, #20]
	I2Cx->SR2 = 0;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	2200      	movs	r2, #0
 8000978:	619a      	str	r2, [r3, #24]

	//enable i2c
	I2Cx->CR1 |= (I2C_CR1_PE);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	f043 0201 	orr.w	r2, r3, #1
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	601a      	str	r2, [r3, #0]

}
 8000986:	bf00      	nop
 8000988:	3718      	adds	r7, #24
 800098a:	46bd      	mov	sp, r7
 800098c:	bdb0      	pop	{r4, r5, r7, pc}
 800098e:	bf00      	nop
 8000990:	007a1200 	.word	0x007a1200
 8000994:	40005400 	.word	0x40005400
 8000998:	2000001c 	.word	0x2000001c
 800099c:	40021000 	.word	0x40021000
 80009a0:	431bde83 	.word	0x431bde83
 80009a4:	000186a0 	.word	0x000186a0
 80009a8:	e000e100 	.word	0xe000e100
 80009ac:	e000e110 	.word	0xe000e110

080009b0 <MCAL_I2C_GPIO_SetPins>:
		RCC_I2C2_CLK_DIS;  //(RCC->APB1RSTR |=(1<<22));
	}
}

void MCAL_I2C_GPIO_SetPins(I2C_TypeDef* I2Cx)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PinCfg;
	if(I2Cx == I2C1)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	4a1d      	ldr	r2, [pc, #116]	; (8000a30 <MCAL_I2C_GPIO_SetPins+0x80>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d118      	bne.n	80009f2 <MCAL_I2C_GPIO_SetPins+0x42>
	{
		//PB6 - SCL
		//PB7 - SDA

		PinCfg.GPIO_pinNumber = GPIO_PIN6;
 80009c0:	2340      	movs	r3, #64	; 0x40
 80009c2:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD;
 80009c4:	2307      	movs	r3, #7
 80009c6:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
 80009c8:	2302      	movs	r3, #2
 80009ca:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB , &PinCfg);
 80009cc:	f107 030c 	add.w	r3, r7, #12
 80009d0:	4619      	mov	r1, r3
 80009d2:	4818      	ldr	r0, [pc, #96]	; (8000a34 <MCAL_I2C_GPIO_SetPins+0x84>)
 80009d4:	f7ff fe65 	bl	80006a2 <MCAL_GPIO_Init>

		PinCfg.GPIO_pinNumber = GPIO_PIN7;
 80009d8:	2380      	movs	r3, #128	; 0x80
 80009da:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD;
 80009dc:	2307      	movs	r3, #7
 80009de:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
 80009e0:	2302      	movs	r3, #2
 80009e2:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB , &PinCfg);
 80009e4:	f107 030c 	add.w	r3, r7, #12
 80009e8:	4619      	mov	r1, r3
 80009ea:	4812      	ldr	r0, [pc, #72]	; (8000a34 <MCAL_I2C_GPIO_SetPins+0x84>)
 80009ec:	f7ff fe59 	bl	80006a2 <MCAL_GPIO_Init>
		PinCfg.GPIO_pinNumber = GPIO_PIN11;
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD;
		PinCfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
		MCAL_GPIO_Init(GPIOB , &PinCfg);
	}
}
 80009f0:	e019      	b.n	8000a26 <MCAL_I2C_GPIO_SetPins+0x76>
		PinCfg.GPIO_pinNumber = GPIO_PIN10;
 80009f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009f6:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD;
 80009f8:	2307      	movs	r3, #7
 80009fa:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
 80009fc:	2302      	movs	r3, #2
 80009fe:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB , &PinCfg);
 8000a00:	f107 030c 	add.w	r3, r7, #12
 8000a04:	4619      	mov	r1, r3
 8000a06:	480b      	ldr	r0, [pc, #44]	; (8000a34 <MCAL_I2C_GPIO_SetPins+0x84>)
 8000a08:	f7ff fe4b 	bl	80006a2 <MCAL_GPIO_Init>
		PinCfg.GPIO_pinNumber = GPIO_PIN11;
 8000a0c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a10:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD;
 8000a12:	2307      	movs	r3, #7
 8000a14:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
 8000a16:	2302      	movs	r3, #2
 8000a18:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB , &PinCfg);
 8000a1a:	f107 030c 	add.w	r3, r7, #12
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4804      	ldr	r0, [pc, #16]	; (8000a34 <MCAL_I2C_GPIO_SetPins+0x84>)
 8000a22:	f7ff fe3e 	bl	80006a2 <MCAL_GPIO_Init>
}
 8000a26:	bf00      	nop
 8000a28:	3710      	adds	r7, #16
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40005400 	.word	0x40005400
 8000a34:	40010c00 	.word	0x40010c00

08000a38 <MCAL_I2C_MASTER_Transmit>:

void MCAL_I2C_MASTER_Transmit(I2C_TypeDef* I2Cx , uint16_t Device_address , uint8_t* data , uint32_t data_len , stop_condtion stop , Start_condtion start)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b086      	sub	sp, #24
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	60f8      	str	r0, [r7, #12]
 8000a40:	607a      	str	r2, [r7, #4]
 8000a42:	603b      	str	r3, [r7, #0]
 8000a44:	460b      	mov	r3, r1
 8000a46:	817b      	strh	r3, [r7, #10]
	int i;
	//generate start bit
	i2c_GenerateSTART(I2Cx , State_ENABLE , Start);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	68f8      	ldr	r0, [r7, #12]
 8000a4e:	f000 f8b3 	bl	8000bb8 <i2c_GenerateSTART>

	//EV5 .. check if start bit is done and the device become a master
	while(!Get_flag_status(I2Cx , EV5));
 8000a52:	bf00      	nop
 8000a54:	2101      	movs	r1, #1
 8000a56:	68f8      	ldr	r0, [r7, #12]
 8000a58:	f000 f8f0 	bl	8000c3c <Get_flag_status>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d0f8      	beq.n	8000a54 <MCAL_I2C_MASTER_Transmit+0x1c>

	//send address of slave
	I2C_send_address(I2Cx , Device_address , I2C_Transmit_direction);
 8000a62:	897b      	ldrh	r3, [r7, #10]
 8000a64:	2200      	movs	r2, #0
 8000a66:	4619      	mov	r1, r3
 8000a68:	68f8      	ldr	r0, [r7, #12]
 8000a6a:	f000 f961 	bl	8000d30 <I2C_send_address>

	//EV6
	while(!Get_flag_status(I2Cx , EV6));
 8000a6e:	bf00      	nop
 8000a70:	2102      	movs	r1, #2
 8000a72:	68f8      	ldr	r0, [r7, #12]
 8000a74:	f000 f8e2 	bl	8000c3c <Get_flag_status>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d0f8      	beq.n	8000a70 <MCAL_I2C_MASTER_Transmit+0x38>

	//check TRA ,busy , MSL , TXE flages
	while(!Get_flag_status(I2Cx , MASTER_BY_TRASMITTING));
 8000a7e:	bf00      	nop
 8000a80:	4915      	ldr	r1, [pc, #84]	; (8000ad8 <MCAL_I2C_MASTER_Transmit+0xa0>)
 8000a82:	68f8      	ldr	r0, [r7, #12]
 8000a84:	f000 f8da 	bl	8000c3c <Get_flag_status>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d0f8      	beq.n	8000a80 <MCAL_I2C_MASTER_Transmit+0x48>

	//data
	for(i=0 ; i<data_len ; i++)
 8000a8e:	2300      	movs	r3, #0
 8000a90:	617b      	str	r3, [r7, #20]
 8000a92:	e011      	b.n	8000ab8 <MCAL_I2C_MASTER_Transmit+0x80>
	{
		I2Cx->DR = data[i];
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	687a      	ldr	r2, [r7, #4]
 8000a98:	4413      	add	r3, r2
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	611a      	str	r2, [r3, #16]
		while(!Get_flag_status(I2Cx , EV8));
 8000aa2:	bf00      	nop
 8000aa4:	2104      	movs	r1, #4
 8000aa6:	68f8      	ldr	r0, [r7, #12]
 8000aa8:	f000 f8c8 	bl	8000c3c <Get_flag_status>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d0f8      	beq.n	8000aa4 <MCAL_I2C_MASTER_Transmit+0x6c>
	for(i=0 ; i<data_len ; i++)
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	617b      	str	r3, [r7, #20]
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	683a      	ldr	r2, [r7, #0]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d8e9      	bhi.n	8000a94 <MCAL_I2C_MASTER_Transmit+0x5c>
	}

	if(stop == with_stop)
 8000ac0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d103      	bne.n	8000ad0 <MCAL_I2C_MASTER_Transmit+0x98>
	{
		i2c_GenerateSTOP(I2Cx , State_ENABLE);
 8000ac8:	2101      	movs	r1, #1
 8000aca:	68f8      	ldr	r0, [r7, #12]
 8000acc:	f000 f89b 	bl	8000c06 <i2c_GenerateSTOP>
	}
}
 8000ad0:	bf00      	nop
 8000ad2:	3718      	adds	r7, #24
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	00070080 	.word	0x00070080

08000adc <MCAL_I2C_MASTER_Receive>:

MCAL_I2C_MASTER_Receive(I2C_TypeDef* I2Cx , uint16_t Device_address , uint8_t* data , uint32_t data_len , stop_condtion stop , Start_condtion start)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b086      	sub	sp, #24
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	60f8      	str	r0, [r7, #12]
 8000ae4:	607a      	str	r2, [r7, #4]
 8000ae6:	603b      	str	r3, [r7, #0]
 8000ae8:	460b      	mov	r3, r1
 8000aea:	817b      	strh	r3, [r7, #10]
	uint8_t index = (I2Cx == I2C1)? I2C1_index : I2C2_index ;
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	4a30      	ldr	r2, [pc, #192]	; (8000bb0 <MCAL_I2C_MASTER_Receive+0xd4>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	bf14      	ite	ne
 8000af4:	2301      	movne	r3, #1
 8000af6:	2300      	moveq	r3, #0
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	74fb      	strb	r3, [r7, #19]

	int i;
	//generate start bit
	i2c_GenerateSTART(I2Cx , State_ENABLE , Start);
 8000afc:	2200      	movs	r2, #0
 8000afe:	2101      	movs	r1, #1
 8000b00:	68f8      	ldr	r0, [r7, #12]
 8000b02:	f000 f859 	bl	8000bb8 <i2c_GenerateSTART>

	//EV5 .. check if start bit is done and the device become a master
	while(!Get_flag_status(I2Cx , EV5));
 8000b06:	bf00      	nop
 8000b08:	2101      	movs	r1, #1
 8000b0a:	68f8      	ldr	r0, [r7, #12]
 8000b0c:	f000 f896 	bl	8000c3c <Get_flag_status>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d0f8      	beq.n	8000b08 <MCAL_I2C_MASTER_Receive+0x2c>

	//send address of slave
	I2C_send_address(I2Cx , Device_address , I2C_Reciver_direction);
 8000b16:	897b      	ldrh	r3, [r7, #10]
 8000b18:	2201      	movs	r2, #1
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	68f8      	ldr	r0, [r7, #12]
 8000b1e:	f000 f907 	bl	8000d30 <I2C_send_address>

	//EV6
	while(!Get_flag_status(I2Cx , EV6));
 8000b22:	bf00      	nop
 8000b24:	2102      	movs	r1, #2
 8000b26:	68f8      	ldr	r0, [r7, #12]
 8000b28:	f000 f888 	bl	8000c3c <Get_flag_status>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d0f8      	beq.n	8000b24 <MCAL_I2C_MASTER_Receive+0x48>

	I2C_AcknowledgeConfig(I2Cx, State_ENABLE);
 8000b32:	2101      	movs	r1, #1
 8000b34:	68f8      	ldr	r0, [r7, #12]
 8000b36:	f000 f91a 	bl	8000d6e <I2C_AcknowledgeConfig>

	if(data_len)
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d018      	beq.n	8000b72 <MCAL_I2C_MASTER_Receive+0x96>
	{
		for(i = data_len ; i>1 ; i--)
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	617b      	str	r3, [r7, #20]
 8000b44:	e012      	b.n	8000b6c <MCAL_I2C_MASTER_Receive+0x90>
		{
			while(!Get_flag_status(I2Cx , EV7));
 8000b46:	bf00      	nop
 8000b48:	2103      	movs	r1, #3
 8000b4a:	68f8      	ldr	r0, [r7, #12]
 8000b4c:	f000 f876 	bl	8000c3c <Get_flag_status>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d0f8      	beq.n	8000b48 <MCAL_I2C_MASTER_Receive+0x6c>

			//Read data
			*data = I2Cx->DR ;
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	691b      	ldr	r3, [r3, #16]
 8000b5a:	b2da      	uxtb	r2, r3
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	701a      	strb	r2, [r3, #0]

			data++;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	3301      	adds	r3, #1
 8000b64:	607b      	str	r3, [r7, #4]
		for(i = data_len ; i>1 ; i--)
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	3b01      	subs	r3, #1
 8000b6a:	617b      	str	r3, [r7, #20]
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	dce9      	bgt.n	8000b46 <MCAL_I2C_MASTER_Receive+0x6a>
		}
	}

	I2C_AcknowledgeConfig(I2Cx, State_DISABLE);
 8000b72:	2100      	movs	r1, #0
 8000b74:	68f8      	ldr	r0, [r7, #12]
 8000b76:	f000 f8fa 	bl	8000d6e <I2C_AcknowledgeConfig>

	if(stop == with_stop)
 8000b7a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d103      	bne.n	8000b8a <MCAL_I2C_MASTER_Receive+0xae>
	{
		i2c_GenerateSTOP(I2Cx , State_ENABLE);
 8000b82:	2101      	movs	r1, #1
 8000b84:	68f8      	ldr	r0, [r7, #12]
 8000b86:	f000 f83e 	bl	8000c06 <i2c_GenerateSTOP>
	}

	if((Global_I2C_Config[index]).I2C_ACK_CONTROL = I2C_ACK_Enable)
 8000b8a:	7cfa      	ldrb	r2, [r7, #19]
 8000b8c:	4909      	ldr	r1, [pc, #36]	; (8000bb4 <MCAL_I2C_MASTER_Receive+0xd8>)
 8000b8e:	4613      	mov	r3, r2
 8000b90:	00db      	lsls	r3, r3, #3
 8000b92:	4413      	add	r3, r2
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	440b      	add	r3, r1
 8000b98:	3318      	adds	r3, #24
 8000b9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b9e:	601a      	str	r2, [r3, #0]
	{
		I2C_AcknowledgeConfig(I2Cx, State_ENABLE);
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	68f8      	ldr	r0, [r7, #12]
 8000ba4:	f000 f8e3 	bl	8000d6e <I2C_AcknowledgeConfig>
	}

}
 8000ba8:	bf00      	nop
 8000baa:	3718      	adds	r7, #24
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	40005400 	.word	0x40005400
 8000bb4:	2000001c 	.word	0x2000001c

08000bb8 <i2c_GenerateSTART>:
	return (uint8_t)I2Cx->DR;
}


void i2c_GenerateSTART(I2C_TypeDef* I2Cx , Functional_state new_state , Start_condtion start)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	460b      	mov	r3, r1
 8000bc2:	70fb      	strb	r3, [r7, #3]
 8000bc4:	4613      	mov	r3, r2
 8000bc6:	70bb      	strb	r3, [r7, #2]
	if(start != repeated_start)
 8000bc8:	78bb      	ldrb	r3, [r7, #2]
 8000bca:	2b01      	cmp	r3, #1
 8000bcc:	d007      	beq.n	8000bde <i2c_GenerateSTART+0x26>
	{
		//check the bus
		while(Get_flag_status(I2Cx , I2C_FLAG_BUSY));
 8000bce:	bf00      	nop
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	6878      	ldr	r0, [r7, #4]
 8000bd4:	f000 f832 	bl	8000c3c <Get_flag_status>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d1f8      	bne.n	8000bd0 <i2c_GenerateSTART+0x18>

	}

	if(new_state != State_DISABLE)
 8000bde:	78fb      	ldrb	r3, [r7, #3]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d006      	beq.n	8000bf2 <i2c_GenerateSTART+0x3a>
	{
		I2Cx->CR1 |= I2C_CR1_START;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	601a      	str	r2, [r3, #0]
	}
	else
	{
		I2Cx->CR1 &= ~(I2C_CR1_START);
	}
}
 8000bf0:	e005      	b.n	8000bfe <i2c_GenerateSTART+0x46>
		I2Cx->CR1 &= ~(I2C_CR1_START);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	601a      	str	r2, [r3, #0]
}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <i2c_GenerateSTOP>:


void i2c_GenerateSTOP(I2C_TypeDef* I2Cx, Functional_state new_state)
{
 8000c06:	b480      	push	{r7}
 8000c08:	b083      	sub	sp, #12
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	6078      	str	r0, [r7, #4]
 8000c0e:	460b      	mov	r3, r1
 8000c10:	70fb      	strb	r3, [r7, #3]
	if(new_state != State_DISABLE)
 8000c12:	78fb      	ldrb	r3, [r7, #3]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d006      	beq.n	8000c26 <i2c_GenerateSTOP+0x20>
	{
		I2Cx->CR1 |= I2C_CR1_STOP;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	601a      	str	r2, [r3, #0]
	}
	else
	{
		I2Cx->CR1 &= ~(I2C_CR1_STOP);
	}
}
 8000c24:	e005      	b.n	8000c32 <i2c_GenerateSTOP+0x2c>
		I2Cx->CR1 &= ~(I2C_CR1_STOP);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	601a      	str	r2, [r3, #0]
}
 8000c32:	bf00      	nop
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bc80      	pop	{r7}
 8000c3a:	4770      	bx	lr

08000c3c <Get_flag_status>:

FlagStatus Get_flag_status(I2C_TypeDef* I2Cx , status flag)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b089      	sub	sp, #36	; 0x24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	6039      	str	r1, [r7, #0]
	volatile uint32_t dummy_Read;

	uint32_t flag1 , flag2 , lastevent;
	FlagStatus bit_status= Flag_reset;
 8000c46:	2300      	movs	r3, #0
 8000c48:	77fb      	strb	r3, [r7, #31]

	switch(flag)
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	2b03      	cmp	r3, #3
 8000c4e:	d05a      	beq.n	8000d06 <Get_flag_status+0xca>
 8000c50:	2b03      	cmp	r3, #3
 8000c52:	d804      	bhi.n	8000c5e <Get_flag_status+0x22>
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d014      	beq.n	8000c82 <Get_flag_status+0x46>
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d81e      	bhi.n	8000c9a <Get_flag_status+0x5e>
 8000c5c:	e005      	b.n	8000c6a <Get_flag_status+0x2e>
 8000c5e:	2b05      	cmp	r3, #5
 8000c60:	d945      	bls.n	8000cee <Get_flag_status+0xb2>
 8000c62:	4a32      	ldr	r2, [pc, #200]	; (8000d2c <Get_flag_status+0xf0>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d027      	beq.n	8000cb8 <Get_flag_status+0x7c>
 8000c68:	e059      	b.n	8000d1e <Get_flag_status+0xe2>
	{
	case I2C_FLAG_BUSY:
	{
		if(I2Cx->SR2 & I2C_SR2_BUSY)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	699b      	ldr	r3, [r3, #24]
 8000c6e:	f003 0302 	and.w	r3, r3, #2
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d002      	beq.n	8000c7c <Get_flag_status+0x40>
			bit_status = Flag_set;
 8000c76:	2301      	movs	r3, #1
 8000c78:	77fb      	strb	r3, [r7, #31]
		else
			bit_status = Flag_reset;
	}
	break;
 8000c7a:	e050      	b.n	8000d1e <Get_flag_status+0xe2>
			bit_status = Flag_reset;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	77fb      	strb	r3, [r7, #31]
	break;
 8000c80:	e04d      	b.n	8000d1e <Get_flag_status+0xe2>

	case EV5:
	{
		if(I2Cx->SR1 & I2C_SR1_SB)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	695b      	ldr	r3, [r3, #20]
 8000c86:	f003 0301 	and.w	r3, r3, #1
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d002      	beq.n	8000c94 <Get_flag_status+0x58>
			bit_status = Flag_set;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	77fb      	strb	r3, [r7, #31]
		else
			bit_status = Flag_reset;
	}
	break;
 8000c92:	e044      	b.n	8000d1e <Get_flag_status+0xe2>
			bit_status = Flag_reset;
 8000c94:	2300      	movs	r3, #0
 8000c96:	77fb      	strb	r3, [r7, #31]
	break;
 8000c98:	e041      	b.n	8000d1e <Get_flag_status+0xe2>

	case EV6:
	{
		if(I2Cx->SR1 & I2C_SR1_ADDR)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	695b      	ldr	r3, [r3, #20]
 8000c9e:	f003 0302 	and.w	r3, r3, #2
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d002      	beq.n	8000cac <Get_flag_status+0x70>
			bit_status = Flag_set;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	77fb      	strb	r3, [r7, #31]
 8000caa:	e001      	b.n	8000cb0 <Get_flag_status+0x74>
		else
			bit_status = Flag_reset;
 8000cac:	2300      	movs	r3, #0
 8000cae:	77fb      	strb	r3, [r7, #31]

		dummy_Read = I2Cx->SR2;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	699b      	ldr	r3, [r3, #24]
 8000cb4:	60fb      	str	r3, [r7, #12]
	}
	break;
 8000cb6:	e032      	b.n	8000d1e <Get_flag_status+0xe2>

	case MASTER_BY_TRASMITTING:
	{
		flag1 = I2Cx->SR1;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	695b      	ldr	r3, [r3, #20]
 8000cbc:	61bb      	str	r3, [r7, #24]
		flag2 = I2Cx->SR2;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	699b      	ldr	r3, [r3, #24]
 8000cc2:	617b      	str	r3, [r7, #20]
		flag2 = flag2<<16;
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	041b      	lsls	r3, r3, #16
 8000cc8:	617b      	str	r3, [r7, #20]

		lastevent = ((flag1 | flag2) & (uint32_t)0x00FFFFFF);
 8000cca:	69ba      	ldr	r2, [r7, #24]
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000cd4:	613b      	str	r3, [r7, #16]

		if((lastevent & MASTER_BY_TRASMITTING) == MASTER_BY_TRASMITTING)
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <Get_flag_status+0xf0>)
 8000cda:	4013      	ands	r3, r2
 8000cdc:	4a13      	ldr	r2, [pc, #76]	; (8000d2c <Get_flag_status+0xf0>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d102      	bne.n	8000ce8 <Get_flag_status+0xac>
		{
			bit_status = Flag_set;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	77fb      	strb	r3, [r7, #31]
		else
		{
			bit_status = Flag_reset;
		}
	}
	break;
 8000ce6:	e01a      	b.n	8000d1e <Get_flag_status+0xe2>
			bit_status = Flag_reset;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	77fb      	strb	r3, [r7, #31]
	break;
 8000cec:	e017      	b.n	8000d1e <Get_flag_status+0xe2>

	case EV8_1:
	case EV8:
	{
		if(I2Cx->SR1 & I2C_SR1_TXE)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	695b      	ldr	r3, [r3, #20]
 8000cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d002      	beq.n	8000d00 <Get_flag_status+0xc4>
			bit_status = Flag_set;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	77fb      	strb	r3, [r7, #31]
		else
			bit_status = Flag_reset;
	}
	break;
 8000cfe:	e00e      	b.n	8000d1e <Get_flag_status+0xe2>
			bit_status = Flag_reset;
 8000d00:	2300      	movs	r3, #0
 8000d02:	77fb      	strb	r3, [r7, #31]
	break;
 8000d04:	e00b      	b.n	8000d1e <Get_flag_status+0xe2>

	case EV7:
	{
		if(I2Cx->SR1 & I2C_SR1_RXNE)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	695b      	ldr	r3, [r3, #20]
 8000d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d002      	beq.n	8000d18 <Get_flag_status+0xdc>
			bit_status = Flag_set;
 8000d12:	2301      	movs	r3, #1
 8000d14:	77fb      	strb	r3, [r7, #31]
		else
			bit_status = Flag_reset;
	}
	break;
 8000d16:	e001      	b.n	8000d1c <Get_flag_status+0xe0>
			bit_status = Flag_reset;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	77fb      	strb	r3, [r7, #31]
	break;
 8000d1c:	bf00      	nop

	}

	return bit_status;
 8000d1e:	7ffb      	ldrb	r3, [r7, #31]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3724      	adds	r7, #36	; 0x24
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bc80      	pop	{r7}
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	00070080 	.word	0x00070080

08000d30 <I2C_send_address>:


void I2C_send_address(I2C_TypeDef* I2Cx , uint16_t address ,I2C_direction direction)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	460b      	mov	r3, r1
 8000d3a:	807b      	strh	r3, [r7, #2]
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	707b      	strb	r3, [r7, #1]
	address = (address<<1);
 8000d40:	887b      	ldrh	r3, [r7, #2]
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	807b      	strh	r3, [r7, #2]

	if(direction == I2C_Transmit_direction)
 8000d46:	787b      	ldrb	r3, [r7, #1]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d104      	bne.n	8000d56 <I2C_send_address+0x26>
	{
		address &= ~(1<<0);
 8000d4c:	887b      	ldrh	r3, [r7, #2]
 8000d4e:	f023 0301 	bic.w	r3, r3, #1
 8000d52:	807b      	strh	r3, [r7, #2]
 8000d54:	e003      	b.n	8000d5e <I2C_send_address+0x2e>
	}
	else
	{
		address |=(1<<0);
 8000d56:	887b      	ldrh	r3, [r7, #2]
 8000d58:	f043 0301 	orr.w	r3, r3, #1
 8000d5c:	807b      	strh	r3, [r7, #2]
	}

	I2Cx->DR = address;
 8000d5e:	887a      	ldrh	r2, [r7, #2]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	611a      	str	r2, [r3, #16]

}
 8000d64:	bf00      	nop
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bc80      	pop	{r7}
 8000d6c:	4770      	bx	lr

08000d6e <I2C_AcknowledgeConfig>:

void I2C_AcknowledgeConfig(I2C_TypeDef *I2Cx, Functional_state NewState)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	b083      	sub	sp, #12
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
 8000d76:	460b      	mov	r3, r1
 8000d78:	70fb      	strb	r3, [r7, #3]
	if(NewState == State_ENABLE)
 8000d7a:	78fb      	ldrb	r3, [r7, #3]
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d106      	bne.n	8000d8e <I2C_AcknowledgeConfig+0x20>
	{
		/* Enable the Acknowledgment */
		I2Cx->CR1 |= I2C_CR1_ACK;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	601a      	str	r2, [r3, #0]
	else
	{
		/* Disable the Acknowledgment */
		I2Cx->CR1 &= ~(I2C_CR1_ACK);
	}
}
 8000d8c:	e005      	b.n	8000d9a <I2C_AcknowledgeConfig+0x2c>
		I2Cx->CR1 &= ~(I2C_CR1_ACK);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	601a      	str	r2, [r3, #0]
}
 8000d9a:	bf00      	nop
 8000d9c:	370c      	adds	r7, #12
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bc80      	pop	{r7}
 8000da2:	4770      	bx	lr

08000da4 <I2C1_EV_IRQHandler>:


void I2C1_EV_IRQHandler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
	/* I2C1 event interrupt*/
	volatile uint32_t dummy_read =0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	603b      	str	r3, [r7, #0]
	I2C_TypeDef* I2Cx = I2C1;
 8000dae:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <I2C1_EV_IRQHandler+0x38>)
 8000db0:	60fb      	str	r3, [r7, #12]

	uint32_t temp1 , temp2 , temp3;

	temp1= I2Cx->CR2 & (I2C_CR2_ITEVTEN);
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000dba:	60bb      	str	r3, [r7, #8]
	temp2= I2Cx->CR2 & (I2C_CR2_ITBUFEN);
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dc4:	607b      	str	r3, [r7, #4]

	temp2= I2Cx->SR1 & (I2C_SR1_STOPF);
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	695b      	ldr	r3, [r3, #20]
 8000dca:	f003 0310 	and.w	r3, r3, #16
 8000dce:	607b      	str	r3, [r7, #4]
}
 8000dd0:	bf00      	nop
 8000dd2:	3714      	adds	r7, #20
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bc80      	pop	{r7}
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	40005400 	.word	0x40005400

08000de0 <I2C1_ER_IRQHandler>:


void I2C1_ER_IRQHandler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
	/* I2C1 error interrupt  */
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bc80      	pop	{r7}
 8000dea:	4770      	bx	lr

08000dec <I2C2_EV_IRQHandler>:


void I2C2_EV_IRQHandler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
	/* I2C1 event interrupt*/
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bc80      	pop	{r7}
 8000df6:	4770      	bx	lr

08000df8 <I2C2_ER_IRQHandler>:


void I2C2_ER_IRQHandler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
	/* I2C1 error interrupt  */
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bc80      	pop	{r7}
 8000e02:	4770      	bx	lr

08000e04 <MCAL_RCC_GetSysCLK>:
1111: SYSCLK divided by 512
 */
const uint8_t AHB_Prescaler[17U]= {0,0,0,0,0,0,0,0,1,2,3,4,6,7,8,9};

uint32_t MCAL_RCC_GetSysCLK(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
00: HSI oscillator used as system clock
01: HSE oscillator used as system clock
10: PLL used as system clock
11: not applicable
*/
	switch( (RCC->CFGR >>2)&0b11 )
 8000e08:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <MCAL_RCC_GetSysCLK+0x28>)
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	089b      	lsrs	r3, r3, #2
 8000e0e:	f003 0303 	and.w	r3, r3, #3
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d002      	beq.n	8000e1c <MCAL_RCC_GetSysCLK+0x18>
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d002      	beq.n	8000e20 <MCAL_RCC_GetSysCLK+0x1c>
 8000e1a:	e003      	b.n	8000e24 <MCAL_RCC_GetSysCLK+0x20>
	{
	case 0:
		return HSI_CLK;
 8000e1c:	4b04      	ldr	r3, [pc, #16]	; (8000e30 <MCAL_RCC_GetSysCLK+0x2c>)
 8000e1e:	e001      	b.n	8000e24 <MCAL_RCC_GetSysCLK+0x20>
		break;

	case 1:
		return HSE_CLK;
 8000e20:	4b04      	ldr	r3, [pc, #16]	; (8000e34 <MCAL_RCC_GetSysCLK+0x30>)
 8000e22:	e7ff      	b.n	8000e24 <MCAL_RCC_GetSysCLK+0x20>
		break;

	}
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bc80      	pop	{r7}
 8000e2a:	4770      	bx	lr
 8000e2c:	40021000 	.word	0x40021000
 8000e30:	007a1200 	.word	0x007a1200
 8000e34:	00f42400 	.word	0x00f42400

08000e38 <MCAL_RCC_GetPCLKFreq>:

uint32_t MCAL_RCC_GetPCLKFreq(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
	//Bits 7:4 HPRE: AHB prescaler
	return( MCAL_RCC_GetSysCLK() >> (AHB_Prescaler[( ( (RCC->CFGR)>>4 ) &0b1111 )]) );
 8000e3c:	f7ff ffe2 	bl	8000e04 <MCAL_RCC_GetSysCLK>
 8000e40:	4601      	mov	r1, r0
 8000e42:	4b05      	ldr	r3, [pc, #20]	; (8000e58 <MCAL_RCC_GetPCLKFreq+0x20>)
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	091b      	lsrs	r3, r3, #4
 8000e48:	f003 030f 	and.w	r3, r3, #15
 8000e4c:	4a03      	ldr	r2, [pc, #12]	; (8000e5c <MCAL_RCC_GetPCLKFreq+0x24>)
 8000e4e:	5cd3      	ldrb	r3, [r2, r3]
 8000e50:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40021000 	.word	0x40021000
 8000e5c:	0800104c 	.word	0x0800104c

08000e60 <MCAL_SPI_SendReceive_Data>:
 * @param [in]    - Polling: Enable polling or disable it
 * @retval        - none
 * Note           - none
 */
void MCAL_SPI_SendReceive_Data(SPI_TypeDef* SPIx , uint16_t* p_TxBuffer , SPI_Polling_mechanism Polling)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	60b9      	str	r1, [r7, #8]
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	71fb      	strb	r3, [r7, #7]
	if(Polling == Polling_ENABLE1)
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d107      	bne.n	8000e84 <MCAL_SPI_SendReceive_Data+0x24>
	{
		while(((SPIx->SR >>1)&1) == 0);
 8000e74:	bf00      	nop
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	085b      	lsrs	r3, r3, #1
 8000e7c:	f003 0301 	and.w	r3, r3, #1
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d0f8      	beq.n	8000e76 <MCAL_SPI_SendReceive_Data+0x16>
	}
	SPIx->DR = *p_TxBuffer;
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	881b      	ldrh	r3, [r3, #0]
 8000e88:	461a      	mov	r2, r3
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	60da      	str	r2, [r3, #12]


	if(Polling == Polling_ENABLE1)
 8000e8e:	79fb      	ldrb	r3, [r7, #7]
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d106      	bne.n	8000ea2 <MCAL_SPI_SendReceive_Data+0x42>
	{
		while(((SPIx->SR >>0)&1) == 0);    //receive buffer is full
 8000e94:	bf00      	nop
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d0f9      	beq.n	8000e96 <MCAL_SPI_SendReceive_Data+0x36>
	}
	*p_TxBuffer = SPIx->DR;
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	68db      	ldr	r3, [r3, #12]
 8000ea6:	b29a      	uxth	r2, r3
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	801a      	strh	r2, [r3, #0]
}
 8000eac:	bf00      	nop
 8000eae:	3714      	adds	r7, #20
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bc80      	pop	{r7}
 8000eb4:	4770      	bx	lr
	...

08000eb8 <SPI1_IRQHandler>:


//IRQ

void SPI1_IRQHandler()    /* SPI1 global interrupt */
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src;

	irq_src.TXE  = ((SPI1->SR >>1)&1);
 8000ebe:	4b13      	ldr	r3, [pc, #76]	; (8000f0c <SPI1_IRQHandler+0x54>)
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	085b      	lsrs	r3, r3, #1
 8000ec4:	f003 0301 	and.w	r3, r3, #1
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	793b      	ldrb	r3, [r7, #4]
 8000ecc:	f362 0300 	bfi	r3, r2, #0, #1
 8000ed0:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ((SPI1->SR >>0)&1);
 8000ed2:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <SPI1_IRQHandler+0x54>)
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	b2da      	uxtb	r2, r3
 8000edc:	793b      	ldrb	r3, [r7, #4]
 8000ede:	f362 0341 	bfi	r3, r2, #1, #1
 8000ee2:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ((SPI1->SR >>4)&1);
 8000ee4:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <SPI1_IRQHandler+0x54>)
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	091b      	lsrs	r3, r3, #4
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	793b      	ldrb	r3, [r7, #4]
 8000ef2:	f362 0382 	bfi	r3, r2, #2, #1
 8000ef6:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[SPI1_Index]->P_IRQ_callback(irq_src);
 8000ef8:	4b05      	ldr	r3, [pc, #20]	; (8000f10 <SPI1_IRQHandler+0x58>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	695b      	ldr	r3, [r3, #20]
 8000efe:	7938      	ldrb	r0, [r7, #4]
 8000f00:	4798      	blx	r3
}
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40013000 	.word	0x40013000
 8000f10:	20000064 	.word	0x20000064

08000f14 <SPI2_IRQHandler>:

void SPI2_IRQHandler()           			/* SPI2 global interrupt  */
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0

	struct S_IRQ_SRC irq_src;

	irq_src.TXE  = ((SPI2->SR >>1)&1);
 8000f1a:	4b13      	ldr	r3, [pc, #76]	; (8000f68 <SPI2_IRQHandler+0x54>)
 8000f1c:	689b      	ldr	r3, [r3, #8]
 8000f1e:	085b      	lsrs	r3, r3, #1
 8000f20:	f003 0301 	and.w	r3, r3, #1
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	793b      	ldrb	r3, [r7, #4]
 8000f28:	f362 0300 	bfi	r3, r2, #0, #1
 8000f2c:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ((SPI2->SR >>0)&1);
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <SPI2_IRQHandler+0x54>)
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	b2da      	uxtb	r2, r3
 8000f38:	793b      	ldrb	r3, [r7, #4]
 8000f3a:	f362 0341 	bfi	r3, r2, #1, #1
 8000f3e:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ((SPI2->SR >>4)&1);
 8000f40:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <SPI2_IRQHandler+0x54>)
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	091b      	lsrs	r3, r3, #4
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	b2da      	uxtb	r2, r3
 8000f4c:	793b      	ldrb	r3, [r7, #4]
 8000f4e:	f362 0382 	bfi	r3, r2, #2, #1
 8000f52:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[SPI2_Index]->P_IRQ_callback(irq_src);
 8000f54:	4b05      	ldr	r3, [pc, #20]	; (8000f6c <SPI2_IRQHandler+0x58>)
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	695b      	ldr	r3, [r3, #20]
 8000f5a:	7938      	ldrb	r0, [r7, #4]
 8000f5c:	4798      	blx	r3

}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40003800 	.word	0x40003800
 8000f6c:	20000064 	.word	0x20000064

08000f70 <MCAL_UART_Send_Data>:
 * @param [in]    - Polling: Enable polling or disable it
 * @retval        - none
 * Note           - none
 */
void MCAL_UART_Send_Data(USART_TypeDef* USARTx , uint16_t* p_TxBuffer , Polling_mechanism Polling)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	71fb      	strb	r3, [r7, #7]
	if(Polling == Polling_EN)
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d107      	bne.n	8000f94 <MCAL_UART_Send_Data+0x24>
		while(((USARTx->SR >>7)&1) == 0);
 8000f84:	bf00      	nop
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	09db      	lsrs	r3, r3, #7
 8000f8c:	f003 0301 	and.w	r3, r3, #1
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d0f8      	beq.n	8000f86 <MCAL_UART_Send_Data+0x16>
	{
		USARTx->DR = ((*p_TxBuffer) & (uint16_t)0x1FF );
	}
	else
	{
		USARTx->DR = ((*p_TxBuffer) & (uint8_t)0xFF );
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	881b      	ldrh	r3, [r3, #0]
 8000f98:	b2da      	uxtb	r2, r3
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	605a      	str	r2, [r3, #4]
	}
}
 8000f9e:	bf00      	nop
 8000fa0:	3714      	adds	r7, #20
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bc80      	pop	{r7}
 8000fa6:	4770      	bx	lr

08000fa8 <USART1_IRQHandler>:


//ISR

void USART1_IRQHandler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
	/* USART1 global interrupt */
	Global_UART_Config->P_IRQ_callback ();
 8000fac:	4b02      	ldr	r3, [pc, #8]	; (8000fb8 <USART1_IRQHandler+0x10>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	691b      	ldr	r3, [r3, #16]
 8000fb2:	4798      	blx	r3
}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	2000006c 	.word	0x2000006c

08000fbc <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
	/* USART2 global interrupt */
	Global_UART_Config->P_IRQ_callback ();
 8000fc0:	4b02      	ldr	r3, [pc, #8]	; (8000fcc <USART2_IRQHandler+0x10>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	691b      	ldr	r3, [r3, #16]
 8000fc6:	4798      	blx	r3
}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	2000006c 	.word	0x2000006c

08000fd0 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
	/* USART3 global interrupt */
	Global_UART_Config->P_IRQ_callback ();
 8000fd4:	4b02      	ldr	r3, [pc, #8]	; (8000fe0 <USART3_IRQHandler+0x10>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	691b      	ldr	r3, [r3, #16]
 8000fda:	4798      	blx	r3
}
 8000fdc:	bf00      	nop
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	2000006c 	.word	0x2000006c

08000fe4 <__libc_init_array>:
 8000fe4:	b570      	push	{r4, r5, r6, lr}
 8000fe6:	2500      	movs	r5, #0
 8000fe8:	4e0c      	ldr	r6, [pc, #48]	; (800101c <__libc_init_array+0x38>)
 8000fea:	4c0d      	ldr	r4, [pc, #52]	; (8001020 <__libc_init_array+0x3c>)
 8000fec:	1ba4      	subs	r4, r4, r6
 8000fee:	10a4      	asrs	r4, r4, #2
 8000ff0:	42a5      	cmp	r5, r4
 8000ff2:	d109      	bne.n	8001008 <__libc_init_array+0x24>
 8000ff4:	f000 f81a 	bl	800102c <_init>
 8000ff8:	2500      	movs	r5, #0
 8000ffa:	4e0a      	ldr	r6, [pc, #40]	; (8001024 <__libc_init_array+0x40>)
 8000ffc:	4c0a      	ldr	r4, [pc, #40]	; (8001028 <__libc_init_array+0x44>)
 8000ffe:	1ba4      	subs	r4, r4, r6
 8001000:	10a4      	asrs	r4, r4, #2
 8001002:	42a5      	cmp	r5, r4
 8001004:	d105      	bne.n	8001012 <__libc_init_array+0x2e>
 8001006:	bd70      	pop	{r4, r5, r6, pc}
 8001008:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800100c:	4798      	blx	r3
 800100e:	3501      	adds	r5, #1
 8001010:	e7ee      	b.n	8000ff0 <__libc_init_array+0xc>
 8001012:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001016:	4798      	blx	r3
 8001018:	3501      	adds	r5, #1
 800101a:	e7f2      	b.n	8001002 <__libc_init_array+0x1e>
 800101c:	08001060 	.word	0x08001060
 8001020:	08001060 	.word	0x08001060
 8001024:	08001060 	.word	0x08001060
 8001028:	08001064 	.word	0x08001064

0800102c <_init>:
 800102c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800102e:	bf00      	nop
 8001030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001032:	bc08      	pop	{r3}
 8001034:	469e      	mov	lr, r3
 8001036:	4770      	bx	lr

08001038 <_fini>:
 8001038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800103a:	bf00      	nop
 800103c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800103e:	bc08      	pop	{r3}
 8001040:	469e      	mov	lr, r3
 8001042:	4770      	bx	lr
