
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000dec  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08000f1c  08000f1c  00010f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f38  08000f38  00010f40  2**0
                  CONTENTS
  4 .ARM          00000000  08000f38  08000f38  00010f40  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f38  08000f40  00010f40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f38  08000f38  00010f38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f3c  08000f3c  00010f3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010f40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  20000000  08000f40  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000068  08000f40  00020068  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010f40  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005177  00000000  00000000  00010f69  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000c59  00000000  00000000  000160e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000d10  00000000  00000000  00016d39  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000228  00000000  00000000  00017a50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001c0  00000000  00000000  00017c78  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000d65  00000000  00000000  00017e38  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00002782  00000000  00000000  00018b9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000a498  00000000  00000000  0001b31f  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000257b7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000006d4  00000000  00000000  00025834  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000f04 	.word	0x08000f04

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000f04 	.word	0x08000f04

08000170 <clock_init>:


unsigned char IRQ_FLAG = 0;

void clock_init()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN();
 8000174:	4b0a      	ldr	r3, [pc, #40]	; (80001a0 <clock_init+0x30>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a09      	ldr	r2, [pc, #36]	; (80001a0 <clock_init+0x30>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8000180:	4b07      	ldr	r3, [pc, #28]	; (80001a0 <clock_init+0x30>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a06      	ldr	r2, [pc, #24]	; (80001a0 <clock_init+0x30>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <clock_init+0x30>)
 800018e:	699b      	ldr	r3, [r3, #24]
 8000190:	4a03      	ldr	r2, [pc, #12]	; (80001a0 <clock_init+0x30>)
 8000192:	f043 0301 	orr.w	r3, r3, #1
 8000196:	6193      	str	r3, [r2, #24]
}
 8000198:	bf00      	nop
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr
 80001a0:	40021000 	.word	0x40021000

080001a4 <Omar_UART_IRQ_Callback>:

unsigned char ch;

void Omar_UART_IRQ_Callback()
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	af00      	add	r7, sp, #0
#ifdef MASTER_Code

	MCAL_UART_Receive_Data(USART1, &ch, Polling_DIS);
 80001a8:	2200      	movs	r2, #0
 80001aa:	490d      	ldr	r1, [pc, #52]	; (80001e0 <Omar_UART_IRQ_Callback+0x3c>)
 80001ac:	480d      	ldr	r0, [pc, #52]	; (80001e4 <Omar_UART_IRQ_Callback+0x40>)
 80001ae:	f000 fe39 	bl	8000e24 <MCAL_UART_Receive_Data>
	MCAL_UART_Send_Data(USART1, &ch, Polling_EN);
 80001b2:	2201      	movs	r2, #1
 80001b4:	490a      	ldr	r1, [pc, #40]	; (80001e0 <Omar_UART_IRQ_Callback+0x3c>)
 80001b6:	480b      	ldr	r0, [pc, #44]	; (80001e4 <Omar_UART_IRQ_Callback+0x40>)
 80001b8:	f000 fe18 	bl	8000dec <MCAL_UART_Send_Data>

	//Send to SPI

	//reset SS
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN4, 0);
 80001bc:	2200      	movs	r2, #0
 80001be:	2110      	movs	r1, #16
 80001c0:	4809      	ldr	r0, [pc, #36]	; (80001e8 <Omar_UART_IRQ_Callback+0x44>)
 80001c2:	f000 fa7d 	bl	80006c0 <MCAL_GPIO_WritePin>

	//send and receive
	MCAL_SPI_SendReceive_Data(SPI1, &ch, Polling_ENABLE);
 80001c6:	2201      	movs	r2, #1
 80001c8:	4905      	ldr	r1, [pc, #20]	; (80001e0 <Omar_UART_IRQ_Callback+0x3c>)
 80001ca:	4808      	ldr	r0, [pc, #32]	; (80001ec <Omar_UART_IRQ_Callback+0x48>)
 80001cc:	f000 fb6a 	bl	80008a4 <MCAL_SPI_SendReceive_Data>

	//set SS
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN4, 1);
 80001d0:	2201      	movs	r2, #1
 80001d2:	2110      	movs	r1, #16
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <Omar_UART_IRQ_Callback+0x44>)
 80001d6:	f000 fa73 	bl	80006c0 <MCAL_GPIO_WritePin>

#endif
}
 80001da:	bf00      	nop
 80001dc:	bd80      	pop	{r7, pc}
 80001de:	bf00      	nop
 80001e0:	20000028 	.word	0x20000028
 80001e4:	40013800 	.word	0x40013800
 80001e8:	40010800 	.word	0x40010800
 80001ec:	40013000 	.word	0x40013000

080001f0 <main>:


int main(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b08c      	sub	sp, #48	; 0x30
 80001f4:	af00      	add	r7, sp, #0
	clock_init();
 80001f6:	f7ff ffbb 	bl	8000170 <clock_init>

	//========UART init========
	UART_Config_t UART_Cfg;
	GPIO_PinConfig_t PinCfg;

	UART_Cfg.UART_BaudRate = UART_BaudRate_115200;
 80001fa:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80001fe:	623b      	str	r3, [r7, #32]
	UART_Cfg.UART_FlowCtrl = UART_FlowCtrl_none;
 8000200:	2300      	movs	r3, #0
 8000202:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	UART_Cfg.UART_IRQ_Enable = UART_IRQ_Enable_RXNEIE;
 8000206:	2320      	movs	r3, #32
 8000208:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	UART_Cfg.P_IRQ_callback = Omar_UART_IRQ_Callback;
 800020c:	4b22      	ldr	r3, [pc, #136]	; (8000298 <main+0xa8>)
 800020e:	62fb      	str	r3, [r7, #44]	; 0x2c
	UART_Cfg.UART_Parity = UART_Parity_none;
 8000210:	2300      	movs	r3, #0
 8000212:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	UART_Cfg.UART_Payload_Length = UART_Payload_Length_8bit;
 8000216:	2300      	movs	r3, #0
 8000218:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	UART_Cfg.UART_StopBits = UART_StopBits_1;
 800021c:	2300      	movs	r3, #0
 800021e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	UART_Cfg.UART_Mode = UART_MODE_Rx_Tx;
 8000222:	230c      	movs	r3, #12
 8000224:	773b      	strb	r3, [r7, #28]
	MCAL_UART_init(USART1 , &UART_Cfg);
 8000226:	f107 031c 	add.w	r3, r7, #28
 800022a:	4619      	mov	r1, r3
 800022c:	481b      	ldr	r0, [pc, #108]	; (800029c <main+0xac>)
 800022e:	f000 fcb7 	bl	8000ba0 <MCAL_UART_init>

	MCAL_UART_GPIO_SetPins(USART1);
 8000232:	481a      	ldr	r0, [pc, #104]	; (800029c <main+0xac>)
 8000234:	f000 fd74 	bl	8000d20 <MCAL_UART_GPIO_SetPins>

	//========SPI init========
	SPI_Config_t SPI1_cfg;

	//common configuration
	SPI1_cfg.CLK_Phase = SPI_Clock_second_edge_capture;
 8000238:	2301      	movs	r3, #1
 800023a:	817b      	strh	r3, [r7, #10]
	SPI1_cfg.CLK_Polarity = SPI_Clock_Polarity_high_idle;
 800023c:	2302      	movs	r3, #2
 800023e:	813b      	strh	r3, [r7, #8]
	SPI1_cfg.Communication_Mode = SPI_Communication_2_lines_full_duplex;
 8000240:	2300      	movs	r3, #0
 8000242:	807b      	strh	r3, [r7, #2]
	SPI1_cfg.Data_size = SPI_Size_8bit;
 8000244:	2300      	movs	r3, #0
 8000246:	80fb      	strh	r3, [r7, #6]
	SPI1_cfg.Frame_format = SPI_MSB_First;
 8000248:	2300      	movs	r3, #0
 800024a:	80bb      	strh	r3, [r7, #4]
	SPI1_cfg.SPI_PreScaler = SPI_Prescaler_8;
 800024c:	2310      	movs	r3, #16
 800024e:	81fb      	strh	r3, [r7, #14]

#ifdef MASTER_Code
	SPI1_cfg.Device_Mode = SPI_DEVICE_Mode_Master;
 8000250:	2304      	movs	r3, #4
 8000252:	803b      	strh	r3, [r7, #0]
	SPI1_cfg.SPI_IRQ_Enable = SPI_IRQ_Enable_none;
 8000254:	2300      	movs	r3, #0
 8000256:	823b      	strh	r3, [r7, #16]
	SPI1_cfg.NSS = SPI_NSS_SW_set;
 8000258:	f44f 7340 	mov.w	r3, #768	; 0x300
 800025c:	81bb      	strh	r3, [r7, #12]
	SPI1_cfg.P_IRQ_callback = NULL;
 800025e:	2300      	movs	r3, #0
 8000260:	617b      	str	r3, [r7, #20]
#endif

	MCAL_SPI_init(SPI1, &SPI1_cfg);
 8000262:	463b      	mov	r3, r7
 8000264:	4619      	mov	r1, r3
 8000266:	480e      	ldr	r0, [pc, #56]	; (80002a0 <main+0xb0>)
 8000268:	f000 fa98 	bl	800079c <MCAL_SPI_init>
	MCAL_SPI_GPIO_SetPins(SPI1);
 800026c:	480c      	ldr	r0, [pc, #48]	; (80002a0 <main+0xb0>)
 800026e:	f000 fb45 	bl	80008fc <MCAL_SPI_GPIO_SetPins>

	//Configures SS PORTA PIN4
	PinCfg.GPIO_pinNumber = GPIO_PIN4;
 8000272:	2310      	movs	r3, #16
 8000274:	833b      	strh	r3, [r7, #24]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000276:	2304      	movs	r3, #4
 8000278:	76bb      	strb	r3, [r7, #26]
	PinCfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
 800027a:	2302      	movs	r3, #2
 800027c:	76fb      	strb	r3, [r7, #27]
	MCAL_GPIO_Init(GPIOA , &PinCfg);
 800027e:	f107 0318 	add.w	r3, r7, #24
 8000282:	4619      	mov	r1, r3
 8000284:	4807      	ldr	r0, [pc, #28]	; (80002a4 <main+0xb4>)
 8000286:	f000 f99c 	bl	80005c2 <MCAL_GPIO_Init>

	//Write 1
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN4, 1);
 800028a:	2201      	movs	r2, #1
 800028c:	2110      	movs	r1, #16
 800028e:	4805      	ldr	r0, [pc, #20]	; (80002a4 <main+0xb4>)
 8000290:	f000 fa16 	bl	80006c0 <MCAL_GPIO_WritePin>

	while(1)
 8000294:	e7fe      	b.n	8000294 <main+0xa4>
 8000296:	bf00      	nop
 8000298:	080001a5 	.word	0x080001a5
 800029c:	40013800 	.word	0x40013800
 80002a0:	40013000 	.word	0x40013000
 80002a4:	40010800 	.word	0x40010800

080002a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002a8:	480d      	ldr	r0, [pc, #52]	; (80002e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002aa:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002ac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002b0:	480c      	ldr	r0, [pc, #48]	; (80002e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80002b2:	490d      	ldr	r1, [pc, #52]	; (80002e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002b4:	4a0d      	ldr	r2, [pc, #52]	; (80002ec <LoopForever+0xe>)
  movs r3, #0
 80002b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002b8:	e002      	b.n	80002c0 <LoopCopyDataInit>

080002ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002be:	3304      	adds	r3, #4

080002c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002c4:	d3f9      	bcc.n	80002ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002c6:	4a0a      	ldr	r2, [pc, #40]	; (80002f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002c8:	4c0a      	ldr	r4, [pc, #40]	; (80002f4 <LoopForever+0x16>)
  movs r3, #0
 80002ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002cc:	e001      	b.n	80002d2 <LoopFillZerobss>

080002ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002d0:	3204      	adds	r2, #4

080002d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002d4:	d3fb      	bcc.n	80002ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002d6:	f000 fdf1 	bl	8000ebc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002da:	f7ff ff89 	bl	80001f0 <main>

080002de <LoopForever>:

LoopForever:
    b LoopForever
 80002de:	e7fe      	b.n	80002de <LoopForever>
  ldr   r0, =_estack
 80002e0:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80002e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002e8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002ec:	08000f40 	.word	0x08000f40
  ldr r2, =_sbss
 80002f0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002f4:	20000068 	.word	0x20000068

080002f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002f8:	e7fe      	b.n	80002f8 <ADC1_2_IRQHandler>
	...

080002fc <EXTI0_IRQHandler>:

//======================================
//          ISR Functions
//======================================
void EXTI0_IRQHandler(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0


	//Clear pending register
	EXTI->PR |= (1<<0);
 8000300:	4b05      	ldr	r3, [pc, #20]	; (8000318 <EXTI0_IRQHandler+0x1c>)
 8000302:	695b      	ldr	r3, [r3, #20]
 8000304:	4a04      	ldr	r2, [pc, #16]	; (8000318 <EXTI0_IRQHandler+0x1c>)
 8000306:	f043 0301 	orr.w	r3, r3, #1
 800030a:	6153      	str	r3, [r2, #20]

	//call IRQ function
	GP_IRQ_Call_Back[0]();
 800030c:	4b03      	ldr	r3, [pc, #12]	; (800031c <EXTI0_IRQHandler+0x20>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	4798      	blx	r3
}
 8000312:	bf00      	nop
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	40010400 	.word	0x40010400
 800031c:	2000002c 	.word	0x2000002c

08000320 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
	//GP_IRQ_Call_Back[EXTI_Pin.EXI_InputLineNumber];

	//Clear pending register
	EXTI->PR |= (1<<1);
 8000324:	4b05      	ldr	r3, [pc, #20]	; (800033c <EXTI1_IRQHandler+0x1c>)
 8000326:	695b      	ldr	r3, [r3, #20]
 8000328:	4a04      	ldr	r2, [pc, #16]	; (800033c <EXTI1_IRQHandler+0x1c>)
 800032a:	f043 0302 	orr.w	r3, r3, #2
 800032e:	6153      	str	r3, [r2, #20]

	//call IRQ function
	GP_IRQ_Call_Back[1]();
 8000330:	4b03      	ldr	r3, [pc, #12]	; (8000340 <EXTI1_IRQHandler+0x20>)
 8000332:	685b      	ldr	r3, [r3, #4]
 8000334:	4798      	blx	r3

}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	40010400 	.word	0x40010400
 8000340:	2000002c 	.word	0x2000002c

08000344 <EXTI2_IRQHandler>:


void EXTI2_IRQHandler(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
	//GP_IRQ_Call_Back[EXTI_Pin.EXI_InputLineNumber];

	//Clear pending register
		EXTI->PR |= (1<<2);
 8000348:	4b05      	ldr	r3, [pc, #20]	; (8000360 <EXTI2_IRQHandler+0x1c>)
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	4a04      	ldr	r2, [pc, #16]	; (8000360 <EXTI2_IRQHandler+0x1c>)
 800034e:	f043 0304 	orr.w	r3, r3, #4
 8000352:	6153      	str	r3, [r2, #20]

	//call IRQ function
	GP_IRQ_Call_Back[2]();
 8000354:	4b03      	ldr	r3, [pc, #12]	; (8000364 <EXTI2_IRQHandler+0x20>)
 8000356:	689b      	ldr	r3, [r3, #8]
 8000358:	4798      	blx	r3

}
 800035a:	bf00      	nop
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	40010400 	.word	0x40010400
 8000364:	2000002c 	.word	0x2000002c

08000368 <EXTI3_IRQHandler>:


void EXTI3_IRQHandler(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
	//GP_IRQ_Call_Back[EXTI_Pin.EXI_InputLineNumber];

	//Clear pending register
		EXTI->PR |= (1<<3);
 800036c:	4b05      	ldr	r3, [pc, #20]	; (8000384 <EXTI3_IRQHandler+0x1c>)
 800036e:	695b      	ldr	r3, [r3, #20]
 8000370:	4a04      	ldr	r2, [pc, #16]	; (8000384 <EXTI3_IRQHandler+0x1c>)
 8000372:	f043 0308 	orr.w	r3, r3, #8
 8000376:	6153      	str	r3, [r2, #20]

	//call IRQ function
	GP_IRQ_Call_Back[3]();
 8000378:	4b03      	ldr	r3, [pc, #12]	; (8000388 <EXTI3_IRQHandler+0x20>)
 800037a:	68db      	ldr	r3, [r3, #12]
 800037c:	4798      	blx	r3
}
 800037e:	bf00      	nop
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	40010400 	.word	0x40010400
 8000388:	2000002c 	.word	0x2000002c

0800038c <EXTI4_IRQHandler>:


void EXTI4_IRQHandler(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
	//GP_IRQ_Call_Back[EXTI_Pin.EXI_InputLineNumber];

	//Clear pending register
	EXTI->PR |= (1<<4);
 8000390:	4b05      	ldr	r3, [pc, #20]	; (80003a8 <EXTI4_IRQHandler+0x1c>)
 8000392:	695b      	ldr	r3, [r3, #20]
 8000394:	4a04      	ldr	r2, [pc, #16]	; (80003a8 <EXTI4_IRQHandler+0x1c>)
 8000396:	f043 0310 	orr.w	r3, r3, #16
 800039a:	6153      	str	r3, [r2, #20]

	//call IRQ function
	GP_IRQ_Call_Back[4]();
 800039c:	4b03      	ldr	r3, [pc, #12]	; (80003ac <EXTI4_IRQHandler+0x20>)
 800039e:	691b      	ldr	r3, [r3, #16]
 80003a0:	4798      	blx	r3
}
 80003a2:	bf00      	nop
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	40010400 	.word	0x40010400
 80003ac:	2000002c 	.word	0x2000002c

080003b0 <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
	//GP_IRQ_Call_Back[EXTI_Pin.EXI_InputLineNumber];

	//Clear pending register and call IRQ function
	if( EXTI->PR & (1<<5) ) { EXTI->PR |= (1<<5); GP_IRQ_Call_Back[5](); }
 80003b4:	4b26      	ldr	r3, [pc, #152]	; (8000450 <EXTI9_5_IRQHandler+0xa0>)
 80003b6:	695b      	ldr	r3, [r3, #20]
 80003b8:	f003 0320 	and.w	r3, r3, #32
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d008      	beq.n	80003d2 <EXTI9_5_IRQHandler+0x22>
 80003c0:	4b23      	ldr	r3, [pc, #140]	; (8000450 <EXTI9_5_IRQHandler+0xa0>)
 80003c2:	695b      	ldr	r3, [r3, #20]
 80003c4:	4a22      	ldr	r2, [pc, #136]	; (8000450 <EXTI9_5_IRQHandler+0xa0>)
 80003c6:	f043 0320 	orr.w	r3, r3, #32
 80003ca:	6153      	str	r3, [r2, #20]
 80003cc:	4b21      	ldr	r3, [pc, #132]	; (8000454 <EXTI9_5_IRQHandler+0xa4>)
 80003ce:	695b      	ldr	r3, [r3, #20]
 80003d0:	4798      	blx	r3
	if( EXTI->PR & (1<<6) ) { EXTI->PR |= (1<<6); GP_IRQ_Call_Back[6](); }
 80003d2:	4b1f      	ldr	r3, [pc, #124]	; (8000450 <EXTI9_5_IRQHandler+0xa0>)
 80003d4:	695b      	ldr	r3, [r3, #20]
 80003d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d008      	beq.n	80003f0 <EXTI9_5_IRQHandler+0x40>
 80003de:	4b1c      	ldr	r3, [pc, #112]	; (8000450 <EXTI9_5_IRQHandler+0xa0>)
 80003e0:	695b      	ldr	r3, [r3, #20]
 80003e2:	4a1b      	ldr	r2, [pc, #108]	; (8000450 <EXTI9_5_IRQHandler+0xa0>)
 80003e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003e8:	6153      	str	r3, [r2, #20]
 80003ea:	4b1a      	ldr	r3, [pc, #104]	; (8000454 <EXTI9_5_IRQHandler+0xa4>)
 80003ec:	699b      	ldr	r3, [r3, #24]
 80003ee:	4798      	blx	r3
	if( EXTI->PR & (1<<7) ) { EXTI->PR |= (1<<7); GP_IRQ_Call_Back[7](); }
 80003f0:	4b17      	ldr	r3, [pc, #92]	; (8000450 <EXTI9_5_IRQHandler+0xa0>)
 80003f2:	695b      	ldr	r3, [r3, #20]
 80003f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d008      	beq.n	800040e <EXTI9_5_IRQHandler+0x5e>
 80003fc:	4b14      	ldr	r3, [pc, #80]	; (8000450 <EXTI9_5_IRQHandler+0xa0>)
 80003fe:	695b      	ldr	r3, [r3, #20]
 8000400:	4a13      	ldr	r2, [pc, #76]	; (8000450 <EXTI9_5_IRQHandler+0xa0>)
 8000402:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000406:	6153      	str	r3, [r2, #20]
 8000408:	4b12      	ldr	r3, [pc, #72]	; (8000454 <EXTI9_5_IRQHandler+0xa4>)
 800040a:	69db      	ldr	r3, [r3, #28]
 800040c:	4798      	blx	r3
	if( EXTI->PR & (1<<8) ) { EXTI->PR |= (1<<8); GP_IRQ_Call_Back[8](); }
 800040e:	4b10      	ldr	r3, [pc, #64]	; (8000450 <EXTI9_5_IRQHandler+0xa0>)
 8000410:	695b      	ldr	r3, [r3, #20]
 8000412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000416:	2b00      	cmp	r3, #0
 8000418:	d008      	beq.n	800042c <EXTI9_5_IRQHandler+0x7c>
 800041a:	4b0d      	ldr	r3, [pc, #52]	; (8000450 <EXTI9_5_IRQHandler+0xa0>)
 800041c:	695b      	ldr	r3, [r3, #20]
 800041e:	4a0c      	ldr	r2, [pc, #48]	; (8000450 <EXTI9_5_IRQHandler+0xa0>)
 8000420:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000424:	6153      	str	r3, [r2, #20]
 8000426:	4b0b      	ldr	r3, [pc, #44]	; (8000454 <EXTI9_5_IRQHandler+0xa4>)
 8000428:	6a1b      	ldr	r3, [r3, #32]
 800042a:	4798      	blx	r3
	if( EXTI->PR & (1<<9) ) { EXTI->PR |= (1<<9); GP_IRQ_Call_Back[9](); }
 800042c:	4b08      	ldr	r3, [pc, #32]	; (8000450 <EXTI9_5_IRQHandler+0xa0>)
 800042e:	695b      	ldr	r3, [r3, #20]
 8000430:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000434:	2b00      	cmp	r3, #0
 8000436:	d008      	beq.n	800044a <EXTI9_5_IRQHandler+0x9a>
 8000438:	4b05      	ldr	r3, [pc, #20]	; (8000450 <EXTI9_5_IRQHandler+0xa0>)
 800043a:	695b      	ldr	r3, [r3, #20]
 800043c:	4a04      	ldr	r2, [pc, #16]	; (8000450 <EXTI9_5_IRQHandler+0xa0>)
 800043e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000442:	6153      	str	r3, [r2, #20]
 8000444:	4b03      	ldr	r3, [pc, #12]	; (8000454 <EXTI9_5_IRQHandler+0xa4>)
 8000446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000448:	4798      	blx	r3
}
 800044a:	bf00      	nop
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	40010400 	.word	0x40010400
 8000454:	2000002c 	.word	0x2000002c

08000458 <EXTI15_10_IRQHandler>:


void EXTI15_10_IRQHandler(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
	//Clear pending register and call IRQ function
		if( EXTI->PR & (1<<10) ) { EXTI->PR |= (1<<10); GP_IRQ_Call_Back[10](); }
 800045c:	4b2d      	ldr	r3, [pc, #180]	; (8000514 <EXTI15_10_IRQHandler+0xbc>)
 800045e:	695b      	ldr	r3, [r3, #20]
 8000460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000464:	2b00      	cmp	r3, #0
 8000466:	d008      	beq.n	800047a <EXTI15_10_IRQHandler+0x22>
 8000468:	4b2a      	ldr	r3, [pc, #168]	; (8000514 <EXTI15_10_IRQHandler+0xbc>)
 800046a:	695b      	ldr	r3, [r3, #20]
 800046c:	4a29      	ldr	r2, [pc, #164]	; (8000514 <EXTI15_10_IRQHandler+0xbc>)
 800046e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000472:	6153      	str	r3, [r2, #20]
 8000474:	4b28      	ldr	r3, [pc, #160]	; (8000518 <EXTI15_10_IRQHandler+0xc0>)
 8000476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000478:	4798      	blx	r3
		if( EXTI->PR & (1<<11) ) { EXTI->PR |= (1<<11); GP_IRQ_Call_Back[11](); }
 800047a:	4b26      	ldr	r3, [pc, #152]	; (8000514 <EXTI15_10_IRQHandler+0xbc>)
 800047c:	695b      	ldr	r3, [r3, #20]
 800047e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000482:	2b00      	cmp	r3, #0
 8000484:	d008      	beq.n	8000498 <EXTI15_10_IRQHandler+0x40>
 8000486:	4b23      	ldr	r3, [pc, #140]	; (8000514 <EXTI15_10_IRQHandler+0xbc>)
 8000488:	695b      	ldr	r3, [r3, #20]
 800048a:	4a22      	ldr	r2, [pc, #136]	; (8000514 <EXTI15_10_IRQHandler+0xbc>)
 800048c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000490:	6153      	str	r3, [r2, #20]
 8000492:	4b21      	ldr	r3, [pc, #132]	; (8000518 <EXTI15_10_IRQHandler+0xc0>)
 8000494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000496:	4798      	blx	r3
		if( EXTI->PR & (1<<12) ) { EXTI->PR |= (1<<12); GP_IRQ_Call_Back[12](); }
 8000498:	4b1e      	ldr	r3, [pc, #120]	; (8000514 <EXTI15_10_IRQHandler+0xbc>)
 800049a:	695b      	ldr	r3, [r3, #20]
 800049c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d008      	beq.n	80004b6 <EXTI15_10_IRQHandler+0x5e>
 80004a4:	4b1b      	ldr	r3, [pc, #108]	; (8000514 <EXTI15_10_IRQHandler+0xbc>)
 80004a6:	695b      	ldr	r3, [r3, #20]
 80004a8:	4a1a      	ldr	r2, [pc, #104]	; (8000514 <EXTI15_10_IRQHandler+0xbc>)
 80004aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80004ae:	6153      	str	r3, [r2, #20]
 80004b0:	4b19      	ldr	r3, [pc, #100]	; (8000518 <EXTI15_10_IRQHandler+0xc0>)
 80004b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004b4:	4798      	blx	r3
		if( EXTI->PR & (1<<13) ) { EXTI->PR |= (1<<13); GP_IRQ_Call_Back[13](); }
 80004b6:	4b17      	ldr	r3, [pc, #92]	; (8000514 <EXTI15_10_IRQHandler+0xbc>)
 80004b8:	695b      	ldr	r3, [r3, #20]
 80004ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d008      	beq.n	80004d4 <EXTI15_10_IRQHandler+0x7c>
 80004c2:	4b14      	ldr	r3, [pc, #80]	; (8000514 <EXTI15_10_IRQHandler+0xbc>)
 80004c4:	695b      	ldr	r3, [r3, #20]
 80004c6:	4a13      	ldr	r2, [pc, #76]	; (8000514 <EXTI15_10_IRQHandler+0xbc>)
 80004c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004cc:	6153      	str	r3, [r2, #20]
 80004ce:	4b12      	ldr	r3, [pc, #72]	; (8000518 <EXTI15_10_IRQHandler+0xc0>)
 80004d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004d2:	4798      	blx	r3
		if( EXTI->PR & (1<<14) ) { EXTI->PR |= (1<<14); GP_IRQ_Call_Back[14](); }
 80004d4:	4b0f      	ldr	r3, [pc, #60]	; (8000514 <EXTI15_10_IRQHandler+0xbc>)
 80004d6:	695b      	ldr	r3, [r3, #20]
 80004d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d008      	beq.n	80004f2 <EXTI15_10_IRQHandler+0x9a>
 80004e0:	4b0c      	ldr	r3, [pc, #48]	; (8000514 <EXTI15_10_IRQHandler+0xbc>)
 80004e2:	695b      	ldr	r3, [r3, #20]
 80004e4:	4a0b      	ldr	r2, [pc, #44]	; (8000514 <EXTI15_10_IRQHandler+0xbc>)
 80004e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004ea:	6153      	str	r3, [r2, #20]
 80004ec:	4b0a      	ldr	r3, [pc, #40]	; (8000518 <EXTI15_10_IRQHandler+0xc0>)
 80004ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004f0:	4798      	blx	r3
		if( EXTI->PR & (1<<15) ) { EXTI->PR |= (1<<15); GP_IRQ_Call_Back[15](); }
 80004f2:	4b08      	ldr	r3, [pc, #32]	; (8000514 <EXTI15_10_IRQHandler+0xbc>)
 80004f4:	695b      	ldr	r3, [r3, #20]
 80004f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d008      	beq.n	8000510 <EXTI15_10_IRQHandler+0xb8>
 80004fe:	4b05      	ldr	r3, [pc, #20]	; (8000514 <EXTI15_10_IRQHandler+0xbc>)
 8000500:	695b      	ldr	r3, [r3, #20]
 8000502:	4a04      	ldr	r2, [pc, #16]	; (8000514 <EXTI15_10_IRQHandler+0xbc>)
 8000504:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000508:	6153      	str	r3, [r2, #20]
 800050a:	4b03      	ldr	r3, [pc, #12]	; (8000518 <EXTI15_10_IRQHandler+0xc0>)
 800050c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800050e:	4798      	blx	r3
}
 8000510:	bf00      	nop
 8000512:	bd80      	pop	{r7, pc}
 8000514:	40010400 	.word	0x40010400
 8000518:	2000002c 	.word	0x2000002c

0800051c <GET_CRLH_position>:

#include "Stm32f103c6_GPIO_Driver.h"


uint8_t GET_CRLH_position(uint16_t PinNumber)
{
 800051c:	b480      	push	{r7}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
 8000522:	4603      	mov	r3, r0
 8000524:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 8000526:	88fb      	ldrh	r3, [r7, #6]
 8000528:	2b80      	cmp	r3, #128	; 0x80
 800052a:	d042      	beq.n	80005b2 <GET_CRLH_position+0x96>
 800052c:	2b80      	cmp	r3, #128	; 0x80
 800052e:	dc11      	bgt.n	8000554 <GET_CRLH_position+0x38>
 8000530:	2b08      	cmp	r3, #8
 8000532:	d036      	beq.n	80005a2 <GET_CRLH_position+0x86>
 8000534:	2b08      	cmp	r3, #8
 8000536:	dc06      	bgt.n	8000546 <GET_CRLH_position+0x2a>
 8000538:	2b02      	cmp	r3, #2
 800053a:	d02e      	beq.n	800059a <GET_CRLH_position+0x7e>
 800053c:	2b04      	cmp	r3, #4
 800053e:	d02e      	beq.n	800059e <GET_CRLH_position+0x82>
 8000540:	2b01      	cmp	r3, #1
 8000542:	d028      	beq.n	8000596 <GET_CRLH_position+0x7a>
 8000544:	e037      	b.n	80005b6 <GET_CRLH_position+0x9a>
 8000546:	2b20      	cmp	r3, #32
 8000548:	d02f      	beq.n	80005aa <GET_CRLH_position+0x8e>
 800054a:	2b40      	cmp	r3, #64	; 0x40
 800054c:	d02f      	beq.n	80005ae <GET_CRLH_position+0x92>
 800054e:	2b10      	cmp	r3, #16
 8000550:	d029      	beq.n	80005a6 <GET_CRLH_position+0x8a>
 8000552:	e030      	b.n	80005b6 <GET_CRLH_position+0x9a>
 8000554:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000558:	d023      	beq.n	80005a2 <GET_CRLH_position+0x86>
 800055a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800055e:	dc09      	bgt.n	8000574 <GET_CRLH_position+0x58>
 8000560:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000564:	d019      	beq.n	800059a <GET_CRLH_position+0x7e>
 8000566:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800056a:	d018      	beq.n	800059e <GET_CRLH_position+0x82>
 800056c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000570:	d011      	beq.n	8000596 <GET_CRLH_position+0x7a>
 8000572:	e020      	b.n	80005b6 <GET_CRLH_position+0x9a>
 8000574:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000578:	d017      	beq.n	80005aa <GET_CRLH_position+0x8e>
 800057a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800057e:	dc03      	bgt.n	8000588 <GET_CRLH_position+0x6c>
 8000580:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000584:	d00f      	beq.n	80005a6 <GET_CRLH_position+0x8a>
 8000586:	e016      	b.n	80005b6 <GET_CRLH_position+0x9a>
 8000588:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800058c:	d00f      	beq.n	80005ae <GET_CRLH_position+0x92>
 800058e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000592:	d00e      	beq.n	80005b2 <GET_CRLH_position+0x96>
 8000594:	e00f      	b.n	80005b6 <GET_CRLH_position+0x9a>
	{

	case GPIO_PIN8:
	case GPIO_PIN0:
		return 0;
 8000596:	2300      	movs	r3, #0
 8000598:	e00e      	b.n	80005b8 <GET_CRLH_position+0x9c>
		break;

	case GPIO_PIN9:
	case GPIO_PIN1:
		return 4;
 800059a:	2304      	movs	r3, #4
 800059c:	e00c      	b.n	80005b8 <GET_CRLH_position+0x9c>
		break;

	case GPIO_PIN10:
	case GPIO_PIN2:
		return 8;
 800059e:	2308      	movs	r3, #8
 80005a0:	e00a      	b.n	80005b8 <GET_CRLH_position+0x9c>
		break;

	case GPIO_PIN11:
	case GPIO_PIN3:
		return 12;
 80005a2:	230c      	movs	r3, #12
 80005a4:	e008      	b.n	80005b8 <GET_CRLH_position+0x9c>
		break;

	case GPIO_PIN12:
	case GPIO_PIN4:
		return 16;
 80005a6:	2310      	movs	r3, #16
 80005a8:	e006      	b.n	80005b8 <GET_CRLH_position+0x9c>
		break;

	case GPIO_PIN13:
	case GPIO_PIN5:
		return 20;
 80005aa:	2314      	movs	r3, #20
 80005ac:	e004      	b.n	80005b8 <GET_CRLH_position+0x9c>
		break;

	case GPIO_PIN14:
	case GPIO_PIN6:
		return 24;
 80005ae:	2318      	movs	r3, #24
 80005b0:	e002      	b.n	80005b8 <GET_CRLH_position+0x9c>
		break;

	case GPIO_PIN15:
	case GPIO_PIN7:
		return 28;
 80005b2:	231c      	movs	r3, #28
 80005b4:	e000      	b.n	80005b8 <GET_CRLH_position+0x9c>
		break;

	}
	return -1;
 80005b6:	23ff      	movs	r3, #255	; 0xff
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	370c      	adds	r7, #12
 80005bc:	46bd      	mov	sp, r7
 80005be:	bc80      	pop	{r7}
 80005c0:	4770      	bx	lr

080005c2 <MCAL_GPIO_Init>:
* @retval 		 - none
* Note			 - stm32f103c6 has a GPIO A,B,C,D,E Modules but LQFP48 package
*                  has only GPIO A,B and part of C,D and not has E.
*/
void MCAL_GPIO_Init(GPIO_TypeDef* GPIOx , GPIO_PinConfig_t* PIN_config)
{
 80005c2:	b590      	push	{r4, r7, lr}
 80005c4:	b085      	sub	sp, #20
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	6078      	str	r0, [r7, #4]
 80005ca:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) Configure pins 0 >>> 7
	//Port configuration register low (GPIOx_CRH) Configure pins 8 >>> 15

	volatile uint32_t *ConfigRegister = NULL;
 80005cc:	2300      	movs	r3, #0
 80005ce:	60bb      	str	r3, [r7, #8]
	uint8_t Pin_config = 0;
 80005d0:	2300      	movs	r3, #0
 80005d2:	73fb      	strb	r3, [r7, #15]

	ConfigRegister = (PIN_config->GPIO_pinNumber < GPIO_PIN8 )? &GPIOx->CRL : &GPIOx->CRH ;
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	881b      	ldrh	r3, [r3, #0]
 80005d8:	2bff      	cmp	r3, #255	; 0xff
 80005da:	d801      	bhi.n	80005e0 <MCAL_GPIO_Init+0x1e>
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	e001      	b.n	80005e4 <MCAL_GPIO_Init+0x22>
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	3304      	adds	r3, #4
 80005e4:	60bb      	str	r3, [r7, #8]

	//Clear  CNFy[1:0] MODEy[1:0]
	*ConfigRegister &= ~(0xF << GET_CRLH_position(PIN_config->GPIO_pinNumber) );
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	881b      	ldrh	r3, [r3, #0]
 80005ea:	4618      	mov	r0, r3
 80005ec:	f7ff ff96 	bl	800051c <GET_CRLH_position>
 80005f0:	4603      	mov	r3, r0
 80005f2:	461a      	mov	r2, r3
 80005f4:	230f      	movs	r3, #15
 80005f6:	4093      	lsls	r3, r2
 80005f8:	43da      	mvns	r2, r3
 80005fa:	68bb      	ldr	r3, [r7, #8]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	401a      	ands	r2, r3
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	601a      	str	r2, [r3, #0]

	if(PIN_config->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD || PIN_config->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP || PIN_config->GPIO_MODE == GPIO_MODE_OUTPUT_OD || PIN_config->GPIO_MODE == GPIO_MODE_OUTPUT_PP)
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	789b      	ldrb	r3, [r3, #2]
 8000608:	2b07      	cmp	r3, #7
 800060a:	d00b      	beq.n	8000624 <MCAL_GPIO_Init+0x62>
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	789b      	ldrb	r3, [r3, #2]
 8000610:	2b06      	cmp	r3, #6
 8000612:	d007      	beq.n	8000624 <MCAL_GPIO_Init+0x62>
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	789b      	ldrb	r3, [r3, #2]
 8000618:	2b05      	cmp	r3, #5
 800061a:	d003      	beq.n	8000624 <MCAL_GPIO_Init+0x62>
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	789b      	ldrb	r3, [r3, #2]
 8000620:	2b04      	cmp	r3, #4
 8000622:	d10e      	bne.n	8000642 <MCAL_GPIO_Init+0x80>
	{
		Pin_config = (((( PIN_config->GPIO_MODE - 4 ) <<2) | (PIN_config->GPIO_OUTPUT_Speed)) & 0x0F );
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	789b      	ldrb	r3, [r3, #2]
 8000628:	3b04      	subs	r3, #4
 800062a:	009b      	lsls	r3, r3, #2
 800062c:	b25a      	sxtb	r2, r3
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	78db      	ldrb	r3, [r3, #3]
 8000632:	b25b      	sxtb	r3, r3
 8000634:	4313      	orrs	r3, r2
 8000636:	b25b      	sxtb	r3, r3
 8000638:	b2db      	uxtb	r3, r3
 800063a:	f003 030f 	and.w	r3, r3, #15
 800063e:	73fb      	strb	r3, [r7, #15]
 8000640:	e02c      	b.n	800069c <MCAL_GPIO_Init+0xda>
	}
	//if pin is input
	else
	{
		if(PIN_config->GPIO_MODE == GPIO_MODE_Analog || PIN_config->GPIO_MODE == GPIO_MODE_INPUT_FLO)
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	789b      	ldrb	r3, [r3, #2]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d003      	beq.n	8000652 <MCAL_GPIO_Init+0x90>
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	789b      	ldrb	r3, [r3, #2]
 800064e:	2b01      	cmp	r3, #1
 8000650:	d107      	bne.n	8000662 <MCAL_GPIO_Init+0xa0>
		{
			Pin_config = ((( PIN_config->GPIO_MODE ) <<2) & 0x0F );
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	789b      	ldrb	r3, [r3, #2]
 8000656:	009b      	lsls	r3, r3, #2
 8000658:	b2db      	uxtb	r3, r3
 800065a:	f003 030f 	and.w	r3, r3, #15
 800065e:	73fb      	strb	r3, [r7, #15]
 8000660:	e01c      	b.n	800069c <MCAL_GPIO_Init+0xda>
		}
		else if(PIN_config->GPIO_MODE == GPIO_MODE_INPUT_AF)     //consider it as input floating
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	789b      	ldrb	r3, [r3, #2]
 8000666:	2b08      	cmp	r3, #8
 8000668:	d102      	bne.n	8000670 <MCAL_GPIO_Init+0xae>
		{
			Pin_config = ((( GPIO_MODE_INPUT_FLO ) <<2) & 0x0F );
 800066a:	2304      	movs	r3, #4
 800066c:	73fb      	strb	r3, [r7, #15]
 800066e:	e015      	b.n	800069c <MCAL_GPIO_Init+0xda>
		}
		else
		{
			Pin_config = ((( GPIO_MODE_INPUT_PU ) <<2) & 0x0F );
 8000670:	2308      	movs	r3, #8
 8000672:	73fb      	strb	r3, [r7, #15]

			if(PIN_config->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	789b      	ldrb	r3, [r3, #2]
 8000678:	2b02      	cmp	r3, #2
 800067a:	d107      	bne.n	800068c <MCAL_GPIO_Init+0xca>
			{
				//Table 20. Port bit configuration table --> PxODR register -> 1
				GPIOx->ODR |= (PIN_config->GPIO_pinNumber);
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	68db      	ldr	r3, [r3, #12]
 8000680:	683a      	ldr	r2, [r7, #0]
 8000682:	8812      	ldrh	r2, [r2, #0]
 8000684:	431a      	orrs	r2, r3
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	e007      	b.n	800069c <MCAL_GPIO_Init+0xda>
			}
			else
			{
				//Table 20. Port bit configuration table --> PxODR register -> 0
				GPIOx->ODR &= ~(PIN_config->GPIO_pinNumber);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	68db      	ldr	r3, [r3, #12]
 8000690:	683a      	ldr	r2, [r7, #0]
 8000692:	8812      	ldrh	r2, [r2, #0]
 8000694:	43d2      	mvns	r2, r2
 8000696:	401a      	ands	r2, r3
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	60da      	str	r2, [r3, #12]
			}
		}
	}
	//Write on the CRL or CRH
	*ConfigRegister |= ( (Pin_config)<< GET_CRLH_position(PIN_config->GPIO_pinNumber) );
 800069c:	7bfc      	ldrb	r4, [r7, #15]
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	881b      	ldrh	r3, [r3, #0]
 80006a2:	4618      	mov	r0, r3
 80006a4:	f7ff ff3a 	bl	800051c <GET_CRLH_position>
 80006a8:	4603      	mov	r3, r0
 80006aa:	fa04 f203 	lsl.w	r2, r4, r3
 80006ae:	68bb      	ldr	r3, [r7, #8]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	431a      	orrs	r2, r3
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	601a      	str	r2, [r3, #0]
}
 80006b8:	bf00      	nop
 80006ba:	3714      	adds	r7, #20
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd90      	pop	{r4, r7, pc}

080006c0 <MCAL_GPIO_WritePin>:
* @param [in]    - Value: the pin value (Two values based on based on @ref GPIO_PIN_state
* @retval        - none
* Note           - none
*/
void MCAL_GPIO_WritePin(GPIO_TypeDef* GPIOx , uint16_t PinNumber , uint8_t value)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	460b      	mov	r3, r1
 80006ca:	807b      	strh	r3, [r7, #2]
 80006cc:	4613      	mov	r3, r2
 80006ce:	707b      	strb	r3, [r7, #1]
	if( value == GPIO_PIN_true )
 80006d0:	787b      	ldrb	r3, [r7, #1]
 80006d2:	2b01      	cmp	r3, #1
 80006d4:	d103      	bne.n	80006de <MCAL_GPIO_WritePin+0x1e>
		{
			GPIOx->BSRR = (uint32_t)PinNumber;
 80006d6:	887a      	ldrh	r2, [r7, #2]
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	611a      	str	r2, [r3, #16]
		}
		else
		{
			GPIOx->BRR = (uint32_t)PinNumber;
		}
}
 80006dc:	e002      	b.n	80006e4 <MCAL_GPIO_WritePin+0x24>
			GPIOx->BRR = (uint32_t)PinNumber;
 80006de:	887a      	ldrh	r2, [r7, #2]
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	615a      	str	r2, [r3, #20]
}
 80006e4:	bf00      	nop
 80006e6:	370c      	adds	r7, #12
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bc80      	pop	{r7}
 80006ec:	4770      	bx	lr
	...

080006f0 <MCAL_RCC_GetSysCLK>:
1111: SYSCLK divided by 512
 */
const uint8_t AHB_Prescaler[17U]= {0,0,0,0,0,0,0,0,1,2,3,4,6,7,8,9};

uint32_t MCAL_RCC_GetSysCLK(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
00: HSI oscillator used as system clock
01: HSE oscillator used as system clock
10: PLL used as system clock
11: not applicable
*/
	switch( (RCC->CFGR >>2)&0b11 )
 80006f4:	4b08      	ldr	r3, [pc, #32]	; (8000718 <MCAL_RCC_GetSysCLK+0x28>)
 80006f6:	685b      	ldr	r3, [r3, #4]
 80006f8:	089b      	lsrs	r3, r3, #2
 80006fa:	f003 0303 	and.w	r3, r3, #3
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d002      	beq.n	8000708 <MCAL_RCC_GetSysCLK+0x18>
 8000702:	2b01      	cmp	r3, #1
 8000704:	d002      	beq.n	800070c <MCAL_RCC_GetSysCLK+0x1c>
 8000706:	e003      	b.n	8000710 <MCAL_RCC_GetSysCLK+0x20>
	{
	case 0:
		return HSI_CLK;
 8000708:	4b04      	ldr	r3, [pc, #16]	; (800071c <MCAL_RCC_GetSysCLK+0x2c>)
 800070a:	e001      	b.n	8000710 <MCAL_RCC_GetSysCLK+0x20>
		break;

	case 1:
		return HSE_CLK;
 800070c:	4b04      	ldr	r3, [pc, #16]	; (8000720 <MCAL_RCC_GetSysCLK+0x30>)
 800070e:	e7ff      	b.n	8000710 <MCAL_RCC_GetSysCLK+0x20>
		break;

	}
}
 8000710:	4618      	mov	r0, r3
 8000712:	46bd      	mov	sp, r7
 8000714:	bc80      	pop	{r7}
 8000716:	4770      	bx	lr
 8000718:	40021000 	.word	0x40021000
 800071c:	007a1200 	.word	0x007a1200
 8000720:	00f42400 	.word	0x00f42400

08000724 <MCAL_RCC_GetPCLKFreq>:

uint32_t MCAL_RCC_GetPCLKFreq(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
	//Bits 7:4 HPRE: AHB prescaler
	return( MCAL_RCC_GetSysCLK() >> (AHB_Prescaler[( ( (RCC->CFGR)>>4 ) &0b1111 )]) );
 8000728:	f7ff ffe2 	bl	80006f0 <MCAL_RCC_GetSysCLK>
 800072c:	4601      	mov	r1, r0
 800072e:	4b05      	ldr	r3, [pc, #20]	; (8000744 <MCAL_RCC_GetPCLKFreq+0x20>)
 8000730:	685b      	ldr	r3, [r3, #4]
 8000732:	091b      	lsrs	r3, r3, #4
 8000734:	f003 030f 	and.w	r3, r3, #15
 8000738:	4a03      	ldr	r2, [pc, #12]	; (8000748 <MCAL_RCC_GetPCLKFreq+0x24>)
 800073a:	5cd3      	ldrb	r3, [r2, r3]
 800073c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000740:	4618      	mov	r0, r3
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40021000 	.word	0x40021000
 8000748:	08000f24 	.word	0x08000f24

0800074c <MCAL_RCC_GetPCLK1Freq>:

uint32_t MCAL_RCC_GetPCLK1Freq(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
	//Bits 10:8 PPRE1: APB low-speed prescaler (APB1)
	return ( MCAL_RCC_GetPCLKFreq() >> (APB_Prescaler[( ( (RCC->CFGR)>>8 ) &0b111 )]) );
 8000750:	f7ff ffe8 	bl	8000724 <MCAL_RCC_GetPCLKFreq>
 8000754:	4601      	mov	r1, r0
 8000756:	4b05      	ldr	r3, [pc, #20]	; (800076c <MCAL_RCC_GetPCLK1Freq+0x20>)
 8000758:	685b      	ldr	r3, [r3, #4]
 800075a:	0a1b      	lsrs	r3, r3, #8
 800075c:	f003 0307 	and.w	r3, r3, #7
 8000760:	4a03      	ldr	r2, [pc, #12]	; (8000770 <MCAL_RCC_GetPCLK1Freq+0x24>)
 8000762:	5cd3      	ldrb	r3, [r2, r3]
 8000764:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000768:	4618      	mov	r0, r3
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40021000 	.word	0x40021000
 8000770:	08000f1c 	.word	0x08000f1c

08000774 <MCAL_RCC_GetPCLK2Freq>:

uint32_t MCAL_RCC_GetPCLK2Freq(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
	//Bits 13:11 PPRE2: APB high-speed prescaler (APB2)
	return ( MCAL_RCC_GetPCLKFreq() >> (APB_Prescaler[( ( (RCC->CFGR)>>11 ) &0b111 )]) );
 8000778:	f7ff ffd4 	bl	8000724 <MCAL_RCC_GetPCLKFreq>
 800077c:	4601      	mov	r1, r0
 800077e:	4b05      	ldr	r3, [pc, #20]	; (8000794 <MCAL_RCC_GetPCLK2Freq+0x20>)
 8000780:	685b      	ldr	r3, [r3, #4]
 8000782:	0adb      	lsrs	r3, r3, #11
 8000784:	f003 0307 	and.w	r3, r3, #7
 8000788:	4a03      	ldr	r2, [pc, #12]	; (8000798 <MCAL_RCC_GetPCLK2Freq+0x24>)
 800078a:	5cd3      	ldrb	r3, [r2, r3]
 800078c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000790:	4618      	mov	r0, r3
 8000792:	bd80      	pop	{r7, pc}
 8000794:	40021000 	.word	0x40021000
 8000798:	08000f1c 	.word	0x08000f1c

0800079c <MCAL_SPI_init>:
 * @param [in]    - SPI_Config: all SPI configuration
 * @retval        - none
 * Note           - none
 */
void MCAL_SPI_init(SPI_TypeDef* SPIx , SPI_Config_t* SPI_Config)
{
 800079c:	b480      	push	{r7}
 800079e:	b085      	sub	sp, #20
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
 80007a4:	6039      	str	r1, [r7, #0]
	//Safety for registers
	uint16_t CR1_temp=0 , CR2_temp=0 ;
 80007a6:	2300      	movs	r3, #0
 80007a8:	81fb      	strh	r3, [r7, #14]
 80007aa:	2300      	movs	r3, #0
 80007ac:	81bb      	strh	r3, [r7, #12]

	if(SPIx == SPI1)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	4a38      	ldr	r2, [pc, #224]	; (8000894 <MCAL_SPI_init+0xf8>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d109      	bne.n	80007ca <MCAL_SPI_init+0x2e>
	{
		Global_SPI_Config[SPI1_Index] = SPI_Config;
 80007b6:	4a38      	ldr	r2, [pc, #224]	; (8000898 <MCAL_SPI_init+0xfc>)
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	6013      	str	r3, [r2, #0]
		RCC_SPI1_CLK_EN;
 80007bc:	4b37      	ldr	r3, [pc, #220]	; (800089c <MCAL_SPI_init+0x100>)
 80007be:	699b      	ldr	r3, [r3, #24]
 80007c0:	4a36      	ldr	r2, [pc, #216]	; (800089c <MCAL_SPI_init+0x100>)
 80007c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007c6:	6193      	str	r3, [r2, #24]
 80007c8:	e008      	b.n	80007dc <MCAL_SPI_init+0x40>
	}
	else
	{
		Global_SPI_Config[SPI2_Index] = SPI_Config;
 80007ca:	4a33      	ldr	r2, [pc, #204]	; (8000898 <MCAL_SPI_init+0xfc>)
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	6053      	str	r3, [r2, #4]
		RCC_SPI2_CLK_EN;
 80007d0:	4b32      	ldr	r3, [pc, #200]	; (800089c <MCAL_SPI_init+0x100>)
 80007d2:	69db      	ldr	r3, [r3, #28]
 80007d4:	4a31      	ldr	r2, [pc, #196]	; (800089c <MCAL_SPI_init+0x100>)
 80007d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007da:	61d3      	str	r3, [r2, #28]
	}

	//Enable SPI CR1.Bit6
	CR1_temp |= (1<<6);
 80007dc:	89fb      	ldrh	r3, [r7, #14]
 80007de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007e2:	81fb      	strh	r3, [r7, #14]

	//Master or Slave
	CR1_temp |= SPI_Config->Device_Mode;
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	881a      	ldrh	r2, [r3, #0]
 80007e8:	89fb      	ldrh	r3, [r7, #14]
 80007ea:	4313      	orrs	r3, r2
 80007ec:	81fb      	strh	r3, [r7, #14]

	//SPI communication mode
	CR1_temp |= SPI_Config->Communication_Mode;
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	885a      	ldrh	r2, [r3, #2]
 80007f2:	89fb      	ldrh	r3, [r7, #14]
 80007f4:	4313      	orrs	r3, r2
 80007f6:	81fb      	strh	r3, [r7, #14]

	//SPI frame format
	CR1_temp |= SPI_Config->Frame_format;
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	889a      	ldrh	r2, [r3, #4]
 80007fc:	89fb      	ldrh	r3, [r7, #14]
 80007fe:	4313      	orrs	r3, r2
 8000800:	81fb      	strh	r3, [r7, #14]

	//SPI data size
	CR1_temp |= SPI_Config->Data_size;
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	88da      	ldrh	r2, [r3, #6]
 8000806:	89fb      	ldrh	r3, [r7, #14]
 8000808:	4313      	orrs	r3, r2
 800080a:	81fb      	strh	r3, [r7, #14]

	//SPI Polarity
	CR1_temp |= SPI_Config->CLK_Polarity;
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	891a      	ldrh	r2, [r3, #8]
 8000810:	89fb      	ldrh	r3, [r7, #14]
 8000812:	4313      	orrs	r3, r2
 8000814:	81fb      	strh	r3, [r7, #14]

	//SPI CLOCK PHASE
	CR1_temp |= SPI_Config->CLK_Phase;
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	895a      	ldrh	r2, [r3, #10]
 800081a:	89fb      	ldrh	r3, [r7, #14]
 800081c:	4313      	orrs	r3, r2
 800081e:	81fb      	strh	r3, [r7, #14]

	//==============NSS==============

	if(SPI_Config->NSS == SPI_NSS_SS_output_enable)
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	899b      	ldrh	r3, [r3, #12]
 8000824:	2b04      	cmp	r3, #4
 8000826:	d105      	bne.n	8000834 <MCAL_SPI_init+0x98>
	{
		CR1_temp |= SPI_Config->NSS;
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	899a      	ldrh	r2, [r3, #12]
 800082c:	89fb      	ldrh	r3, [r7, #14]
 800082e:	4313      	orrs	r3, r2
 8000830:	81fb      	strh	r3, [r7, #14]
 8000832:	e004      	b.n	800083e <MCAL_SPI_init+0xa2>
	{
		CR1_temp &= SPI_Config->NSS;
	}
	else
	{
		CR1_temp |= SPI_Config->NSS;
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	899a      	ldrh	r2, [r3, #12]
 8000838:	89fb      	ldrh	r3, [r7, #14]
 800083a:	4313      	orrs	r3, r2
 800083c:	81fb      	strh	r3, [r7, #14]
	}

	//SPI baud rate (prescaler)
	CR1_temp |= SPI_Config->SPI_PreScaler;
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	89da      	ldrh	r2, [r3, #14]
 8000842:	89fb      	ldrh	r3, [r7, #14]
 8000844:	4313      	orrs	r3, r2
 8000846:	81fb      	strh	r3, [r7, #14]

	//SPI IRQ
	if(SPI_Config->SPI_IRQ_Enable != SPI_IRQ_Enable_none)
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	8a1b      	ldrh	r3, [r3, #16]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d015      	beq.n	800087c <MCAL_SPI_init+0xe0>
	{
		CR1_temp |= SPI_Config->SPI_IRQ_Enable;
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	8a1a      	ldrh	r2, [r3, #16]
 8000854:	89fb      	ldrh	r3, [r7, #14]
 8000856:	4313      	orrs	r3, r2
 8000858:	81fb      	strh	r3, [r7, #14]

		if(SPIx == SPI1)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	4a0d      	ldr	r2, [pc, #52]	; (8000894 <MCAL_SPI_init+0xf8>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d106      	bne.n	8000870 <MCAL_SPI_init+0xd4>
			{
				NVIC_IRQ35_SPI1_EN;
 8000862:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <MCAL_SPI_init+0x104>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4a0e      	ldr	r2, [pc, #56]	; (80008a0 <MCAL_SPI_init+0x104>)
 8000868:	f043 0308 	orr.w	r3, r3, #8
 800086c:	6013      	str	r3, [r2, #0]
 800086e:	e005      	b.n	800087c <MCAL_SPI_init+0xe0>
			}
			else
			{
				NVIC_IRQ36_SPI2_EN;
 8000870:	4b0b      	ldr	r3, [pc, #44]	; (80008a0 <MCAL_SPI_init+0x104>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a0a      	ldr	r2, [pc, #40]	; (80008a0 <MCAL_SPI_init+0x104>)
 8000876:	f043 0310 	orr.w	r3, r3, #16
 800087a:	6013      	str	r3, [r2, #0]
			}
	}

	SPIx->CR1 = CR1_temp;
 800087c:	89fa      	ldrh	r2, [r7, #14]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	601a      	str	r2, [r3, #0]
	SPIx->CR2 = CR2_temp;
 8000882:	89ba      	ldrh	r2, [r7, #12]
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	605a      	str	r2, [r3, #4]

}
 8000888:	bf00      	nop
 800088a:	3714      	adds	r7, #20
 800088c:	46bd      	mov	sp, r7
 800088e:	bc80      	pop	{r7}
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	40013000 	.word	0x40013000
 8000898:	2000001c 	.word	0x2000001c
 800089c:	40021000 	.word	0x40021000
 80008a0:	e000e110 	.word	0xe000e110

080008a4 <MCAL_SPI_SendReceive_Data>:
 * @param [in]    - Polling: Enable polling or disable it
 * @retval        - none
 * Note           - none
 */
void MCAL_SPI_SendReceive_Data(SPI_TypeDef* SPIx , uint16_t* p_TxBuffer , SPI_Polling_mechanism Polling)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b085      	sub	sp, #20
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	60f8      	str	r0, [r7, #12]
 80008ac:	60b9      	str	r1, [r7, #8]
 80008ae:	4613      	mov	r3, r2
 80008b0:	71fb      	strb	r3, [r7, #7]
	if(Polling == Polling_ENABLE)
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	2b01      	cmp	r3, #1
 80008b6:	d107      	bne.n	80008c8 <MCAL_SPI_SendReceive_Data+0x24>
	{
		while(((SPIx->SR >>1)&1) == 0);
 80008b8:	bf00      	nop
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	689b      	ldr	r3, [r3, #8]
 80008be:	085b      	lsrs	r3, r3, #1
 80008c0:	f003 0301 	and.w	r3, r3, #1
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d0f8      	beq.n	80008ba <MCAL_SPI_SendReceive_Data+0x16>
	}
	SPIx->DR = *p_TxBuffer;
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	881b      	ldrh	r3, [r3, #0]
 80008cc:	461a      	mov	r2, r3
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	60da      	str	r2, [r3, #12]


	if(Polling == Polling_ENABLE)
 80008d2:	79fb      	ldrb	r3, [r7, #7]
 80008d4:	2b01      	cmp	r3, #1
 80008d6:	d106      	bne.n	80008e6 <MCAL_SPI_SendReceive_Data+0x42>
	{
		while(((SPIx->SR >>0)&1) == 0);    //receive buffer is full
 80008d8:	bf00      	nop
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	689b      	ldr	r3, [r3, #8]
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d0f9      	beq.n	80008da <MCAL_SPI_SendReceive_Data+0x36>
	}
	*p_TxBuffer = SPIx->DR;
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	68db      	ldr	r3, [r3, #12]
 80008ea:	b29a      	uxth	r2, r3
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	801a      	strh	r2, [r3, #0]
}
 80008f0:	bf00      	nop
 80008f2:	3714      	adds	r7, #20
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bc80      	pop	{r7}
 80008f8:	4770      	bx	lr
	...

080008fc <MCAL_SPI_GPIO_SetPins>:
 * @param [in]    - SPIx: where x can be 1 - 2 (depending on device used) to select the USART peripheral
 * @retval        - none
 * Note           - none
 */
void MCAL_SPI_GPIO_SetPins(SPI_TypeDef* SPIx)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PinCfg;

	if(SPIx == SPI1)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	4a73      	ldr	r2, [pc, #460]	; (8000ad4 <MCAL_SPI_GPIO_SetPins+0x1d8>)
 8000908:	4293      	cmp	r3, r2
 800090a:	d169      	bne.n	80009e0 <MCAL_SPI_GPIO_SetPins+0xe4>
		//PA4 - NSS
		//PA5 - CLK
		//PA6 - MISO
		//PA7 - MOSI

		if(Global_SPI_Config[SPI1_Index]->Device_Mode == SPI_DEVICE_Mode_Master)
 800090c:	4b72      	ldr	r3, [pc, #456]	; (8000ad8 <MCAL_SPI_GPIO_SetPins+0x1dc>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	881b      	ldrh	r3, [r3, #0]
 8000912:	2b04      	cmp	r3, #4
 8000914:	d134      	bne.n	8000980 <MCAL_SPI_GPIO_SetPins+0x84>
		{
			switch(Global_SPI_Config[SPI1_Index]->NSS)
 8000916:	4b70      	ldr	r3, [pc, #448]	; (8000ad8 <MCAL_SPI_GPIO_SetPins+0x1dc>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	899b      	ldrh	r3, [r3, #12]
 800091c:	2b04      	cmp	r3, #4
 800091e:	d10c      	bne.n	800093a <MCAL_SPI_GPIO_SetPins+0x3e>
				MCAL_GPIO_Init(GPIOA , &PinCfg );
				break;

			case SPI_NSS_SS_output_enable:
				//hardware master output floating
				PinCfg.GPIO_pinNumber = GPIO_PIN4;
 8000920:	2310      	movs	r3, #16
 8000922:	81bb      	strh	r3, [r7, #12]
				PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000924:	2306      	movs	r3, #6
 8000926:	73bb      	strb	r3, [r7, #14]
				PinCfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
 8000928:	2302      	movs	r3, #2
 800092a:	73fb      	strb	r3, [r7, #15]
				MCAL_GPIO_Init(GPIOA , &PinCfg);
 800092c:	f107 030c 	add.w	r3, r7, #12
 8000930:	4619      	mov	r1, r3
 8000932:	486a      	ldr	r0, [pc, #424]	; (8000adc <MCAL_SPI_GPIO_SetPins+0x1e0>)
 8000934:	f7ff fe45 	bl	80005c2 <MCAL_GPIO_Init>
				break;
 8000938:	bf00      	nop
			}

			//CLK for master
			PinCfg.GPIO_pinNumber = GPIO_PIN5;
 800093a:	2320      	movs	r3, #32
 800093c:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 800093e:	2306      	movs	r3, #6
 8000940:	73bb      	strb	r3, [r7, #14]
			PinCfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
 8000942:	2302      	movs	r3, #2
 8000944:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA , &PinCfg );
 8000946:	f107 030c 	add.w	r3, r7, #12
 800094a:	4619      	mov	r1, r3
 800094c:	4863      	ldr	r0, [pc, #396]	; (8000adc <MCAL_SPI_GPIO_SetPins+0x1e0>)
 800094e:	f7ff fe38 	bl	80005c2 <MCAL_GPIO_Init>


			//MISO for master (assuming full duplex)
			PinCfg.GPIO_pinNumber = GPIO_PIN6;
 8000952:	2340      	movs	r3, #64	; 0x40
 8000954:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000956:	2301      	movs	r3, #1
 8000958:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA , &PinCfg );
 800095a:	f107 030c 	add.w	r3, r7, #12
 800095e:	4619      	mov	r1, r3
 8000960:	485e      	ldr	r0, [pc, #376]	; (8000adc <MCAL_SPI_GPIO_SetPins+0x1e0>)
 8000962:	f7ff fe2e 	bl	80005c2 <MCAL_GPIO_Init>

			//MOSI for master
			PinCfg.GPIO_pinNumber = GPIO_PIN7;
 8000966:	2380      	movs	r3, #128	; 0x80
 8000968:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 800096a:	2306      	movs	r3, #6
 800096c:	73bb      	strb	r3, [r7, #14]
			PinCfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
 800096e:	2302      	movs	r3, #2
 8000970:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA , &PinCfg );
 8000972:	f107 030c 	add.w	r3, r7, #12
 8000976:	4619      	mov	r1, r3
 8000978:	4858      	ldr	r0, [pc, #352]	; (8000adc <MCAL_SPI_GPIO_SetPins+0x1e0>)
 800097a:	f7ff fe22 	bl	80005c2 <MCAL_GPIO_Init>
			MCAL_GPIO_Init(GPIOB , &PinCfg );

		}

	}
}
 800097e:	e0a4      	b.n	8000aca <MCAL_SPI_GPIO_SetPins+0x1ce>
			if(Global_SPI_Config[SPI1_Index]->NSS == SPI_NSS_hard_slave)
 8000980:	4b55      	ldr	r3, [pc, #340]	; (8000ad8 <MCAL_SPI_GPIO_SetPins+0x1dc>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	899b      	ldrh	r3, [r3, #12]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d109      	bne.n	800099e <MCAL_SPI_GPIO_SetPins+0xa2>
				PinCfg.GPIO_pinNumber = GPIO_PIN4;
 800098a:	2310      	movs	r3, #16
 800098c:	81bb      	strh	r3, [r7, #12]
				PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 800098e:	2301      	movs	r3, #1
 8000990:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOA , &PinCfg );
 8000992:	f107 030c 	add.w	r3, r7, #12
 8000996:	4619      	mov	r1, r3
 8000998:	4850      	ldr	r0, [pc, #320]	; (8000adc <MCAL_SPI_GPIO_SetPins+0x1e0>)
 800099a:	f7ff fe12 	bl	80005c2 <MCAL_GPIO_Init>
			PinCfg.GPIO_pinNumber = GPIO_PIN5;
 800099e:	2320      	movs	r3, #32
 80009a0:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 80009a2:	2301      	movs	r3, #1
 80009a4:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA , &PinCfg );
 80009a6:	f107 030c 	add.w	r3, r7, #12
 80009aa:	4619      	mov	r1, r3
 80009ac:	484b      	ldr	r0, [pc, #300]	; (8000adc <MCAL_SPI_GPIO_SetPins+0x1e0>)
 80009ae:	f7ff fe08 	bl	80005c2 <MCAL_GPIO_Init>
			PinCfg.GPIO_pinNumber = GPIO_PIN6;
 80009b2:	2340      	movs	r3, #64	; 0x40
 80009b4:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 80009b6:	2306      	movs	r3, #6
 80009b8:	73bb      	strb	r3, [r7, #14]
			PinCfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
 80009ba:	2302      	movs	r3, #2
 80009bc:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA , &PinCfg );
 80009be:	f107 030c 	add.w	r3, r7, #12
 80009c2:	4619      	mov	r1, r3
 80009c4:	4845      	ldr	r0, [pc, #276]	; (8000adc <MCAL_SPI_GPIO_SetPins+0x1e0>)
 80009c6:	f7ff fdfc 	bl	80005c2 <MCAL_GPIO_Init>
			PinCfg.GPIO_pinNumber = GPIO_PIN7;
 80009ca:	2380      	movs	r3, #128	; 0x80
 80009cc:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 80009ce:	2301      	movs	r3, #1
 80009d0:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA , &PinCfg );
 80009d2:	f107 030c 	add.w	r3, r7, #12
 80009d6:	4619      	mov	r1, r3
 80009d8:	4840      	ldr	r0, [pc, #256]	; (8000adc <MCAL_SPI_GPIO_SetPins+0x1e0>)
 80009da:	f7ff fdf2 	bl	80005c2 <MCAL_GPIO_Init>
}
 80009de:	e074      	b.n	8000aca <MCAL_SPI_GPIO_SetPins+0x1ce>
	else if(SPIx == SPI2)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	4a3f      	ldr	r2, [pc, #252]	; (8000ae0 <MCAL_SPI_GPIO_SetPins+0x1e4>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d170      	bne.n	8000aca <MCAL_SPI_GPIO_SetPins+0x1ce>
		if(Global_SPI_Config[SPI2_Index]->Device_Mode == SPI_DEVICE_Mode_Master)
 80009e8:	4b3b      	ldr	r3, [pc, #236]	; (8000ad8 <MCAL_SPI_GPIO_SetPins+0x1dc>)
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	881b      	ldrh	r3, [r3, #0]
 80009ee:	2b04      	cmp	r3, #4
 80009f0:	d138      	bne.n	8000a64 <MCAL_SPI_GPIO_SetPins+0x168>
			switch(Global_SPI_Config[SPI1_Index]->NSS)
 80009f2:	4b39      	ldr	r3, [pc, #228]	; (8000ad8 <MCAL_SPI_GPIO_SetPins+0x1dc>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	899b      	ldrh	r3, [r3, #12]
 80009f8:	2b04      	cmp	r3, #4
 80009fa:	d10d      	bne.n	8000a18 <MCAL_SPI_GPIO_SetPins+0x11c>
				PinCfg.GPIO_pinNumber = GPIO_PIN12;
 80009fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a00:	81bb      	strh	r3, [r7, #12]
				PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000a02:	2306      	movs	r3, #6
 8000a04:	73bb      	strb	r3, [r7, #14]
				PinCfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
 8000a06:	2302      	movs	r3, #2
 8000a08:	73fb      	strb	r3, [r7, #15]
				MCAL_GPIO_Init(GPIOB , &PinCfg );
 8000a0a:	f107 030c 	add.w	r3, r7, #12
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4834      	ldr	r0, [pc, #208]	; (8000ae4 <MCAL_SPI_GPIO_SetPins+0x1e8>)
 8000a12:	f7ff fdd6 	bl	80005c2 <MCAL_GPIO_Init>
				break;
 8000a16:	bf00      	nop
			PinCfg.GPIO_pinNumber = GPIO_PIN13;
 8000a18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a1c:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000a1e:	2306      	movs	r3, #6
 8000a20:	73bb      	strb	r3, [r7, #14]
			PinCfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
 8000a22:	2302      	movs	r3, #2
 8000a24:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB , &PinCfg );
 8000a26:	f107 030c 	add.w	r3, r7, #12
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	482d      	ldr	r0, [pc, #180]	; (8000ae4 <MCAL_SPI_GPIO_SetPins+0x1e8>)
 8000a2e:	f7ff fdc8 	bl	80005c2 <MCAL_GPIO_Init>
			PinCfg.GPIO_pinNumber = GPIO_PIN14;
 8000a32:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a36:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB , &PinCfg );
 8000a3c:	f107 030c 	add.w	r3, r7, #12
 8000a40:	4619      	mov	r1, r3
 8000a42:	4828      	ldr	r0, [pc, #160]	; (8000ae4 <MCAL_SPI_GPIO_SetPins+0x1e8>)
 8000a44:	f7ff fdbd 	bl	80005c2 <MCAL_GPIO_Init>
			PinCfg.GPIO_pinNumber = GPIO_PIN15;
 8000a48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a4c:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000a4e:	2306      	movs	r3, #6
 8000a50:	73bb      	strb	r3, [r7, #14]
			PinCfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
 8000a52:	2302      	movs	r3, #2
 8000a54:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB , &PinCfg );
 8000a56:	f107 030c 	add.w	r3, r7, #12
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4821      	ldr	r0, [pc, #132]	; (8000ae4 <MCAL_SPI_GPIO_SetPins+0x1e8>)
 8000a5e:	f7ff fdb0 	bl	80005c2 <MCAL_GPIO_Init>
}
 8000a62:	e032      	b.n	8000aca <MCAL_SPI_GPIO_SetPins+0x1ce>
			if(Global_SPI_Config[SPI2_Index]->NSS == SPI_NSS_hard_slave)
 8000a64:	4b1c      	ldr	r3, [pc, #112]	; (8000ad8 <MCAL_SPI_GPIO_SetPins+0x1dc>)
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	899b      	ldrh	r3, [r3, #12]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d10a      	bne.n	8000a84 <MCAL_SPI_GPIO_SetPins+0x188>
				PinCfg.GPIO_pinNumber = GPIO_PIN12;
 8000a6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a72:	81bb      	strh	r3, [r7, #12]
				PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000a74:	2301      	movs	r3, #1
 8000a76:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOB , &PinCfg );
 8000a78:	f107 030c 	add.w	r3, r7, #12
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4819      	ldr	r0, [pc, #100]	; (8000ae4 <MCAL_SPI_GPIO_SetPins+0x1e8>)
 8000a80:	f7ff fd9f 	bl	80005c2 <MCAL_GPIO_Init>
			PinCfg.GPIO_pinNumber = GPIO_PIN13;
 8000a84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a88:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB , &PinCfg );
 8000a8e:	f107 030c 	add.w	r3, r7, #12
 8000a92:	4619      	mov	r1, r3
 8000a94:	4813      	ldr	r0, [pc, #76]	; (8000ae4 <MCAL_SPI_GPIO_SetPins+0x1e8>)
 8000a96:	f7ff fd94 	bl	80005c2 <MCAL_GPIO_Init>
			PinCfg.GPIO_pinNumber = GPIO_PIN14;
 8000a9a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a9e:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000aa0:	2306      	movs	r3, #6
 8000aa2:	73bb      	strb	r3, [r7, #14]
			PinCfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB , &PinCfg );
 8000aa8:	f107 030c 	add.w	r3, r7, #12
 8000aac:	4619      	mov	r1, r3
 8000aae:	480d      	ldr	r0, [pc, #52]	; (8000ae4 <MCAL_SPI_GPIO_SetPins+0x1e8>)
 8000ab0:	f7ff fd87 	bl	80005c2 <MCAL_GPIO_Init>
			PinCfg.GPIO_pinNumber = GPIO_PIN15;
 8000ab4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ab8:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000aba:	2301      	movs	r3, #1
 8000abc:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB , &PinCfg );
 8000abe:	f107 030c 	add.w	r3, r7, #12
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4807      	ldr	r0, [pc, #28]	; (8000ae4 <MCAL_SPI_GPIO_SetPins+0x1e8>)
 8000ac6:	f7ff fd7c 	bl	80005c2 <MCAL_GPIO_Init>
}
 8000aca:	bf00      	nop
 8000acc:	3710      	adds	r7, #16
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40013000 	.word	0x40013000
 8000ad8:	2000001c 	.word	0x2000001c
 8000adc:	40010800 	.word	0x40010800
 8000ae0:	40003800 	.word	0x40003800
 8000ae4:	40010c00 	.word	0x40010c00

08000ae8 <SPI1_IRQHandler>:


//IRQ

void SPI1_IRQHandler()    /* SPI1 global interrupt */
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src;

	irq_src.TXE  = ((SPI1->SR >>1)&1);
 8000aee:	4b13      	ldr	r3, [pc, #76]	; (8000b3c <SPI1_IRQHandler+0x54>)
 8000af0:	689b      	ldr	r3, [r3, #8]
 8000af2:	085b      	lsrs	r3, r3, #1
 8000af4:	f003 0301 	and.w	r3, r3, #1
 8000af8:	b2da      	uxtb	r2, r3
 8000afa:	793b      	ldrb	r3, [r7, #4]
 8000afc:	f362 0300 	bfi	r3, r2, #0, #1
 8000b00:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ((SPI1->SR >>0)&1);
 8000b02:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <SPI1_IRQHandler+0x54>)
 8000b04:	689b      	ldr	r3, [r3, #8]
 8000b06:	f003 0301 	and.w	r3, r3, #1
 8000b0a:	b2da      	uxtb	r2, r3
 8000b0c:	793b      	ldrb	r3, [r7, #4]
 8000b0e:	f362 0341 	bfi	r3, r2, #1, #1
 8000b12:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ((SPI1->SR >>4)&1);
 8000b14:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <SPI1_IRQHandler+0x54>)
 8000b16:	689b      	ldr	r3, [r3, #8]
 8000b18:	091b      	lsrs	r3, r3, #4
 8000b1a:	f003 0301 	and.w	r3, r3, #1
 8000b1e:	b2da      	uxtb	r2, r3
 8000b20:	793b      	ldrb	r3, [r7, #4]
 8000b22:	f362 0382 	bfi	r3, r2, #2, #1
 8000b26:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[SPI1_Index]->P_IRQ_callback(irq_src);
 8000b28:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <SPI1_IRQHandler+0x58>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	695b      	ldr	r3, [r3, #20]
 8000b2e:	7938      	ldrb	r0, [r7, #4]
 8000b30:	4798      	blx	r3
}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40013000 	.word	0x40013000
 8000b40:	2000001c 	.word	0x2000001c

08000b44 <SPI2_IRQHandler>:

void SPI2_IRQHandler()           			/* SPI2 global interrupt  */
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0

	struct S_IRQ_SRC irq_src;

	irq_src.TXE  = ((SPI2->SR >>1)&1);
 8000b4a:	4b13      	ldr	r3, [pc, #76]	; (8000b98 <SPI2_IRQHandler+0x54>)
 8000b4c:	689b      	ldr	r3, [r3, #8]
 8000b4e:	085b      	lsrs	r3, r3, #1
 8000b50:	f003 0301 	and.w	r3, r3, #1
 8000b54:	b2da      	uxtb	r2, r3
 8000b56:	793b      	ldrb	r3, [r7, #4]
 8000b58:	f362 0300 	bfi	r3, r2, #0, #1
 8000b5c:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ((SPI2->SR >>0)&1);
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <SPI2_IRQHandler+0x54>)
 8000b60:	689b      	ldr	r3, [r3, #8]
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	b2da      	uxtb	r2, r3
 8000b68:	793b      	ldrb	r3, [r7, #4]
 8000b6a:	f362 0341 	bfi	r3, r2, #1, #1
 8000b6e:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ((SPI2->SR >>4)&1);
 8000b70:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <SPI2_IRQHandler+0x54>)
 8000b72:	689b      	ldr	r3, [r3, #8]
 8000b74:	091b      	lsrs	r3, r3, #4
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	b2da      	uxtb	r2, r3
 8000b7c:	793b      	ldrb	r3, [r7, #4]
 8000b7e:	f362 0382 	bfi	r3, r2, #2, #1
 8000b82:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[SPI2_Index]->P_IRQ_callback(irq_src);
 8000b84:	4b05      	ldr	r3, [pc, #20]	; (8000b9c <SPI2_IRQHandler+0x58>)
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	695b      	ldr	r3, [r3, #20]
 8000b8a:	7938      	ldrb	r0, [r7, #4]
 8000b8c:	4798      	blx	r3

}
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40003800 	.word	0x40003800
 8000b9c:	2000001c 	.word	0x2000001c

08000ba0 <MCAL_UART_init>:
 * @param [in]    - UART_Config: all UART configuration
 * @retval        - none
 * Note           - none
 */
void MCAL_UART_init(USART_TypeDef* USARTx , UART_Config_t* UART_Config)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	6039      	str	r1, [r7, #0]
	Global_UART_Config = UART_Config;
 8000baa:	4a56      	ldr	r2, [pc, #344]	; (8000d04 <MCAL_UART_init+0x164>)
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	6013      	str	r3, [r2, #0]
	uint32_t P_clk ;

	//enable clock
	if(USARTx == USART1)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	4a55      	ldr	r2, [pc, #340]	; (8000d08 <MCAL_UART_init+0x168>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d106      	bne.n	8000bc6 <MCAL_UART_init+0x26>
		RCC_USART1_CLK_EN;
 8000bb8:	4b54      	ldr	r3, [pc, #336]	; (8000d0c <MCAL_UART_init+0x16c>)
 8000bba:	699b      	ldr	r3, [r3, #24]
 8000bbc:	4a53      	ldr	r2, [pc, #332]	; (8000d0c <MCAL_UART_init+0x16c>)
 8000bbe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bc2:	6193      	str	r3, [r2, #24]
 8000bc4:	e014      	b.n	8000bf0 <MCAL_UART_init+0x50>

	else if(USARTx == USART2)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4a51      	ldr	r2, [pc, #324]	; (8000d10 <MCAL_UART_init+0x170>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d106      	bne.n	8000bdc <MCAL_UART_init+0x3c>
		RCC_USART2_CLK_EN;
 8000bce:	4b4f      	ldr	r3, [pc, #316]	; (8000d0c <MCAL_UART_init+0x16c>)
 8000bd0:	69db      	ldr	r3, [r3, #28]
 8000bd2:	4a4e      	ldr	r2, [pc, #312]	; (8000d0c <MCAL_UART_init+0x16c>)
 8000bd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd8:	61d3      	str	r3, [r2, #28]
 8000bda:	e009      	b.n	8000bf0 <MCAL_UART_init+0x50>

	else if(USARTx == USART3)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	4a4d      	ldr	r2, [pc, #308]	; (8000d14 <MCAL_UART_init+0x174>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d105      	bne.n	8000bf0 <MCAL_UART_init+0x50>
		RCC_USART3_CLK_EN;
 8000be4:	4b49      	ldr	r3, [pc, #292]	; (8000d0c <MCAL_UART_init+0x16c>)
 8000be6:	69db      	ldr	r3, [r3, #28]
 8000be8:	4a48      	ldr	r2, [pc, #288]	; (8000d0c <MCAL_UART_init+0x16c>)
 8000bea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bee:	61d3      	str	r3, [r2, #28]

	//Enable UART Module
	USARTx->CR1 |= (1<<13);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	60da      	str	r2, [r3, #12]

	//Enable UART Tx or Rx based on UART_MODE
	USARTx->CR1 |= UART_Config->UART_Mode;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	683a      	ldr	r2, [r7, #0]
 8000c02:	7812      	ldrb	r2, [r2, #0]
 8000c04:	431a      	orrs	r2, r3
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	60da      	str	r2, [r3, #12]

	//Payload length based on UART payload length
	USARTx->CR1 |= UART_Config->UART_Payload_Length;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	68db      	ldr	r3, [r3, #12]
 8000c0e:	683a      	ldr	r2, [r7, #0]
 8000c10:	7a12      	ldrb	r2, [r2, #8]
 8000c12:	431a      	orrs	r2, r3
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	60da      	str	r2, [r3, #12]

	//Configure parity based on UART_parity
	USARTx->CR1 |= UART_Config->UART_Parity;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	683a      	ldr	r2, [r7, #0]
 8000c1e:	7a52      	ldrb	r2, [r2, #9]
 8000c20:	431a      	orrs	r2, r3
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	60da      	str	r2, [r3, #12]

	//Configure stop bits
	USARTx->CR2 |= UART_Config->UART_StopBits;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	691b      	ldr	r3, [r3, #16]
 8000c2a:	683a      	ldr	r2, [r7, #0]
 8000c2c:	7a92      	ldrb	r2, [r2, #10]
 8000c2e:	431a      	orrs	r2, r3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	611a      	str	r2, [r3, #16]

	//hardware flow control
	USARTx->CR3 |= UART_Config->UART_FlowCtrl;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	695b      	ldr	r3, [r3, #20]
 8000c38:	683a      	ldr	r2, [r7, #0]
 8000c3a:	7ad2      	ldrb	r2, [r2, #11]
 8000c3c:	431a      	orrs	r2, r3
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	615a      	str	r2, [r3, #20]

	//Baud rate
	if(USARTx == USART1)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4a30      	ldr	r2, [pc, #192]	; (8000d08 <MCAL_UART_init+0x168>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d103      	bne.n	8000c52 <MCAL_UART_init+0xb2>
		P_clk =  MCAL_RCC_GetPCLK2Freq();
 8000c4a:	f7ff fd93 	bl	8000774 <MCAL_RCC_GetPCLK2Freq>
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	e002      	b.n	8000c58 <MCAL_UART_init+0xb8>
	else
		P_clk =  MCAL_RCC_GetPCLK1Freq();
 8000c52:	f7ff fd7b 	bl	800074c <MCAL_RCC_GetPCLK1Freq>
 8000c56:	60f8      	str	r0, [r7, #12]

	USARTx->BRR = UART_BRR_Register(P_clk ,UART_Config->UART_BaudRate);
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	011b      	lsls	r3, r3, #4
 8000c5e:	68fa      	ldr	r2, [r7, #12]
 8000c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c64:	0119      	lsls	r1, r3, #4
 8000c66:	68fa      	ldr	r2, [r7, #12]
 8000c68:	4613      	mov	r3, r2
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	4413      	add	r3, r2
 8000c6e:	009a      	lsls	r2, r3, #2
 8000c70:	441a      	add	r2, r3
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	009b      	lsls	r3, r3, #2
 8000c78:	fbb2 f2f3 	udiv	r2, r2, r3
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	011b      	lsls	r3, r3, #4
 8000c82:	68f8      	ldr	r0, [r7, #12]
 8000c84:	fbb0 f3f3 	udiv	r3, r0, r3
 8000c88:	2064      	movs	r0, #100	; 0x64
 8000c8a:	fb00 f303 	mul.w	r3, r0, r3
 8000c8e:	1ad3      	subs	r3, r2, r3
 8000c90:	011b      	lsls	r3, r3, #4
 8000c92:	4a21      	ldr	r2, [pc, #132]	; (8000d18 <MCAL_UART_init+0x178>)
 8000c94:	fba2 2303 	umull	r2, r3, r2, r3
 8000c98:	095b      	lsrs	r3, r3, #5
 8000c9a:	f003 030f 	and.w	r3, r3, #15
 8000c9e:	ea41 0203 	orr.w	r2, r1, r3
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	609a      	str	r2, [r3, #8]


	//ENABLE/DISABLE interrupt
	if(UART_Config->UART_IRQ_Enable != UART_IRQ_Enable_none)
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	7b1b      	ldrb	r3, [r3, #12]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d026      	beq.n	8000cfc <MCAL_UART_init+0x15c>
	{
		USARTx->CR1 |= UART_Config->UART_IRQ_Enable;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	68db      	ldr	r3, [r3, #12]
 8000cb2:	683a      	ldr	r2, [r7, #0]
 8000cb4:	7b12      	ldrb	r2, [r2, #12]
 8000cb6:	431a      	orrs	r2, r3
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	60da      	str	r2, [r3, #12]

		//Enable NVIC
		if(USARTx == USART1)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	4a12      	ldr	r2, [pc, #72]	; (8000d08 <MCAL_UART_init+0x168>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d106      	bne.n	8000cd2 <MCAL_UART_init+0x132>
			//NVIC_IRQ37_USART1_EN;
			*((volatile uint32_t *)0xE000E104UL) |= (1<<(37-32));
 8000cc4:	4b15      	ldr	r3, [pc, #84]	; (8000d1c <MCAL_UART_init+0x17c>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a14      	ldr	r2, [pc, #80]	; (8000d1c <MCAL_UART_init+0x17c>)
 8000cca:	f043 0320 	orr.w	r3, r3, #32
 8000cce:	6013      	str	r3, [r2, #0]

		else if(USARTx == USART3)
			*((volatile uint32_t *)0xE000E104UL) |= (1<<(39-32));
	}

}
 8000cd0:	e014      	b.n	8000cfc <MCAL_UART_init+0x15c>
		else if(USARTx == USART2)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4a0e      	ldr	r2, [pc, #56]	; (8000d10 <MCAL_UART_init+0x170>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d106      	bne.n	8000ce8 <MCAL_UART_init+0x148>
			*((volatile uint32_t *)0xE000E104UL) |= (1<<(38-32));
 8000cda:	4b10      	ldr	r3, [pc, #64]	; (8000d1c <MCAL_UART_init+0x17c>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a0f      	ldr	r2, [pc, #60]	; (8000d1c <MCAL_UART_init+0x17c>)
 8000ce0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ce4:	6013      	str	r3, [r2, #0]
}
 8000ce6:	e009      	b.n	8000cfc <MCAL_UART_init+0x15c>
		else if(USARTx == USART3)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	4a0a      	ldr	r2, [pc, #40]	; (8000d14 <MCAL_UART_init+0x174>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d105      	bne.n	8000cfc <MCAL_UART_init+0x15c>
			*((volatile uint32_t *)0xE000E104UL) |= (1<<(39-32));
 8000cf0:	4b0a      	ldr	r3, [pc, #40]	; (8000d1c <MCAL_UART_init+0x17c>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a09      	ldr	r2, [pc, #36]	; (8000d1c <MCAL_UART_init+0x17c>)
 8000cf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cfa:	6013      	str	r3, [r2, #0]
}
 8000cfc:	bf00      	nop
 8000cfe:	3710      	adds	r7, #16
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20000024 	.word	0x20000024
 8000d08:	40013800 	.word	0x40013800
 8000d0c:	40021000 	.word	0x40021000
 8000d10:	40004400 	.word	0x40004400
 8000d14:	40004800 	.word	0x40004800
 8000d18:	51eb851f 	.word	0x51eb851f
 8000d1c:	e000e104 	.word	0xe000e104

08000d20 <MCAL_UART_GPIO_SetPins>:
		NVIC_IRQ39_USART3_DIS;
	}
}

void MCAL_UART_GPIO_SetPins(USART_TypeDef* USARTx)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PinCfg;

	if(USARTx == USART1)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	4a2b      	ldr	r2, [pc, #172]	; (8000dd8 <MCAL_UART_GPIO_SetPins+0xb8>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d118      	bne.n	8000d62 <MCAL_UART_GPIO_SetPins+0x42>
	{
		//PA9 --> Tx
		PinCfg.GPIO_pinNumber = GPIO_PIN9;
 8000d30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d34:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000d36:	2306      	movs	r3, #6
 8000d38:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA , &PinCfg );
 8000d3e:	f107 030c 	add.w	r3, r7, #12
 8000d42:	4619      	mov	r1, r3
 8000d44:	4825      	ldr	r0, [pc, #148]	; (8000ddc <MCAL_UART_GPIO_SetPins+0xbc>)
 8000d46:	f7ff fc3c 	bl	80005c2 <MCAL_GPIO_Init>

		//PA10 --> Rx
		PinCfg.GPIO_pinNumber = GPIO_PIN10;
 8000d4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d4e:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000d50:	2301      	movs	r3, #1
 8000d52:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA , &PinCfg );
 8000d54:	f107 030c 	add.w	r3, r7, #12
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4820      	ldr	r0, [pc, #128]	; (8000ddc <MCAL_UART_GPIO_SetPins+0xbc>)
 8000d5c:	f7ff fc31 	bl	80005c2 <MCAL_GPIO_Init>
			MCAL_GPIO_Init(GPIOB , &PinCfg );
		}

	}

}
 8000d60:	e036      	b.n	8000dd0 <MCAL_UART_GPIO_SetPins+0xb0>
	else if(USARTx == USART2)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4a1e      	ldr	r2, [pc, #120]	; (8000de0 <MCAL_UART_GPIO_SetPins+0xc0>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d116      	bne.n	8000d98 <MCAL_UART_GPIO_SetPins+0x78>
		PinCfg.GPIO_pinNumber = GPIO_PIN2;
 8000d6a:	2304      	movs	r3, #4
 8000d6c:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000d6e:	2306      	movs	r3, #6
 8000d70:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
 8000d72:	2302      	movs	r3, #2
 8000d74:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA , &PinCfg );
 8000d76:	f107 030c 	add.w	r3, r7, #12
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4817      	ldr	r0, [pc, #92]	; (8000ddc <MCAL_UART_GPIO_SetPins+0xbc>)
 8000d7e:	f7ff fc20 	bl	80005c2 <MCAL_GPIO_Init>
		PinCfg.GPIO_pinNumber = GPIO_PIN3;
 8000d82:	2308      	movs	r3, #8
 8000d84:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000d86:	2301      	movs	r3, #1
 8000d88:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA , &PinCfg );
 8000d8a:	f107 030c 	add.w	r3, r7, #12
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4812      	ldr	r0, [pc, #72]	; (8000ddc <MCAL_UART_GPIO_SetPins+0xbc>)
 8000d92:	f7ff fc16 	bl	80005c2 <MCAL_GPIO_Init>
}
 8000d96:	e01b      	b.n	8000dd0 <MCAL_UART_GPIO_SetPins+0xb0>
	else if(USARTx == USART3)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4a12      	ldr	r2, [pc, #72]	; (8000de4 <MCAL_UART_GPIO_SetPins+0xc4>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d117      	bne.n	8000dd0 <MCAL_UART_GPIO_SetPins+0xb0>
		PinCfg.GPIO_pinNumber = GPIO_PIN10;
 8000da0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000da4:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000da6:	2306      	movs	r3, #6
 8000da8:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
 8000daa:	2302      	movs	r3, #2
 8000dac:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB , &PinCfg );
 8000dae:	f107 030c 	add.w	r3, r7, #12
 8000db2:	4619      	mov	r1, r3
 8000db4:	480c      	ldr	r0, [pc, #48]	; (8000de8 <MCAL_UART_GPIO_SetPins+0xc8>)
 8000db6:	f7ff fc04 	bl	80005c2 <MCAL_GPIO_Init>
		PinCfg.GPIO_pinNumber = GPIO_PIN11;
 8000dba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000dbe:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB , &PinCfg );
 8000dc4:	f107 030c 	add.w	r3, r7, #12
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4807      	ldr	r0, [pc, #28]	; (8000de8 <MCAL_UART_GPIO_SetPins+0xc8>)
 8000dcc:	f7ff fbf9 	bl	80005c2 <MCAL_GPIO_Init>
}
 8000dd0:	bf00      	nop
 8000dd2:	3710      	adds	r7, #16
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40013800 	.word	0x40013800
 8000ddc:	40010800 	.word	0x40010800
 8000de0:	40004400 	.word	0x40004400
 8000de4:	40004800 	.word	0x40004800
 8000de8:	40010c00 	.word	0x40010c00

08000dec <MCAL_UART_Send_Data>:
 * @param [in]    - Polling: Enable polling or disable it
 * @retval        - none
 * Note           - none
 */
void MCAL_UART_Send_Data(USART_TypeDef* USARTx , uint16_t* p_TxBuffer , Polling_mechanism Polling)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	4613      	mov	r3, r2
 8000df8:	71fb      	strb	r3, [r7, #7]
	if(Polling == Polling_EN)
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d107      	bne.n	8000e10 <MCAL_UART_Send_Data+0x24>
		while(((USARTx->SR >>7)&1) == 0);
 8000e00:	bf00      	nop
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	09db      	lsrs	r3, r3, #7
 8000e08:	f003 0301 	and.w	r3, r3, #1
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d0f8      	beq.n	8000e02 <MCAL_UART_Send_Data+0x16>
	{
		USARTx->DR = ((*p_TxBuffer) & (uint16_t)0x1FF );
	}
	else
	{
		USARTx->DR = ((*p_TxBuffer) & (uint8_t)0xFF );
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	881b      	ldrh	r3, [r3, #0]
 8000e14:	b2da      	uxtb	r2, r3
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	605a      	str	r2, [r3, #4]
	}
}
 8000e1a:	bf00      	nop
 8000e1c:	3714      	adds	r7, #20
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bc80      	pop	{r7}
 8000e22:	4770      	bx	lr

08000e24 <MCAL_UART_Receive_Data>:


void MCAL_UART_Receive_Data(USART_TypeDef* USARTx , uint16_t* p_TxBuffer , Polling_mechanism Polling)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	4613      	mov	r3, r2
 8000e30:	71fb      	strb	r3, [r7, #7]
	if(Polling == Polling_EN)
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d107      	bne.n	8000e48 <MCAL_UART_Receive_Data+0x24>
		while(((USARTx->SR >>5)&1) == 0);
 8000e38:	bf00      	nop
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	095b      	lsrs	r3, r3, #5
 8000e40:	f003 0301 	and.w	r3, r3, #1
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d0f8      	beq.n	8000e3a <MCAL_UART_Receive_Data+0x16>
			*((uint16_t*)p_TxBuffer) = ( USARTx->DR  & (uint16_t)0xFF );
		}
	}
	else
	{
		if(Global_UART_Config->UART_Parity == UART_Parity_none)
 8000e48:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <MCAL_UART_Receive_Data+0x58>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	7a5b      	ldrb	r3, [r3, #9]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d107      	bne.n	8000e62 <MCAL_UART_Receive_Data+0x3e>
		{
			*((uint16_t*)p_TxBuffer) = ( USARTx->DR  & (uint16_t)0xFF );
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	b29b      	uxth	r3, r3
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	b29a      	uxth	r2, r3
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	801a      	strh	r2, [r3, #0]
		else
		{
			*((uint16_t*)p_TxBuffer) = ( USARTx->DR  & (uint16_t)0x7F );
		}
	}
}
 8000e60:	e007      	b.n	8000e72 <MCAL_UART_Receive_Data+0x4e>
			*((uint16_t*)p_TxBuffer) = ( USARTx->DR  & (uint16_t)0x7F );
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e6c:	b29a      	uxth	r2, r3
 8000e6e:	68bb      	ldr	r3, [r7, #8]
 8000e70:	801a      	strh	r2, [r3, #0]
}
 8000e72:	bf00      	nop
 8000e74:	3714      	adds	r7, #20
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bc80      	pop	{r7}
 8000e7a:	4770      	bx	lr
 8000e7c:	20000024 	.word	0x20000024

08000e80 <USART1_IRQHandler>:


//ISR

void USART1_IRQHandler(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
	/* USART1 global interrupt */
	Global_UART_Config->P_IRQ_callback ();
 8000e84:	4b02      	ldr	r3, [pc, #8]	; (8000e90 <USART1_IRQHandler+0x10>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	691b      	ldr	r3, [r3, #16]
 8000e8a:	4798      	blx	r3
}
 8000e8c:	bf00      	nop
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	20000024 	.word	0x20000024

08000e94 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
	/* USART2 global interrupt */
	Global_UART_Config->P_IRQ_callback ();
 8000e98:	4b02      	ldr	r3, [pc, #8]	; (8000ea4 <USART2_IRQHandler+0x10>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	691b      	ldr	r3, [r3, #16]
 8000e9e:	4798      	blx	r3
}
 8000ea0:	bf00      	nop
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20000024 	.word	0x20000024

08000ea8 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
	/* USART3 global interrupt */
	Global_UART_Config->P_IRQ_callback ();
 8000eac:	4b02      	ldr	r3, [pc, #8]	; (8000eb8 <USART3_IRQHandler+0x10>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	691b      	ldr	r3, [r3, #16]
 8000eb2:	4798      	blx	r3
}
 8000eb4:	bf00      	nop
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20000024 	.word	0x20000024

08000ebc <__libc_init_array>:
 8000ebc:	b570      	push	{r4, r5, r6, lr}
 8000ebe:	2500      	movs	r5, #0
 8000ec0:	4e0c      	ldr	r6, [pc, #48]	; (8000ef4 <__libc_init_array+0x38>)
 8000ec2:	4c0d      	ldr	r4, [pc, #52]	; (8000ef8 <__libc_init_array+0x3c>)
 8000ec4:	1ba4      	subs	r4, r4, r6
 8000ec6:	10a4      	asrs	r4, r4, #2
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	d109      	bne.n	8000ee0 <__libc_init_array+0x24>
 8000ecc:	f000 f81a 	bl	8000f04 <_init>
 8000ed0:	2500      	movs	r5, #0
 8000ed2:	4e0a      	ldr	r6, [pc, #40]	; (8000efc <__libc_init_array+0x40>)
 8000ed4:	4c0a      	ldr	r4, [pc, #40]	; (8000f00 <__libc_init_array+0x44>)
 8000ed6:	1ba4      	subs	r4, r4, r6
 8000ed8:	10a4      	asrs	r4, r4, #2
 8000eda:	42a5      	cmp	r5, r4
 8000edc:	d105      	bne.n	8000eea <__libc_init_array+0x2e>
 8000ede:	bd70      	pop	{r4, r5, r6, pc}
 8000ee0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ee4:	4798      	blx	r3
 8000ee6:	3501      	adds	r5, #1
 8000ee8:	e7ee      	b.n	8000ec8 <__libc_init_array+0xc>
 8000eea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000eee:	4798      	blx	r3
 8000ef0:	3501      	adds	r5, #1
 8000ef2:	e7f2      	b.n	8000eda <__libc_init_array+0x1e>
 8000ef4:	08000f38 	.word	0x08000f38
 8000ef8:	08000f38 	.word	0x08000f38
 8000efc:	08000f38 	.word	0x08000f38
 8000f00:	08000f3c 	.word	0x08000f3c

08000f04 <_init>:
 8000f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f06:	bf00      	nop
 8000f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f0a:	bc08      	pop	{r3}
 8000f0c:	469e      	mov	lr, r3
 8000f0e:	4770      	bx	lr

08000f10 <_fini>:
 8000f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f12:	bf00      	nop
 8000f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f16:	bc08      	pop	{r3}
 8000f18:	469e      	mov	lr, r3
 8000f1a:	4770      	bx	lr
