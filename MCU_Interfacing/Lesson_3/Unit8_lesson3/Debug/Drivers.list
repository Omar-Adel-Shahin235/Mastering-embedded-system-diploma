
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000914  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08000a44  08000a44  00010a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000a60  08000a60  00010a68  2**0
                  CONTENTS
  4 .ARM          00000000  08000a60  08000a60  00010a68  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a60  08000a68  00010a68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a60  08000a60  00010a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a64  08000a64  00010a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010a68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000000  08000a68  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  08000a68  00020060  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010a68  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000400e  00000000  00000000  00010a91  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000009f3  00000000  00000000  00014a9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000a54  00000000  00000000  00015492  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001d0  00000000  00000000  00015ee8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000178  00000000  00000000  000160b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000b60  00000000  00000000  00016230  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00002100  00000000  00000000  00016d90  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00009ed0  00000000  00000000  00018e90  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00022d60  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000590  00000000  00000000  00022ddc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000a2c 	.word	0x08000a2c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000a2c 	.word	0x08000a2c

08000170 <clock_init>:
#include "Key_pad.h"

unsigned char IRQ_FLAG = 0;

void clock_init()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0

	RCC_GPIOA_CLK_EN();
 8000174:	4b07      	ldr	r3, [pc, #28]	; (8000194 <clock_init+0x24>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a06      	ldr	r2, [pc, #24]	; (8000194 <clock_init+0x24>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 8000180:	4b04      	ldr	r3, [pc, #16]	; (8000194 <clock_init+0x24>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a03      	ldr	r2, [pc, #12]	; (8000194 <clock_init+0x24>)
 8000186:	f043 0301 	orr.w	r3, r3, #1
 800018a:	6193      	str	r3, [r2, #24]
}
 800018c:	bf00      	nop
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr
 8000194:	40021000 	.word	0x40021000

08000198 <Omar_UART_IRQ_Callback>:

unsigned char ch;

void Omar_UART_IRQ_Callback()
{
 8000198:	b580      	push	{r7, lr}
 800019a:	af00      	add	r7, sp, #0
	MCAL_UART_Receive_Data(USART1, &ch, Polling_DIS);
 800019c:	2200      	movs	r2, #0
 800019e:	4905      	ldr	r1, [pc, #20]	; (80001b4 <Omar_UART_IRQ_Callback+0x1c>)
 80001a0:	4805      	ldr	r0, [pc, #20]	; (80001b8 <Omar_UART_IRQ_Callback+0x20>)
 80001a2:	f000 fbd3 	bl	800094c <MCAL_UART_Receive_Data>
	MCAL_UART_Send_Data(USART1, &ch, Polling_EN);
 80001a6:	2201      	movs	r2, #1
 80001a8:	4902      	ldr	r1, [pc, #8]	; (80001b4 <Omar_UART_IRQ_Callback+0x1c>)
 80001aa:	4803      	ldr	r0, [pc, #12]	; (80001b8 <Omar_UART_IRQ_Callback+0x20>)
 80001ac:	f000 fbb2 	bl	8000914 <MCAL_UART_Send_Data>
}
 80001b0:	bf00      	nop
 80001b2:	bd80      	pop	{r7, pc}
 80001b4:	20000020 	.word	0x20000020
 80001b8:	40013800 	.word	0x40013800

080001bc <main>:


int main(void)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b086      	sub	sp, #24
 80001c0:	af00      	add	r7, sp, #0
	clock_init();
 80001c2:	f7ff ffd5 	bl	8000170 <clock_init>

	UART_Config_t UART_Cfg;

	UART_Cfg.UART_BaudRate = UART_BaudRate_115200;
 80001c6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80001ca:	60bb      	str	r3, [r7, #8]
	UART_Cfg.UART_FlowCtrl = UART_FlowCtrl_none;
 80001cc:	2300      	movs	r3, #0
 80001ce:	73fb      	strb	r3, [r7, #15]
	UART_Cfg.UART_IRQ_Enable = UART_IRQ_Enable_RXNEIE;
 80001d0:	2320      	movs	r3, #32
 80001d2:	743b      	strb	r3, [r7, #16]
	UART_Cfg.P_IRQ_callback = Omar_UART_IRQ_Callback;
 80001d4:	4b09      	ldr	r3, [pc, #36]	; (80001fc <main+0x40>)
 80001d6:	617b      	str	r3, [r7, #20]
	UART_Cfg.UART_Parity = UART_Parity_none;
 80001d8:	2300      	movs	r3, #0
 80001da:	737b      	strb	r3, [r7, #13]
	UART_Cfg.UART_Payload_Length = UART_Payload_Length_8bit;
 80001dc:	2300      	movs	r3, #0
 80001de:	733b      	strb	r3, [r7, #12]
	UART_Cfg.UART_StopBits = UART_StopBits_1;
 80001e0:	2300      	movs	r3, #0
 80001e2:	73bb      	strb	r3, [r7, #14]
	UART_Cfg.UART_Mode = UART_MODE_Rx_Tx;
 80001e4:	230c      	movs	r3, #12
 80001e6:	713b      	strb	r3, [r7, #4]
	MCAL_UART_init(USART1 , &UART_Cfg);
 80001e8:	1d3b      	adds	r3, r7, #4
 80001ea:	4619      	mov	r1, r3
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <main+0x44>)
 80001ee:	f000 fa6b 	bl	80006c8 <MCAL_UART_init>

	MCAL_UART_GPIO_SetPins(USART1);
 80001f2:	4803      	ldr	r0, [pc, #12]	; (8000200 <main+0x44>)
 80001f4:	f000 fb28 	bl	8000848 <MCAL_UART_GPIO_SetPins>


	while(1)
 80001f8:	e7fe      	b.n	80001f8 <main+0x3c>
 80001fa:	bf00      	nop
 80001fc:	08000199 	.word	0x08000199
 8000200:	40013800 	.word	0x40013800

08000204 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000204:	480d      	ldr	r0, [pc, #52]	; (800023c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000206:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000208:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800020c:	480c      	ldr	r0, [pc, #48]	; (8000240 <LoopForever+0x6>)
  ldr r1, =_edata
 800020e:	490d      	ldr	r1, [pc, #52]	; (8000244 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000210:	4a0d      	ldr	r2, [pc, #52]	; (8000248 <LoopForever+0xe>)
  movs r3, #0
 8000212:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000214:	e002      	b.n	800021c <LoopCopyDataInit>

08000216 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000216:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000218:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800021a:	3304      	adds	r3, #4

0800021c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800021c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800021e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000220:	d3f9      	bcc.n	8000216 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000222:	4a0a      	ldr	r2, [pc, #40]	; (800024c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000224:	4c0a      	ldr	r4, [pc, #40]	; (8000250 <LoopForever+0x16>)
  movs r3, #0
 8000226:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000228:	e001      	b.n	800022e <LoopFillZerobss>

0800022a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800022a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800022c:	3204      	adds	r2, #4

0800022e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800022e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000230:	d3fb      	bcc.n	800022a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000232:	f000 fbd7 	bl	80009e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000236:	f7ff ffc1 	bl	80001bc <main>

0800023a <LoopForever>:

LoopForever:
    b LoopForever
 800023a:	e7fe      	b.n	800023a <LoopForever>
  ldr   r0, =_estack
 800023c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000240:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000244:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000248:	08000a68 	.word	0x08000a68
  ldr r2, =_sbss
 800024c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000250:	20000060 	.word	0x20000060

08000254 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000254:	e7fe      	b.n	8000254 <ADC1_2_IRQHandler>
	...

08000258 <EXTI0_IRQHandler>:

//======================================
//          ISR Functions
//======================================
void EXTI0_IRQHandler(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0


	//Clear pending register
	EXTI->PR |= (1<<0);
 800025c:	4b05      	ldr	r3, [pc, #20]	; (8000274 <EXTI0_IRQHandler+0x1c>)
 800025e:	695b      	ldr	r3, [r3, #20]
 8000260:	4a04      	ldr	r2, [pc, #16]	; (8000274 <EXTI0_IRQHandler+0x1c>)
 8000262:	f043 0301 	orr.w	r3, r3, #1
 8000266:	6153      	str	r3, [r2, #20]

	//call IRQ function
	GP_IRQ_Call_Back[0]();
 8000268:	4b03      	ldr	r3, [pc, #12]	; (8000278 <EXTI0_IRQHandler+0x20>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	4798      	blx	r3
}
 800026e:	bf00      	nop
 8000270:	bd80      	pop	{r7, pc}
 8000272:	bf00      	nop
 8000274:	40010400 	.word	0x40010400
 8000278:	20000024 	.word	0x20000024

0800027c <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	af00      	add	r7, sp, #0
	//GP_IRQ_Call_Back[EXTI_Pin.EXI_InputLineNumber];

	//Clear pending register
	EXTI->PR |= (1<<1);
 8000280:	4b05      	ldr	r3, [pc, #20]	; (8000298 <EXTI1_IRQHandler+0x1c>)
 8000282:	695b      	ldr	r3, [r3, #20]
 8000284:	4a04      	ldr	r2, [pc, #16]	; (8000298 <EXTI1_IRQHandler+0x1c>)
 8000286:	f043 0302 	orr.w	r3, r3, #2
 800028a:	6153      	str	r3, [r2, #20]

	//call IRQ function
	GP_IRQ_Call_Back[1]();
 800028c:	4b03      	ldr	r3, [pc, #12]	; (800029c <EXTI1_IRQHandler+0x20>)
 800028e:	685b      	ldr	r3, [r3, #4]
 8000290:	4798      	blx	r3

}
 8000292:	bf00      	nop
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	40010400 	.word	0x40010400
 800029c:	20000024 	.word	0x20000024

080002a0 <EXTI2_IRQHandler>:


void EXTI2_IRQHandler(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
	//GP_IRQ_Call_Back[EXTI_Pin.EXI_InputLineNumber];

	//Clear pending register
		EXTI->PR |= (1<<2);
 80002a4:	4b05      	ldr	r3, [pc, #20]	; (80002bc <EXTI2_IRQHandler+0x1c>)
 80002a6:	695b      	ldr	r3, [r3, #20]
 80002a8:	4a04      	ldr	r2, [pc, #16]	; (80002bc <EXTI2_IRQHandler+0x1c>)
 80002aa:	f043 0304 	orr.w	r3, r3, #4
 80002ae:	6153      	str	r3, [r2, #20]

	//call IRQ function
	GP_IRQ_Call_Back[2]();
 80002b0:	4b03      	ldr	r3, [pc, #12]	; (80002c0 <EXTI2_IRQHandler+0x20>)
 80002b2:	689b      	ldr	r3, [r3, #8]
 80002b4:	4798      	blx	r3

}
 80002b6:	bf00      	nop
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	40010400 	.word	0x40010400
 80002c0:	20000024 	.word	0x20000024

080002c4 <EXTI3_IRQHandler>:


void EXTI3_IRQHandler(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
	//GP_IRQ_Call_Back[EXTI_Pin.EXI_InputLineNumber];

	//Clear pending register
		EXTI->PR |= (1<<3);
 80002c8:	4b05      	ldr	r3, [pc, #20]	; (80002e0 <EXTI3_IRQHandler+0x1c>)
 80002ca:	695b      	ldr	r3, [r3, #20]
 80002cc:	4a04      	ldr	r2, [pc, #16]	; (80002e0 <EXTI3_IRQHandler+0x1c>)
 80002ce:	f043 0308 	orr.w	r3, r3, #8
 80002d2:	6153      	str	r3, [r2, #20]

	//call IRQ function
	GP_IRQ_Call_Back[3]();
 80002d4:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <EXTI3_IRQHandler+0x20>)
 80002d6:	68db      	ldr	r3, [r3, #12]
 80002d8:	4798      	blx	r3
}
 80002da:	bf00      	nop
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	40010400 	.word	0x40010400
 80002e4:	20000024 	.word	0x20000024

080002e8 <EXTI4_IRQHandler>:


void EXTI4_IRQHandler(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
	//GP_IRQ_Call_Back[EXTI_Pin.EXI_InputLineNumber];

	//Clear pending register
	EXTI->PR |= (1<<4);
 80002ec:	4b05      	ldr	r3, [pc, #20]	; (8000304 <EXTI4_IRQHandler+0x1c>)
 80002ee:	695b      	ldr	r3, [r3, #20]
 80002f0:	4a04      	ldr	r2, [pc, #16]	; (8000304 <EXTI4_IRQHandler+0x1c>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6153      	str	r3, [r2, #20]

	//call IRQ function
	GP_IRQ_Call_Back[4]();
 80002f8:	4b03      	ldr	r3, [pc, #12]	; (8000308 <EXTI4_IRQHandler+0x20>)
 80002fa:	691b      	ldr	r3, [r3, #16]
 80002fc:	4798      	blx	r3
}
 80002fe:	bf00      	nop
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	40010400 	.word	0x40010400
 8000308:	20000024 	.word	0x20000024

0800030c <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
	//GP_IRQ_Call_Back[EXTI_Pin.EXI_InputLineNumber];

	//Clear pending register and call IRQ function
	if( EXTI->PR & (1<<5) ) { EXTI->PR |= (1<<5); GP_IRQ_Call_Back[5](); }
 8000310:	4b26      	ldr	r3, [pc, #152]	; (80003ac <EXTI9_5_IRQHandler+0xa0>)
 8000312:	695b      	ldr	r3, [r3, #20]
 8000314:	f003 0320 	and.w	r3, r3, #32
 8000318:	2b00      	cmp	r3, #0
 800031a:	d008      	beq.n	800032e <EXTI9_5_IRQHandler+0x22>
 800031c:	4b23      	ldr	r3, [pc, #140]	; (80003ac <EXTI9_5_IRQHandler+0xa0>)
 800031e:	695b      	ldr	r3, [r3, #20]
 8000320:	4a22      	ldr	r2, [pc, #136]	; (80003ac <EXTI9_5_IRQHandler+0xa0>)
 8000322:	f043 0320 	orr.w	r3, r3, #32
 8000326:	6153      	str	r3, [r2, #20]
 8000328:	4b21      	ldr	r3, [pc, #132]	; (80003b0 <EXTI9_5_IRQHandler+0xa4>)
 800032a:	695b      	ldr	r3, [r3, #20]
 800032c:	4798      	blx	r3
	if( EXTI->PR & (1<<6) ) { EXTI->PR |= (1<<6); GP_IRQ_Call_Back[6](); }
 800032e:	4b1f      	ldr	r3, [pc, #124]	; (80003ac <EXTI9_5_IRQHandler+0xa0>)
 8000330:	695b      	ldr	r3, [r3, #20]
 8000332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000336:	2b00      	cmp	r3, #0
 8000338:	d008      	beq.n	800034c <EXTI9_5_IRQHandler+0x40>
 800033a:	4b1c      	ldr	r3, [pc, #112]	; (80003ac <EXTI9_5_IRQHandler+0xa0>)
 800033c:	695b      	ldr	r3, [r3, #20]
 800033e:	4a1b      	ldr	r2, [pc, #108]	; (80003ac <EXTI9_5_IRQHandler+0xa0>)
 8000340:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000344:	6153      	str	r3, [r2, #20]
 8000346:	4b1a      	ldr	r3, [pc, #104]	; (80003b0 <EXTI9_5_IRQHandler+0xa4>)
 8000348:	699b      	ldr	r3, [r3, #24]
 800034a:	4798      	blx	r3
	if( EXTI->PR & (1<<7) ) { EXTI->PR |= (1<<7); GP_IRQ_Call_Back[7](); }
 800034c:	4b17      	ldr	r3, [pc, #92]	; (80003ac <EXTI9_5_IRQHandler+0xa0>)
 800034e:	695b      	ldr	r3, [r3, #20]
 8000350:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000354:	2b00      	cmp	r3, #0
 8000356:	d008      	beq.n	800036a <EXTI9_5_IRQHandler+0x5e>
 8000358:	4b14      	ldr	r3, [pc, #80]	; (80003ac <EXTI9_5_IRQHandler+0xa0>)
 800035a:	695b      	ldr	r3, [r3, #20]
 800035c:	4a13      	ldr	r2, [pc, #76]	; (80003ac <EXTI9_5_IRQHandler+0xa0>)
 800035e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000362:	6153      	str	r3, [r2, #20]
 8000364:	4b12      	ldr	r3, [pc, #72]	; (80003b0 <EXTI9_5_IRQHandler+0xa4>)
 8000366:	69db      	ldr	r3, [r3, #28]
 8000368:	4798      	blx	r3
	if( EXTI->PR & (1<<8) ) { EXTI->PR |= (1<<8); GP_IRQ_Call_Back[8](); }
 800036a:	4b10      	ldr	r3, [pc, #64]	; (80003ac <EXTI9_5_IRQHandler+0xa0>)
 800036c:	695b      	ldr	r3, [r3, #20]
 800036e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000372:	2b00      	cmp	r3, #0
 8000374:	d008      	beq.n	8000388 <EXTI9_5_IRQHandler+0x7c>
 8000376:	4b0d      	ldr	r3, [pc, #52]	; (80003ac <EXTI9_5_IRQHandler+0xa0>)
 8000378:	695b      	ldr	r3, [r3, #20]
 800037a:	4a0c      	ldr	r2, [pc, #48]	; (80003ac <EXTI9_5_IRQHandler+0xa0>)
 800037c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000380:	6153      	str	r3, [r2, #20]
 8000382:	4b0b      	ldr	r3, [pc, #44]	; (80003b0 <EXTI9_5_IRQHandler+0xa4>)
 8000384:	6a1b      	ldr	r3, [r3, #32]
 8000386:	4798      	blx	r3
	if( EXTI->PR & (1<<9) ) { EXTI->PR |= (1<<9); GP_IRQ_Call_Back[9](); }
 8000388:	4b08      	ldr	r3, [pc, #32]	; (80003ac <EXTI9_5_IRQHandler+0xa0>)
 800038a:	695b      	ldr	r3, [r3, #20]
 800038c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000390:	2b00      	cmp	r3, #0
 8000392:	d008      	beq.n	80003a6 <EXTI9_5_IRQHandler+0x9a>
 8000394:	4b05      	ldr	r3, [pc, #20]	; (80003ac <EXTI9_5_IRQHandler+0xa0>)
 8000396:	695b      	ldr	r3, [r3, #20]
 8000398:	4a04      	ldr	r2, [pc, #16]	; (80003ac <EXTI9_5_IRQHandler+0xa0>)
 800039a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800039e:	6153      	str	r3, [r2, #20]
 80003a0:	4b03      	ldr	r3, [pc, #12]	; (80003b0 <EXTI9_5_IRQHandler+0xa4>)
 80003a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a4:	4798      	blx	r3
}
 80003a6:	bf00      	nop
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	40010400 	.word	0x40010400
 80003b0:	20000024 	.word	0x20000024

080003b4 <EXTI15_10_IRQHandler>:


void EXTI15_10_IRQHandler(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
	//Clear pending register and call IRQ function
		if( EXTI->PR & (1<<10) ) { EXTI->PR |= (1<<10); GP_IRQ_Call_Back[10](); }
 80003b8:	4b2d      	ldr	r3, [pc, #180]	; (8000470 <EXTI15_10_IRQHandler+0xbc>)
 80003ba:	695b      	ldr	r3, [r3, #20]
 80003bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d008      	beq.n	80003d6 <EXTI15_10_IRQHandler+0x22>
 80003c4:	4b2a      	ldr	r3, [pc, #168]	; (8000470 <EXTI15_10_IRQHandler+0xbc>)
 80003c6:	695b      	ldr	r3, [r3, #20]
 80003c8:	4a29      	ldr	r2, [pc, #164]	; (8000470 <EXTI15_10_IRQHandler+0xbc>)
 80003ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003ce:	6153      	str	r3, [r2, #20]
 80003d0:	4b28      	ldr	r3, [pc, #160]	; (8000474 <EXTI15_10_IRQHandler+0xc0>)
 80003d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003d4:	4798      	blx	r3
		if( EXTI->PR & (1<<11) ) { EXTI->PR |= (1<<11); GP_IRQ_Call_Back[11](); }
 80003d6:	4b26      	ldr	r3, [pc, #152]	; (8000470 <EXTI15_10_IRQHandler+0xbc>)
 80003d8:	695b      	ldr	r3, [r3, #20]
 80003da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d008      	beq.n	80003f4 <EXTI15_10_IRQHandler+0x40>
 80003e2:	4b23      	ldr	r3, [pc, #140]	; (8000470 <EXTI15_10_IRQHandler+0xbc>)
 80003e4:	695b      	ldr	r3, [r3, #20]
 80003e6:	4a22      	ldr	r2, [pc, #136]	; (8000470 <EXTI15_10_IRQHandler+0xbc>)
 80003e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80003ec:	6153      	str	r3, [r2, #20]
 80003ee:	4b21      	ldr	r3, [pc, #132]	; (8000474 <EXTI15_10_IRQHandler+0xc0>)
 80003f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003f2:	4798      	blx	r3
		if( EXTI->PR & (1<<12) ) { EXTI->PR |= (1<<12); GP_IRQ_Call_Back[12](); }
 80003f4:	4b1e      	ldr	r3, [pc, #120]	; (8000470 <EXTI15_10_IRQHandler+0xbc>)
 80003f6:	695b      	ldr	r3, [r3, #20]
 80003f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d008      	beq.n	8000412 <EXTI15_10_IRQHandler+0x5e>
 8000400:	4b1b      	ldr	r3, [pc, #108]	; (8000470 <EXTI15_10_IRQHandler+0xbc>)
 8000402:	695b      	ldr	r3, [r3, #20]
 8000404:	4a1a      	ldr	r2, [pc, #104]	; (8000470 <EXTI15_10_IRQHandler+0xbc>)
 8000406:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800040a:	6153      	str	r3, [r2, #20]
 800040c:	4b19      	ldr	r3, [pc, #100]	; (8000474 <EXTI15_10_IRQHandler+0xc0>)
 800040e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000410:	4798      	blx	r3
		if( EXTI->PR & (1<<13) ) { EXTI->PR |= (1<<13); GP_IRQ_Call_Back[13](); }
 8000412:	4b17      	ldr	r3, [pc, #92]	; (8000470 <EXTI15_10_IRQHandler+0xbc>)
 8000414:	695b      	ldr	r3, [r3, #20]
 8000416:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800041a:	2b00      	cmp	r3, #0
 800041c:	d008      	beq.n	8000430 <EXTI15_10_IRQHandler+0x7c>
 800041e:	4b14      	ldr	r3, [pc, #80]	; (8000470 <EXTI15_10_IRQHandler+0xbc>)
 8000420:	695b      	ldr	r3, [r3, #20]
 8000422:	4a13      	ldr	r2, [pc, #76]	; (8000470 <EXTI15_10_IRQHandler+0xbc>)
 8000424:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000428:	6153      	str	r3, [r2, #20]
 800042a:	4b12      	ldr	r3, [pc, #72]	; (8000474 <EXTI15_10_IRQHandler+0xc0>)
 800042c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800042e:	4798      	blx	r3
		if( EXTI->PR & (1<<14) ) { EXTI->PR |= (1<<14); GP_IRQ_Call_Back[14](); }
 8000430:	4b0f      	ldr	r3, [pc, #60]	; (8000470 <EXTI15_10_IRQHandler+0xbc>)
 8000432:	695b      	ldr	r3, [r3, #20]
 8000434:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000438:	2b00      	cmp	r3, #0
 800043a:	d008      	beq.n	800044e <EXTI15_10_IRQHandler+0x9a>
 800043c:	4b0c      	ldr	r3, [pc, #48]	; (8000470 <EXTI15_10_IRQHandler+0xbc>)
 800043e:	695b      	ldr	r3, [r3, #20]
 8000440:	4a0b      	ldr	r2, [pc, #44]	; (8000470 <EXTI15_10_IRQHandler+0xbc>)
 8000442:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000446:	6153      	str	r3, [r2, #20]
 8000448:	4b0a      	ldr	r3, [pc, #40]	; (8000474 <EXTI15_10_IRQHandler+0xc0>)
 800044a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800044c:	4798      	blx	r3
		if( EXTI->PR & (1<<15) ) { EXTI->PR |= (1<<15); GP_IRQ_Call_Back[15](); }
 800044e:	4b08      	ldr	r3, [pc, #32]	; (8000470 <EXTI15_10_IRQHandler+0xbc>)
 8000450:	695b      	ldr	r3, [r3, #20]
 8000452:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000456:	2b00      	cmp	r3, #0
 8000458:	d008      	beq.n	800046c <EXTI15_10_IRQHandler+0xb8>
 800045a:	4b05      	ldr	r3, [pc, #20]	; (8000470 <EXTI15_10_IRQHandler+0xbc>)
 800045c:	695b      	ldr	r3, [r3, #20]
 800045e:	4a04      	ldr	r2, [pc, #16]	; (8000470 <EXTI15_10_IRQHandler+0xbc>)
 8000460:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000464:	6153      	str	r3, [r2, #20]
 8000466:	4b03      	ldr	r3, [pc, #12]	; (8000474 <EXTI15_10_IRQHandler+0xc0>)
 8000468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800046a:	4798      	blx	r3
}
 800046c:	bf00      	nop
 800046e:	bd80      	pop	{r7, pc}
 8000470:	40010400 	.word	0x40010400
 8000474:	20000024 	.word	0x20000024

08000478 <GET_CRLH_position>:

#include "Stm32f103c6_GPIO_Driver.h"


uint8_t GET_CRLH_position(uint16_t PinNumber)
{
 8000478:	b480      	push	{r7}
 800047a:	b083      	sub	sp, #12
 800047c:	af00      	add	r7, sp, #0
 800047e:	4603      	mov	r3, r0
 8000480:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 8000482:	88fb      	ldrh	r3, [r7, #6]
 8000484:	2b80      	cmp	r3, #128	; 0x80
 8000486:	d042      	beq.n	800050e <GET_CRLH_position+0x96>
 8000488:	2b80      	cmp	r3, #128	; 0x80
 800048a:	dc11      	bgt.n	80004b0 <GET_CRLH_position+0x38>
 800048c:	2b08      	cmp	r3, #8
 800048e:	d036      	beq.n	80004fe <GET_CRLH_position+0x86>
 8000490:	2b08      	cmp	r3, #8
 8000492:	dc06      	bgt.n	80004a2 <GET_CRLH_position+0x2a>
 8000494:	2b02      	cmp	r3, #2
 8000496:	d02e      	beq.n	80004f6 <GET_CRLH_position+0x7e>
 8000498:	2b04      	cmp	r3, #4
 800049a:	d02e      	beq.n	80004fa <GET_CRLH_position+0x82>
 800049c:	2b01      	cmp	r3, #1
 800049e:	d028      	beq.n	80004f2 <GET_CRLH_position+0x7a>
 80004a0:	e037      	b.n	8000512 <GET_CRLH_position+0x9a>
 80004a2:	2b20      	cmp	r3, #32
 80004a4:	d02f      	beq.n	8000506 <GET_CRLH_position+0x8e>
 80004a6:	2b40      	cmp	r3, #64	; 0x40
 80004a8:	d02f      	beq.n	800050a <GET_CRLH_position+0x92>
 80004aa:	2b10      	cmp	r3, #16
 80004ac:	d029      	beq.n	8000502 <GET_CRLH_position+0x8a>
 80004ae:	e030      	b.n	8000512 <GET_CRLH_position+0x9a>
 80004b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80004b4:	d023      	beq.n	80004fe <GET_CRLH_position+0x86>
 80004b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80004ba:	dc09      	bgt.n	80004d0 <GET_CRLH_position+0x58>
 80004bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80004c0:	d019      	beq.n	80004f6 <GET_CRLH_position+0x7e>
 80004c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80004c6:	d018      	beq.n	80004fa <GET_CRLH_position+0x82>
 80004c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80004cc:	d011      	beq.n	80004f2 <GET_CRLH_position+0x7a>
 80004ce:	e020      	b.n	8000512 <GET_CRLH_position+0x9a>
 80004d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004d4:	d017      	beq.n	8000506 <GET_CRLH_position+0x8e>
 80004d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004da:	dc03      	bgt.n	80004e4 <GET_CRLH_position+0x6c>
 80004dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80004e0:	d00f      	beq.n	8000502 <GET_CRLH_position+0x8a>
 80004e2:	e016      	b.n	8000512 <GET_CRLH_position+0x9a>
 80004e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80004e8:	d00f      	beq.n	800050a <GET_CRLH_position+0x92>
 80004ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80004ee:	d00e      	beq.n	800050e <GET_CRLH_position+0x96>
 80004f0:	e00f      	b.n	8000512 <GET_CRLH_position+0x9a>
	{

	case GPIO_PIN8:
	case GPIO_PIN0:
		return 0;
 80004f2:	2300      	movs	r3, #0
 80004f4:	e00e      	b.n	8000514 <GET_CRLH_position+0x9c>
		break;

	case GPIO_PIN9:
	case GPIO_PIN1:
		return 4;
 80004f6:	2304      	movs	r3, #4
 80004f8:	e00c      	b.n	8000514 <GET_CRLH_position+0x9c>
		break;

	case GPIO_PIN10:
	case GPIO_PIN2:
		return 8;
 80004fa:	2308      	movs	r3, #8
 80004fc:	e00a      	b.n	8000514 <GET_CRLH_position+0x9c>
		break;

	case GPIO_PIN11:
	case GPIO_PIN3:
		return 12;
 80004fe:	230c      	movs	r3, #12
 8000500:	e008      	b.n	8000514 <GET_CRLH_position+0x9c>
		break;

	case GPIO_PIN12:
	case GPIO_PIN4:
		return 16;
 8000502:	2310      	movs	r3, #16
 8000504:	e006      	b.n	8000514 <GET_CRLH_position+0x9c>
		break;

	case GPIO_PIN13:
	case GPIO_PIN5:
		return 20;
 8000506:	2314      	movs	r3, #20
 8000508:	e004      	b.n	8000514 <GET_CRLH_position+0x9c>
		break;

	case GPIO_PIN14:
	case GPIO_PIN6:
		return 24;
 800050a:	2318      	movs	r3, #24
 800050c:	e002      	b.n	8000514 <GET_CRLH_position+0x9c>
		break;

	case GPIO_PIN15:
	case GPIO_PIN7:
		return 28;
 800050e:	231c      	movs	r3, #28
 8000510:	e000      	b.n	8000514 <GET_CRLH_position+0x9c>
		break;

	}
	return -1;
 8000512:	23ff      	movs	r3, #255	; 0xff
}
 8000514:	4618      	mov	r0, r3
 8000516:	370c      	adds	r7, #12
 8000518:	46bd      	mov	sp, r7
 800051a:	bc80      	pop	{r7}
 800051c:	4770      	bx	lr

0800051e <MCAL_GPIO_Init>:
* @retval 		 - none
* Note			 - stm32f103c6 has a GPIO A,B,C,D,E Modules but LQFP48 package
*                  has only GPIO A,B and part of C,D and not has E.
*/
void MCAL_GPIO_Init(GPIO_TypeDef* GPIOx , GPIO_PinConfig_t* PIN_config)
{
 800051e:	b590      	push	{r4, r7, lr}
 8000520:	b085      	sub	sp, #20
 8000522:	af00      	add	r7, sp, #0
 8000524:	6078      	str	r0, [r7, #4]
 8000526:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) Configure pins 0 >>> 7
	//Port configuration register low (GPIOx_CRH) Configure pins 8 >>> 15

	volatile uint32_t *ConfigRegister = NULL;
 8000528:	2300      	movs	r3, #0
 800052a:	60bb      	str	r3, [r7, #8]
	uint8_t Pin_config = 0;
 800052c:	2300      	movs	r3, #0
 800052e:	73fb      	strb	r3, [r7, #15]

	ConfigRegister = (PIN_config->GPIO_pinNumber < GPIO_PIN8 )? &GPIOx->CRL : &GPIOx->CRH ;
 8000530:	683b      	ldr	r3, [r7, #0]
 8000532:	881b      	ldrh	r3, [r3, #0]
 8000534:	2bff      	cmp	r3, #255	; 0xff
 8000536:	d801      	bhi.n	800053c <MCAL_GPIO_Init+0x1e>
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	e001      	b.n	8000540 <MCAL_GPIO_Init+0x22>
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	3304      	adds	r3, #4
 8000540:	60bb      	str	r3, [r7, #8]

	//Clear  CNFy[1:0] MODEy[1:0]
	*ConfigRegister &= ~(0xF << GET_CRLH_position(PIN_config->GPIO_pinNumber) );
 8000542:	683b      	ldr	r3, [r7, #0]
 8000544:	881b      	ldrh	r3, [r3, #0]
 8000546:	4618      	mov	r0, r3
 8000548:	f7ff ff96 	bl	8000478 <GET_CRLH_position>
 800054c:	4603      	mov	r3, r0
 800054e:	461a      	mov	r2, r3
 8000550:	230f      	movs	r3, #15
 8000552:	4093      	lsls	r3, r2
 8000554:	43da      	mvns	r2, r3
 8000556:	68bb      	ldr	r3, [r7, #8]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	401a      	ands	r2, r3
 800055c:	68bb      	ldr	r3, [r7, #8]
 800055e:	601a      	str	r2, [r3, #0]

	if(PIN_config->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD || PIN_config->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP || PIN_config->GPIO_MODE == GPIO_MODE_OUTPUT_OD || PIN_config->GPIO_MODE == GPIO_MODE_OUTPUT_PP)
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	789b      	ldrb	r3, [r3, #2]
 8000564:	2b07      	cmp	r3, #7
 8000566:	d00b      	beq.n	8000580 <MCAL_GPIO_Init+0x62>
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	789b      	ldrb	r3, [r3, #2]
 800056c:	2b06      	cmp	r3, #6
 800056e:	d007      	beq.n	8000580 <MCAL_GPIO_Init+0x62>
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	789b      	ldrb	r3, [r3, #2]
 8000574:	2b05      	cmp	r3, #5
 8000576:	d003      	beq.n	8000580 <MCAL_GPIO_Init+0x62>
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	789b      	ldrb	r3, [r3, #2]
 800057c:	2b04      	cmp	r3, #4
 800057e:	d10e      	bne.n	800059e <MCAL_GPIO_Init+0x80>
	{
		Pin_config = (((( PIN_config->GPIO_MODE - 4 ) <<2) | (PIN_config->GPIO_OUTPUT_Speed)) & 0x0F );
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	789b      	ldrb	r3, [r3, #2]
 8000584:	3b04      	subs	r3, #4
 8000586:	009b      	lsls	r3, r3, #2
 8000588:	b25a      	sxtb	r2, r3
 800058a:	683b      	ldr	r3, [r7, #0]
 800058c:	78db      	ldrb	r3, [r3, #3]
 800058e:	b25b      	sxtb	r3, r3
 8000590:	4313      	orrs	r3, r2
 8000592:	b25b      	sxtb	r3, r3
 8000594:	b2db      	uxtb	r3, r3
 8000596:	f003 030f 	and.w	r3, r3, #15
 800059a:	73fb      	strb	r3, [r7, #15]
 800059c:	e02c      	b.n	80005f8 <MCAL_GPIO_Init+0xda>
	}
	//if pin is input
	else
	{
		if(PIN_config->GPIO_MODE == GPIO_MODE_Analog || PIN_config->GPIO_MODE == GPIO_MODE_INPUT_FLO)
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	789b      	ldrb	r3, [r3, #2]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d003      	beq.n	80005ae <MCAL_GPIO_Init+0x90>
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	789b      	ldrb	r3, [r3, #2]
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d107      	bne.n	80005be <MCAL_GPIO_Init+0xa0>
		{
			Pin_config = ((( PIN_config->GPIO_MODE ) <<2) & 0x0F );
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	789b      	ldrb	r3, [r3, #2]
 80005b2:	009b      	lsls	r3, r3, #2
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	f003 030f 	and.w	r3, r3, #15
 80005ba:	73fb      	strb	r3, [r7, #15]
 80005bc:	e01c      	b.n	80005f8 <MCAL_GPIO_Init+0xda>
		}
		else if(PIN_config->GPIO_MODE == GPIO_MODE_INPUT_AF)     //consider it as input floating
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	789b      	ldrb	r3, [r3, #2]
 80005c2:	2b08      	cmp	r3, #8
 80005c4:	d102      	bne.n	80005cc <MCAL_GPIO_Init+0xae>
		{
			Pin_config = ((( GPIO_MODE_INPUT_FLO ) <<2) & 0x0F );
 80005c6:	2304      	movs	r3, #4
 80005c8:	73fb      	strb	r3, [r7, #15]
 80005ca:	e015      	b.n	80005f8 <MCAL_GPIO_Init+0xda>
		}
		else
		{
			Pin_config = ((( GPIO_MODE_INPUT_PU ) <<2) & 0x0F );
 80005cc:	2308      	movs	r3, #8
 80005ce:	73fb      	strb	r3, [r7, #15]

			if(PIN_config->GPIO_MODE == GPIO_MODE_INPUT_PU)
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	789b      	ldrb	r3, [r3, #2]
 80005d4:	2b02      	cmp	r3, #2
 80005d6:	d107      	bne.n	80005e8 <MCAL_GPIO_Init+0xca>
			{
				//Table 20. Port bit configuration table --> PxODR register -> 1
				GPIOx->ODR |= (PIN_config->GPIO_pinNumber);
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	68db      	ldr	r3, [r3, #12]
 80005dc:	683a      	ldr	r2, [r7, #0]
 80005de:	8812      	ldrh	r2, [r2, #0]
 80005e0:	431a      	orrs	r2, r3
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	e007      	b.n	80005f8 <MCAL_GPIO_Init+0xda>
			}
			else
			{
				//Table 20. Port bit configuration table --> PxODR register -> 0
				GPIOx->ODR &= ~(PIN_config->GPIO_pinNumber);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	68db      	ldr	r3, [r3, #12]
 80005ec:	683a      	ldr	r2, [r7, #0]
 80005ee:	8812      	ldrh	r2, [r2, #0]
 80005f0:	43d2      	mvns	r2, r2
 80005f2:	401a      	ands	r2, r3
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	60da      	str	r2, [r3, #12]
			}
		}
	}
	//Write on the CRL or CRH
	*ConfigRegister |= ( (Pin_config)<< GET_CRLH_position(PIN_config->GPIO_pinNumber) );
 80005f8:	7bfc      	ldrb	r4, [r7, #15]
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	881b      	ldrh	r3, [r3, #0]
 80005fe:	4618      	mov	r0, r3
 8000600:	f7ff ff3a 	bl	8000478 <GET_CRLH_position>
 8000604:	4603      	mov	r3, r0
 8000606:	fa04 f203 	lsl.w	r2, r4, r3
 800060a:	68bb      	ldr	r3, [r7, #8]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	431a      	orrs	r2, r3
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	601a      	str	r2, [r3, #0]
}
 8000614:	bf00      	nop
 8000616:	3714      	adds	r7, #20
 8000618:	46bd      	mov	sp, r7
 800061a:	bd90      	pop	{r4, r7, pc}

0800061c <MCAL_RCC_GetSysCLK>:
1111: SYSCLK divided by 512
 */
const uint8_t AHB_Prescaler[17U]= {0,0,0,0,0,0,0,0,1,2,3,4,6,7,8,9};

uint32_t MCAL_RCC_GetSysCLK(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
00: HSI oscillator used as system clock
01: HSE oscillator used as system clock
10: PLL used as system clock
11: not applicable
*/
	switch( (RCC->CFGR >>2)&0b11 )
 8000620:	4b08      	ldr	r3, [pc, #32]	; (8000644 <MCAL_RCC_GetSysCLK+0x28>)
 8000622:	685b      	ldr	r3, [r3, #4]
 8000624:	089b      	lsrs	r3, r3, #2
 8000626:	f003 0303 	and.w	r3, r3, #3
 800062a:	2b00      	cmp	r3, #0
 800062c:	d002      	beq.n	8000634 <MCAL_RCC_GetSysCLK+0x18>
 800062e:	2b01      	cmp	r3, #1
 8000630:	d002      	beq.n	8000638 <MCAL_RCC_GetSysCLK+0x1c>
 8000632:	e003      	b.n	800063c <MCAL_RCC_GetSysCLK+0x20>
	{
	case 0:
		return HSI_CLK;
 8000634:	4b04      	ldr	r3, [pc, #16]	; (8000648 <MCAL_RCC_GetSysCLK+0x2c>)
 8000636:	e001      	b.n	800063c <MCAL_RCC_GetSysCLK+0x20>
		break;

	case 1:
		return HSE_CLK;
 8000638:	4b04      	ldr	r3, [pc, #16]	; (800064c <MCAL_RCC_GetSysCLK+0x30>)
 800063a:	e7ff      	b.n	800063c <MCAL_RCC_GetSysCLK+0x20>
		break;

	}
}
 800063c:	4618      	mov	r0, r3
 800063e:	46bd      	mov	sp, r7
 8000640:	bc80      	pop	{r7}
 8000642:	4770      	bx	lr
 8000644:	40021000 	.word	0x40021000
 8000648:	007a1200 	.word	0x007a1200
 800064c:	00f42400 	.word	0x00f42400

08000650 <MCAL_RCC_GetPCLKFreq>:

uint32_t MCAL_RCC_GetPCLKFreq(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
	//Bits 7:4 HPRE: AHB prescaler
	return( MCAL_RCC_GetSysCLK() >> (AHB_Prescaler[( ( (RCC->CFGR)>>4 ) &0b1111 )]) );
 8000654:	f7ff ffe2 	bl	800061c <MCAL_RCC_GetSysCLK>
 8000658:	4601      	mov	r1, r0
 800065a:	4b05      	ldr	r3, [pc, #20]	; (8000670 <MCAL_RCC_GetPCLKFreq+0x20>)
 800065c:	685b      	ldr	r3, [r3, #4]
 800065e:	091b      	lsrs	r3, r3, #4
 8000660:	f003 030f 	and.w	r3, r3, #15
 8000664:	4a03      	ldr	r2, [pc, #12]	; (8000674 <MCAL_RCC_GetPCLKFreq+0x24>)
 8000666:	5cd3      	ldrb	r3, [r2, r3]
 8000668:	fa21 f303 	lsr.w	r3, r1, r3
}
 800066c:	4618      	mov	r0, r3
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40021000 	.word	0x40021000
 8000674:	08000a4c 	.word	0x08000a4c

08000678 <MCAL_RCC_GetPCLK1Freq>:

uint32_t MCAL_RCC_GetPCLK1Freq(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
	//Bits 10:8 PPRE1: APB low-speed prescaler (APB1)
	return ( MCAL_RCC_GetPCLKFreq() >> (APB_Prescaler[( ( (RCC->CFGR)>>8 ) &0b111 )]) );
 800067c:	f7ff ffe8 	bl	8000650 <MCAL_RCC_GetPCLKFreq>
 8000680:	4601      	mov	r1, r0
 8000682:	4b05      	ldr	r3, [pc, #20]	; (8000698 <MCAL_RCC_GetPCLK1Freq+0x20>)
 8000684:	685b      	ldr	r3, [r3, #4]
 8000686:	0a1b      	lsrs	r3, r3, #8
 8000688:	f003 0307 	and.w	r3, r3, #7
 800068c:	4a03      	ldr	r2, [pc, #12]	; (800069c <MCAL_RCC_GetPCLK1Freq+0x24>)
 800068e:	5cd3      	ldrb	r3, [r2, r3]
 8000690:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000694:	4618      	mov	r0, r3
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40021000 	.word	0x40021000
 800069c:	08000a44 	.word	0x08000a44

080006a0 <MCAL_RCC_GetPCLK2Freq>:

uint32_t MCAL_RCC_GetPCLK2Freq(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	//Bits 13:11 PPRE2: APB high-speed prescaler (APB2)
	return ( MCAL_RCC_GetPCLKFreq() >> (APB_Prescaler[( ( (RCC->CFGR)>>11 ) &0b111 )]) );
 80006a4:	f7ff ffd4 	bl	8000650 <MCAL_RCC_GetPCLKFreq>
 80006a8:	4601      	mov	r1, r0
 80006aa:	4b05      	ldr	r3, [pc, #20]	; (80006c0 <MCAL_RCC_GetPCLK2Freq+0x20>)
 80006ac:	685b      	ldr	r3, [r3, #4]
 80006ae:	0adb      	lsrs	r3, r3, #11
 80006b0:	f003 0307 	and.w	r3, r3, #7
 80006b4:	4a03      	ldr	r2, [pc, #12]	; (80006c4 <MCAL_RCC_GetPCLK2Freq+0x24>)
 80006b6:	5cd3      	ldrb	r3, [r2, r3]
 80006b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80006bc:	4618      	mov	r0, r3
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40021000 	.word	0x40021000
 80006c4:	08000a44 	.word	0x08000a44

080006c8 <MCAL_UART_init>:
 * @param [in]    - UART_Config: all UART configuration
 * @retval        - none
 * Note           - none
 */
void MCAL_UART_init(USART_TypeDef* USARTx , UART_Config_t* UART_Config)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
 80006d0:	6039      	str	r1, [r7, #0]
	Global_UART_Config = UART_Config;
 80006d2:	4a56      	ldr	r2, [pc, #344]	; (800082c <MCAL_UART_init+0x164>)
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	6013      	str	r3, [r2, #0]
	uint32_t P_clk ;

	//enable clock
	if(USARTx == USART1)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	4a55      	ldr	r2, [pc, #340]	; (8000830 <MCAL_UART_init+0x168>)
 80006dc:	4293      	cmp	r3, r2
 80006de:	d106      	bne.n	80006ee <MCAL_UART_init+0x26>
		RCC_USART1_CLK_EN;
 80006e0:	4b54      	ldr	r3, [pc, #336]	; (8000834 <MCAL_UART_init+0x16c>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	4a53      	ldr	r2, [pc, #332]	; (8000834 <MCAL_UART_init+0x16c>)
 80006e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ea:	6193      	str	r3, [r2, #24]
 80006ec:	e014      	b.n	8000718 <MCAL_UART_init+0x50>

	else if(USARTx == USART2)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	4a51      	ldr	r2, [pc, #324]	; (8000838 <MCAL_UART_init+0x170>)
 80006f2:	4293      	cmp	r3, r2
 80006f4:	d106      	bne.n	8000704 <MCAL_UART_init+0x3c>
		RCC_USART2_CLK_EN;
 80006f6:	4b4f      	ldr	r3, [pc, #316]	; (8000834 <MCAL_UART_init+0x16c>)
 80006f8:	69db      	ldr	r3, [r3, #28]
 80006fa:	4a4e      	ldr	r2, [pc, #312]	; (8000834 <MCAL_UART_init+0x16c>)
 80006fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000700:	61d3      	str	r3, [r2, #28]
 8000702:	e009      	b.n	8000718 <MCAL_UART_init+0x50>

	else if(USARTx == USART3)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	4a4d      	ldr	r2, [pc, #308]	; (800083c <MCAL_UART_init+0x174>)
 8000708:	4293      	cmp	r3, r2
 800070a:	d105      	bne.n	8000718 <MCAL_UART_init+0x50>
		RCC_USART3_CLK_EN;
 800070c:	4b49      	ldr	r3, [pc, #292]	; (8000834 <MCAL_UART_init+0x16c>)
 800070e:	69db      	ldr	r3, [r3, #28]
 8000710:	4a48      	ldr	r2, [pc, #288]	; (8000834 <MCAL_UART_init+0x16c>)
 8000712:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000716:	61d3      	str	r3, [r2, #28]

	//Enable UART Module
	USARTx->CR1 |= (1<<13);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	68db      	ldr	r3, [r3, #12]
 800071c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	60da      	str	r2, [r3, #12]

	//Enable UART Tx or Rx based on UART_MODE
	USARTx->CR1 |= UART_Config->UART_Mode;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	68db      	ldr	r3, [r3, #12]
 8000728:	683a      	ldr	r2, [r7, #0]
 800072a:	7812      	ldrb	r2, [r2, #0]
 800072c:	431a      	orrs	r2, r3
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	60da      	str	r2, [r3, #12]

	//Payload length based on UART payload length
	USARTx->CR1 |= UART_Config->UART_Payload_Length;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	68db      	ldr	r3, [r3, #12]
 8000736:	683a      	ldr	r2, [r7, #0]
 8000738:	7a12      	ldrb	r2, [r2, #8]
 800073a:	431a      	orrs	r2, r3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	60da      	str	r2, [r3, #12]

	//Configure parity based on UART_parity
	USARTx->CR1 |= UART_Config->UART_Parity;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	68db      	ldr	r3, [r3, #12]
 8000744:	683a      	ldr	r2, [r7, #0]
 8000746:	7a52      	ldrb	r2, [r2, #9]
 8000748:	431a      	orrs	r2, r3
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	60da      	str	r2, [r3, #12]

	//Configure stop bits
	USARTx->CR2 |= UART_Config->UART_StopBits;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	691b      	ldr	r3, [r3, #16]
 8000752:	683a      	ldr	r2, [r7, #0]
 8000754:	7a92      	ldrb	r2, [r2, #10]
 8000756:	431a      	orrs	r2, r3
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	611a      	str	r2, [r3, #16]

	//hardware flow control
	USARTx->CR3 |= UART_Config->UART_FlowCtrl;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	695b      	ldr	r3, [r3, #20]
 8000760:	683a      	ldr	r2, [r7, #0]
 8000762:	7ad2      	ldrb	r2, [r2, #11]
 8000764:	431a      	orrs	r2, r3
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	615a      	str	r2, [r3, #20]

	//Baud rate
	if(USARTx == USART1)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	4a30      	ldr	r2, [pc, #192]	; (8000830 <MCAL_UART_init+0x168>)
 800076e:	4293      	cmp	r3, r2
 8000770:	d103      	bne.n	800077a <MCAL_UART_init+0xb2>
		P_clk =  MCAL_RCC_GetPCLK2Freq();
 8000772:	f7ff ff95 	bl	80006a0 <MCAL_RCC_GetPCLK2Freq>
 8000776:	60f8      	str	r0, [r7, #12]
 8000778:	e002      	b.n	8000780 <MCAL_UART_init+0xb8>
	else
		P_clk =  MCAL_RCC_GetPCLK1Freq();
 800077a:	f7ff ff7d 	bl	8000678 <MCAL_RCC_GetPCLK1Freq>
 800077e:	60f8      	str	r0, [r7, #12]

	USARTx->BRR = UART_BRR_Register(P_clk ,UART_Config->UART_BaudRate);
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	685b      	ldr	r3, [r3, #4]
 8000784:	011b      	lsls	r3, r3, #4
 8000786:	68fa      	ldr	r2, [r7, #12]
 8000788:	fbb2 f3f3 	udiv	r3, r2, r3
 800078c:	0119      	lsls	r1, r3, #4
 800078e:	68fa      	ldr	r2, [r7, #12]
 8000790:	4613      	mov	r3, r2
 8000792:	009b      	lsls	r3, r3, #2
 8000794:	4413      	add	r3, r2
 8000796:	009a      	lsls	r2, r3, #2
 8000798:	441a      	add	r2, r3
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	685b      	ldr	r3, [r3, #4]
 800079e:	009b      	lsls	r3, r3, #2
 80007a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	685b      	ldr	r3, [r3, #4]
 80007a8:	011b      	lsls	r3, r3, #4
 80007aa:	68f8      	ldr	r0, [r7, #12]
 80007ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80007b0:	2064      	movs	r0, #100	; 0x64
 80007b2:	fb00 f303 	mul.w	r3, r0, r3
 80007b6:	1ad3      	subs	r3, r2, r3
 80007b8:	011b      	lsls	r3, r3, #4
 80007ba:	4a21      	ldr	r2, [pc, #132]	; (8000840 <MCAL_UART_init+0x178>)
 80007bc:	fba2 2303 	umull	r2, r3, r2, r3
 80007c0:	095b      	lsrs	r3, r3, #5
 80007c2:	f003 030f 	and.w	r3, r3, #15
 80007c6:	ea41 0203 	orr.w	r2, r1, r3
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	609a      	str	r2, [r3, #8]


	//ENABLE/DISABLE interrupt
	if(UART_Config->UART_IRQ_Enable != UART_IRQ_Enable_none)
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	7b1b      	ldrb	r3, [r3, #12]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d026      	beq.n	8000824 <MCAL_UART_init+0x15c>
	{
		USARTx->CR1 |= UART_Config->UART_IRQ_Enable;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	68db      	ldr	r3, [r3, #12]
 80007da:	683a      	ldr	r2, [r7, #0]
 80007dc:	7b12      	ldrb	r2, [r2, #12]
 80007de:	431a      	orrs	r2, r3
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	60da      	str	r2, [r3, #12]

		//Enable NVIC
		if(USARTx == USART1)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	4a12      	ldr	r2, [pc, #72]	; (8000830 <MCAL_UART_init+0x168>)
 80007e8:	4293      	cmp	r3, r2
 80007ea:	d106      	bne.n	80007fa <MCAL_UART_init+0x132>
			//NVIC_IRQ37_USART1_EN;
			*((volatile uint32_t *)0xE000E104UL) |= (1<<(37-32));
 80007ec:	4b15      	ldr	r3, [pc, #84]	; (8000844 <MCAL_UART_init+0x17c>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a14      	ldr	r2, [pc, #80]	; (8000844 <MCAL_UART_init+0x17c>)
 80007f2:	f043 0320 	orr.w	r3, r3, #32
 80007f6:	6013      	str	r3, [r2, #0]

		else if(USARTx == USART3)
			*((volatile uint32_t *)0xE000E104UL) |= (1<<(39-32));
	}

}
 80007f8:	e014      	b.n	8000824 <MCAL_UART_init+0x15c>
		else if(USARTx == USART2)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4a0e      	ldr	r2, [pc, #56]	; (8000838 <MCAL_UART_init+0x170>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d106      	bne.n	8000810 <MCAL_UART_init+0x148>
			*((volatile uint32_t *)0xE000E104UL) |= (1<<(38-32));
 8000802:	4b10      	ldr	r3, [pc, #64]	; (8000844 <MCAL_UART_init+0x17c>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4a0f      	ldr	r2, [pc, #60]	; (8000844 <MCAL_UART_init+0x17c>)
 8000808:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800080c:	6013      	str	r3, [r2, #0]
}
 800080e:	e009      	b.n	8000824 <MCAL_UART_init+0x15c>
		else if(USARTx == USART3)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	4a0a      	ldr	r2, [pc, #40]	; (800083c <MCAL_UART_init+0x174>)
 8000814:	4293      	cmp	r3, r2
 8000816:	d105      	bne.n	8000824 <MCAL_UART_init+0x15c>
			*((volatile uint32_t *)0xE000E104UL) |= (1<<(39-32));
 8000818:	4b0a      	ldr	r3, [pc, #40]	; (8000844 <MCAL_UART_init+0x17c>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a09      	ldr	r2, [pc, #36]	; (8000844 <MCAL_UART_init+0x17c>)
 800081e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000822:	6013      	str	r3, [r2, #0]
}
 8000824:	bf00      	nop
 8000826:	3710      	adds	r7, #16
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	2000001c 	.word	0x2000001c
 8000830:	40013800 	.word	0x40013800
 8000834:	40021000 	.word	0x40021000
 8000838:	40004400 	.word	0x40004400
 800083c:	40004800 	.word	0x40004800
 8000840:	51eb851f 	.word	0x51eb851f
 8000844:	e000e104 	.word	0xe000e104

08000848 <MCAL_UART_GPIO_SetPins>:
		NVIC_IRQ39_USART3_DIS;
	}
}

void MCAL_UART_GPIO_SetPins(USART_TypeDef* USARTx)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PinCfg;

	if(USARTx == USART1)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	4a2b      	ldr	r2, [pc, #172]	; (8000900 <MCAL_UART_GPIO_SetPins+0xb8>)
 8000854:	4293      	cmp	r3, r2
 8000856:	d118      	bne.n	800088a <MCAL_UART_GPIO_SetPins+0x42>
	{
		//PA9 --> Tx
		PinCfg.GPIO_pinNumber = GPIO_PIN9;
 8000858:	f44f 7300 	mov.w	r3, #512	; 0x200
 800085c:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 800085e:	2306      	movs	r3, #6
 8000860:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
 8000862:	2302      	movs	r3, #2
 8000864:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA , &PinCfg );
 8000866:	f107 030c 	add.w	r3, r7, #12
 800086a:	4619      	mov	r1, r3
 800086c:	4825      	ldr	r0, [pc, #148]	; (8000904 <MCAL_UART_GPIO_SetPins+0xbc>)
 800086e:	f7ff fe56 	bl	800051e <MCAL_GPIO_Init>

		//PA10 --> Rx
		PinCfg.GPIO_pinNumber = GPIO_PIN10;
 8000872:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000876:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000878:	2301      	movs	r3, #1
 800087a:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA , &PinCfg );
 800087c:	f107 030c 	add.w	r3, r7, #12
 8000880:	4619      	mov	r1, r3
 8000882:	4820      	ldr	r0, [pc, #128]	; (8000904 <MCAL_UART_GPIO_SetPins+0xbc>)
 8000884:	f7ff fe4b 	bl	800051e <MCAL_GPIO_Init>
			MCAL_GPIO_Init(GPIOB , &PinCfg );
		}

	}

}
 8000888:	e036      	b.n	80008f8 <MCAL_UART_GPIO_SetPins+0xb0>
	else if(USARTx == USART2)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	4a1e      	ldr	r2, [pc, #120]	; (8000908 <MCAL_UART_GPIO_SetPins+0xc0>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d116      	bne.n	80008c0 <MCAL_UART_GPIO_SetPins+0x78>
		PinCfg.GPIO_pinNumber = GPIO_PIN2;
 8000892:	2304      	movs	r3, #4
 8000894:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000896:	2306      	movs	r3, #6
 8000898:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
 800089a:	2302      	movs	r3, #2
 800089c:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA , &PinCfg );
 800089e:	f107 030c 	add.w	r3, r7, #12
 80008a2:	4619      	mov	r1, r3
 80008a4:	4817      	ldr	r0, [pc, #92]	; (8000904 <MCAL_UART_GPIO_SetPins+0xbc>)
 80008a6:	f7ff fe3a 	bl	800051e <MCAL_GPIO_Init>
		PinCfg.GPIO_pinNumber = GPIO_PIN3;
 80008aa:	2308      	movs	r3, #8
 80008ac:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 80008ae:	2301      	movs	r3, #1
 80008b0:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA , &PinCfg );
 80008b2:	f107 030c 	add.w	r3, r7, #12
 80008b6:	4619      	mov	r1, r3
 80008b8:	4812      	ldr	r0, [pc, #72]	; (8000904 <MCAL_UART_GPIO_SetPins+0xbc>)
 80008ba:	f7ff fe30 	bl	800051e <MCAL_GPIO_Init>
}
 80008be:	e01b      	b.n	80008f8 <MCAL_UART_GPIO_SetPins+0xb0>
	else if(USARTx == USART3)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	4a12      	ldr	r2, [pc, #72]	; (800090c <MCAL_UART_GPIO_SetPins+0xc4>)
 80008c4:	4293      	cmp	r3, r2
 80008c6:	d117      	bne.n	80008f8 <MCAL_UART_GPIO_SetPins+0xb0>
		PinCfg.GPIO_pinNumber = GPIO_PIN10;
 80008c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008cc:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 80008ce:	2306      	movs	r3, #6
 80008d0:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10M;
 80008d2:	2302      	movs	r3, #2
 80008d4:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB , &PinCfg );
 80008d6:	f107 030c 	add.w	r3, r7, #12
 80008da:	4619      	mov	r1, r3
 80008dc:	480c      	ldr	r0, [pc, #48]	; (8000910 <MCAL_UART_GPIO_SetPins+0xc8>)
 80008de:	f7ff fe1e 	bl	800051e <MCAL_GPIO_Init>
		PinCfg.GPIO_pinNumber = GPIO_PIN11;
 80008e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80008e6:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 80008e8:	2301      	movs	r3, #1
 80008ea:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB , &PinCfg );
 80008ec:	f107 030c 	add.w	r3, r7, #12
 80008f0:	4619      	mov	r1, r3
 80008f2:	4807      	ldr	r0, [pc, #28]	; (8000910 <MCAL_UART_GPIO_SetPins+0xc8>)
 80008f4:	f7ff fe13 	bl	800051e <MCAL_GPIO_Init>
}
 80008f8:	bf00      	nop
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40013800 	.word	0x40013800
 8000904:	40010800 	.word	0x40010800
 8000908:	40004400 	.word	0x40004400
 800090c:	40004800 	.word	0x40004800
 8000910:	40010c00 	.word	0x40010c00

08000914 <MCAL_UART_Send_Data>:
 * @param [in]    - Polling: Enable polling or disable it
 * @retval        - none
 * Note           - none
 */
void MCAL_UART_Send_Data(USART_TypeDef* USARTx , uint16_t* p_TxBuffer , Polling_mechanism Polling)
{
 8000914:	b480      	push	{r7}
 8000916:	b085      	sub	sp, #20
 8000918:	af00      	add	r7, sp, #0
 800091a:	60f8      	str	r0, [r7, #12]
 800091c:	60b9      	str	r1, [r7, #8]
 800091e:	4613      	mov	r3, r2
 8000920:	71fb      	strb	r3, [r7, #7]
	if(Polling == Polling_EN)
 8000922:	79fb      	ldrb	r3, [r7, #7]
 8000924:	2b01      	cmp	r3, #1
 8000926:	d107      	bne.n	8000938 <MCAL_UART_Send_Data+0x24>
		while(((USARTx->SR >>7)&1) == 0);
 8000928:	bf00      	nop
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	09db      	lsrs	r3, r3, #7
 8000930:	f003 0301 	and.w	r3, r3, #1
 8000934:	2b00      	cmp	r3, #0
 8000936:	d0f8      	beq.n	800092a <MCAL_UART_Send_Data+0x16>
	{
		USARTx->DR = ((*p_TxBuffer) & (uint16_t)0x1FF );
	}
	else
	{
		USARTx->DR = ((*p_TxBuffer) & (uint8_t)0xFF );
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	881b      	ldrh	r3, [r3, #0]
 800093c:	b2da      	uxtb	r2, r3
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	605a      	str	r2, [r3, #4]
	}
}
 8000942:	bf00      	nop
 8000944:	3714      	adds	r7, #20
 8000946:	46bd      	mov	sp, r7
 8000948:	bc80      	pop	{r7}
 800094a:	4770      	bx	lr

0800094c <MCAL_UART_Receive_Data>:


void MCAL_UART_Receive_Data(USART_TypeDef* USARTx , uint16_t* p_TxBuffer , Polling_mechanism Polling)
{
 800094c:	b480      	push	{r7}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	60f8      	str	r0, [r7, #12]
 8000954:	60b9      	str	r1, [r7, #8]
 8000956:	4613      	mov	r3, r2
 8000958:	71fb      	strb	r3, [r7, #7]
	if(Polling == Polling_EN)
 800095a:	79fb      	ldrb	r3, [r7, #7]
 800095c:	2b01      	cmp	r3, #1
 800095e:	d107      	bne.n	8000970 <MCAL_UART_Receive_Data+0x24>
		while(((USARTx->SR >>5)&1) == 0);
 8000960:	bf00      	nop
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	095b      	lsrs	r3, r3, #5
 8000968:	f003 0301 	and.w	r3, r3, #1
 800096c:	2b00      	cmp	r3, #0
 800096e:	d0f8      	beq.n	8000962 <MCAL_UART_Receive_Data+0x16>
			*((uint16_t*)p_TxBuffer) = ( USARTx->DR  & (uint16_t)0xFF );
		}
	}
	else
	{
		if(Global_UART_Config->UART_Parity == UART_Parity_none)
 8000970:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <MCAL_UART_Receive_Data+0x58>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	7a5b      	ldrb	r3, [r3, #9]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d107      	bne.n	800098a <MCAL_UART_Receive_Data+0x3e>
		{
			*((uint16_t*)p_TxBuffer) = ( USARTx->DR  & (uint16_t)0xFF );
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	685b      	ldr	r3, [r3, #4]
 800097e:	b29b      	uxth	r3, r3
 8000980:	b2db      	uxtb	r3, r3
 8000982:	b29a      	uxth	r2, r3
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	801a      	strh	r2, [r3, #0]
		else
		{
			*((uint16_t*)p_TxBuffer) = ( USARTx->DR  & (uint16_t)0x7F );
		}
	}
}
 8000988:	e007      	b.n	800099a <MCAL_UART_Receive_Data+0x4e>
			*((uint16_t*)p_TxBuffer) = ( USARTx->DR  & (uint16_t)0x7F );
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	b29b      	uxth	r3, r3
 8000990:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000994:	b29a      	uxth	r2, r3
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	801a      	strh	r2, [r3, #0]
}
 800099a:	bf00      	nop
 800099c:	3714      	adds	r7, #20
 800099e:	46bd      	mov	sp, r7
 80009a0:	bc80      	pop	{r7}
 80009a2:	4770      	bx	lr
 80009a4:	2000001c 	.word	0x2000001c

080009a8 <USART1_IRQHandler>:


//ISR

void USART1_IRQHandler(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
	/* USART1 global interrupt */
	Global_UART_Config->P_IRQ_callback ();
 80009ac:	4b02      	ldr	r3, [pc, #8]	; (80009b8 <USART1_IRQHandler+0x10>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	691b      	ldr	r3, [r3, #16]
 80009b2:	4798      	blx	r3
}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	2000001c 	.word	0x2000001c

080009bc <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
	/* USART2 global interrupt */
	Global_UART_Config->P_IRQ_callback ();
 80009c0:	4b02      	ldr	r3, [pc, #8]	; (80009cc <USART2_IRQHandler+0x10>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	691b      	ldr	r3, [r3, #16]
 80009c6:	4798      	blx	r3
}
 80009c8:	bf00      	nop
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	2000001c 	.word	0x2000001c

080009d0 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
	/* USART3 global interrupt */
	Global_UART_Config->P_IRQ_callback ();
 80009d4:	4b02      	ldr	r3, [pc, #8]	; (80009e0 <USART3_IRQHandler+0x10>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	691b      	ldr	r3, [r3, #16]
 80009da:	4798      	blx	r3
}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	2000001c 	.word	0x2000001c

080009e4 <__libc_init_array>:
 80009e4:	b570      	push	{r4, r5, r6, lr}
 80009e6:	2500      	movs	r5, #0
 80009e8:	4e0c      	ldr	r6, [pc, #48]	; (8000a1c <__libc_init_array+0x38>)
 80009ea:	4c0d      	ldr	r4, [pc, #52]	; (8000a20 <__libc_init_array+0x3c>)
 80009ec:	1ba4      	subs	r4, r4, r6
 80009ee:	10a4      	asrs	r4, r4, #2
 80009f0:	42a5      	cmp	r5, r4
 80009f2:	d109      	bne.n	8000a08 <__libc_init_array+0x24>
 80009f4:	f000 f81a 	bl	8000a2c <_init>
 80009f8:	2500      	movs	r5, #0
 80009fa:	4e0a      	ldr	r6, [pc, #40]	; (8000a24 <__libc_init_array+0x40>)
 80009fc:	4c0a      	ldr	r4, [pc, #40]	; (8000a28 <__libc_init_array+0x44>)
 80009fe:	1ba4      	subs	r4, r4, r6
 8000a00:	10a4      	asrs	r4, r4, #2
 8000a02:	42a5      	cmp	r5, r4
 8000a04:	d105      	bne.n	8000a12 <__libc_init_array+0x2e>
 8000a06:	bd70      	pop	{r4, r5, r6, pc}
 8000a08:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a0c:	4798      	blx	r3
 8000a0e:	3501      	adds	r5, #1
 8000a10:	e7ee      	b.n	80009f0 <__libc_init_array+0xc>
 8000a12:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a16:	4798      	blx	r3
 8000a18:	3501      	adds	r5, #1
 8000a1a:	e7f2      	b.n	8000a02 <__libc_init_array+0x1e>
 8000a1c:	08000a60 	.word	0x08000a60
 8000a20:	08000a60 	.word	0x08000a60
 8000a24:	08000a60 	.word	0x08000a60
 8000a28:	08000a64 	.word	0x08000a64

08000a2c <_init>:
 8000a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a2e:	bf00      	nop
 8000a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a32:	bc08      	pop	{r3}
 8000a34:	469e      	mov	lr, r3
 8000a36:	4770      	bx	lr

08000a38 <_fini>:
 8000a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a3a:	bf00      	nop
 8000a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a3e:	bc08      	pop	{r3}
 8000a40:	469e      	mov	lr, r3
 8000a42:	4770      	bx	lr
