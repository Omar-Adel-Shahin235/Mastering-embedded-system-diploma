
Unit7_lesson2_section.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003b6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000003b6  0000042a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000043a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000046c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  000004a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000dad  00000000  00000000  00000550  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007b7  00000000  00000000  000012fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000076f  00000000  00000000  00001ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000134  00000000  00000000  00002224  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000443  00000000  00000000  00002358  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000598  00000000  00000000  0000279b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00002d33  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 eb       	ldi	r30, 0xB6	; 182
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 c0 01 	call	0x380	; 0x380 <main>
  7a:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <Key_pad_init>:
int Key_pad_column[4]= {C0 , C1 , C2 , C3};

void Key_pad_init()
{
	//R0 TO R4 as input
	Key_pad_Dir_PORT &= ~((1<<R0) | (1<<R1) | (1<<R2) | (1<<R3));
  82:	81 b3       	in	r24, 0x11	; 17
  84:	80 7f       	andi	r24, 0xF0	; 240
  86:	81 bb       	out	0x11, r24	; 17
	
	//C0 TO C4 as output
	Key_pad_Dir_PORT |= ((1<<C0) | (1<<C1) | (1<<C2) | (1<<C3));
  88:	81 b3       	in	r24, 0x11	; 17
  8a:	80 6f       	ori	r24, 0xF0	; 240
  8c:	81 bb       	out	0x11, r24	; 17
	
	//set R0 to R4 as pull up and C0 to C4 to have output 1
	Key_pad_PORT = 0xFF;
  8e:	8f ef       	ldi	r24, 0xFF	; 255
  90:	82 bb       	out	0x12, r24	; 18
  92:	08 95       	ret

00000094 <Key_pad_get_char>:
}

char Key_pad_get_char()
{
  94:	0f 93       	push	r16
  96:	1f 93       	push	r17
  98:	cf 93       	push	r28
  9a:	df 93       	push	r29
  9c:	a0 e6       	ldi	r26, 0x60	; 96
  9e:	b0 e0       	ldi	r27, 0x00	; 0
	int i,j;
	
	for(i=0 ; i<4 ; i++)
  a0:	40 e0       	ldi	r20, 0x00	; 0
  a2:	50 e0       	ldi	r21, 0x00	; 0
	{
		Key_pad_PORT |= (1<<C0) | (1<<C1) | (1<<C2) | (1<<C3);
		
		//Column to have output 0
		Key_pad_PORT &= ~(1<<Key_pad_column[i]);
  a4:	01 e0       	ldi	r16, 0x01	; 1
  a6:	10 e0       	ldi	r17, 0x00	; 0
{
	int i,j;
	
	for(i=0 ; i<4 ; i++)
	{
		Key_pad_PORT |= (1<<C0) | (1<<C1) | (1<<C2) | (1<<C3);
  a8:	82 b3       	in	r24, 0x12	; 18
  aa:	80 6f       	ori	r24, 0xF0	; 240
  ac:	82 bb       	out	0x12, r24	; 18
		
		//Column to have output 0
		Key_pad_PORT &= ~(1<<Key_pad_column[i]);
  ae:	92 b3       	in	r25, 0x12	; 18
  b0:	8c 91       	ld	r24, X
  b2:	12 96       	adiw	r26, 0x02	; 2
  b4:	98 01       	movw	r18, r16
  b6:	02 c0       	rjmp	.+4      	; 0xbc <Key_pad_get_char+0x28>
  b8:	22 0f       	add	r18, r18
  ba:	33 1f       	adc	r19, r19
  bc:	8a 95       	dec	r24
  be:	e2 f7       	brpl	.-8      	; 0xb8 <Key_pad_get_char+0x24>
  c0:	82 2f       	mov	r24, r18
  c2:	80 95       	com	r24
  c4:	89 23       	and	r24, r25
  c6:	82 bb       	out	0x12, r24	; 18
  c8:	e8 e6       	ldi	r30, 0x68	; 104
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	c1 e0       	ldi	r28, 0x01	; 1
  ce:	d0 e0       	ldi	r29, 0x00	; 0
  d0:	60 e0       	ldi	r22, 0x00	; 0
  d2:	70 e0       	ldi	r23, 0x00	; 0
  d4:	03 c0       	rjmp	.+6      	; 0xdc <Key_pad_get_char+0x48>
  d6:	6f 5f       	subi	r22, 0xFF	; 255
  d8:	7f 4f       	sbci	r23, 0xFF	; 255
  da:	21 96       	adiw	r28, 0x01	; 1
		//_delay_ms(30);
		for(j=0 ; j<4 ; j++)
		{
			if( !(Key_pad_PIN & (1<<Key_pad_rows[j])))
  dc:	80 b3       	in	r24, 0x10	; 16
  de:	20 81       	ld	r18, Z
  e0:	32 96       	adiw	r30, 0x02	; 2
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	02 2e       	mov	r0, r18
  e6:	02 c0       	rjmp	.+4      	; 0xec <Key_pad_get_char+0x58>
  e8:	95 95       	asr	r25
  ea:	87 95       	ror	r24
  ec:	0a 94       	dec	r0
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <Key_pad_get_char+0x54>
  f0:	80 fd       	sbrc	r24, 0
  f2:	50 c0       	rjmp	.+160    	; 0x194 <Key_pad_get_char+0x100>
  f4:	c8 01       	movw	r24, r16
  f6:	02 c0       	rjmp	.+4      	; 0xfc <Key_pad_get_char+0x68>
  f8:	88 0f       	add	r24, r24
  fa:	99 1f       	adc	r25, r25
  fc:	2a 95       	dec	r18
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <Key_pad_get_char+0x64>
 100:	9c 01       	movw	r18, r24
			{
				while( !(Key_pad_PIN & (1<<Key_pad_rows[j])));
 102:	80 b3       	in	r24, 0x10	; 16
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	82 23       	and	r24, r18
 108:	93 23       	and	r25, r19
 10a:	89 2b       	or	r24, r25
 10c:	d1 f3       	breq	.-12     	; 0x102 <Key_pad_get_char+0x6e>
				switch(i)
 10e:	41 30       	cpi	r20, 0x01	; 1
 110:	51 05       	cpc	r21, r1
 112:	c9 f0       	breq	.+50     	; 0x146 <Key_pad_get_char+0xb2>
 114:	24 f4       	brge	.+8      	; 0x11e <Key_pad_get_char+0x8a>
 116:	41 15       	cp	r20, r1
 118:	51 05       	cpc	r21, r1
 11a:	41 f0       	breq	.+16     	; 0x12c <Key_pad_get_char+0x98>
 11c:	3b c0       	rjmp	.+118    	; 0x194 <Key_pad_get_char+0x100>
 11e:	42 30       	cpi	r20, 0x02	; 2
 120:	51 05       	cpc	r21, r1
 122:	f1 f0       	breq	.+60     	; 0x160 <Key_pad_get_char+0xcc>
 124:	43 30       	cpi	r20, 0x03	; 3
 126:	51 05       	cpc	r21, r1
 128:	41 f1       	breq	.+80     	; 0x17a <Key_pad_get_char+0xe6>
 12a:	34 c0       	rjmp	.+104    	; 0x194 <Key_pad_get_char+0x100>
				{
				//====================================
					case 0:
					if(j==0)
 12c:	61 15       	cp	r22, r1
 12e:	71 05       	cpc	r23, r1
 130:	e9 f1       	breq	.+122    	; 0x1ac <Key_pad_get_char+0x118>
						return '7';
						
					else if(j==1)
 132:	61 30       	cpi	r22, 0x01	; 1
 134:	71 05       	cpc	r23, r1
 136:	e1 f1       	breq	.+120    	; 0x1b0 <Key_pad_get_char+0x11c>
						return '4';
						
					else if(j==2)
 138:	62 30       	cpi	r22, 0x02	; 2
 13a:	71 05       	cpc	r23, r1
 13c:	d9 f1       	breq	.+118    	; 0x1b4 <Key_pad_get_char+0x120>
						return '1';
					
					else if(j==3)
 13e:	63 30       	cpi	r22, 0x03	; 3
 140:	71 05       	cpc	r23, r1
 142:	41 f5       	brne	.+80     	; 0x194 <Key_pad_get_char+0x100>
 144:	39 c0       	rjmp	.+114    	; 0x1b8 <Key_pad_get_char+0x124>
						return '!';
					break;
				//======================================			
					case 1:
					if(j==0)
 146:	61 15       	cp	r22, r1
 148:	71 05       	cpc	r23, r1
 14a:	c1 f1       	breq	.+112    	; 0x1bc <Key_pad_get_char+0x128>
						return '8';
					
					else if(j==1)
 14c:	61 30       	cpi	r22, 0x01	; 1
 14e:	71 05       	cpc	r23, r1
 150:	b9 f1       	breq	.+110    	; 0x1c0 <Key_pad_get_char+0x12c>
						return '5';
					
					else if(j==2)
 152:	62 30       	cpi	r22, 0x02	; 2
 154:	71 05       	cpc	r23, r1
 156:	b1 f1       	breq	.+108    	; 0x1c4 <Key_pad_get_char+0x130>
						return '2';
					
					else if(j==3)
 158:	63 30       	cpi	r22, 0x03	; 3
 15a:	71 05       	cpc	r23, r1
 15c:	d9 f4       	brne	.+54     	; 0x194 <Key_pad_get_char+0x100>
 15e:	34 c0       	rjmp	.+104    	; 0x1c8 <Key_pad_get_char+0x134>
						return '0';
					break;
				//========================================	
					case 2:
					if(j==0)
 160:	61 15       	cp	r22, r1
 162:	71 05       	cpc	r23, r1
 164:	99 f1       	breq	.+102    	; 0x1cc <Key_pad_get_char+0x138>
						return '9';
					
					else if(j==1)
 166:	61 30       	cpi	r22, 0x01	; 1
 168:	71 05       	cpc	r23, r1
 16a:	91 f1       	breq	.+100    	; 0x1d0 <Key_pad_get_char+0x13c>
						return '6';
					
					else if(j==2)
 16c:	62 30       	cpi	r22, 0x02	; 2
 16e:	71 05       	cpc	r23, r1
 170:	89 f1       	breq	.+98     	; 0x1d4 <Key_pad_get_char+0x140>
						return '3';
					
					else if(j==3)
 172:	63 30       	cpi	r22, 0x03	; 3
 174:	71 05       	cpc	r23, r1
 176:	71 f4       	brne	.+28     	; 0x194 <Key_pad_get_char+0x100>
 178:	2f c0       	rjmp	.+94     	; 0x1d8 <Key_pad_get_char+0x144>
						return '=';
					break;
				//=======================================		
					case 3:
					if(j==0)
 17a:	61 15       	cp	r22, r1
 17c:	71 05       	cpc	r23, r1
 17e:	71 f1       	breq	.+92     	; 0x1dc <Key_pad_get_char+0x148>
						return '/';
					
					else if(j==1)
 180:	61 30       	cpi	r22, 0x01	; 1
 182:	71 05       	cpc	r23, r1
 184:	69 f1       	breq	.+90     	; 0x1e0 <Key_pad_get_char+0x14c>
						return '*';
					
					else if(j==2)
 186:	62 30       	cpi	r22, 0x02	; 2
 188:	71 05       	cpc	r23, r1
 18a:	61 f1       	breq	.+88     	; 0x1e4 <Key_pad_get_char+0x150>
						return '-';
					
					else if(j==3)
 18c:	63 30       	cpi	r22, 0x03	; 3
 18e:	71 05       	cpc	r23, r1
 190:	69 f5       	brne	.+90     	; 0x1ec <Key_pad_get_char+0x158>
 192:	2a c0       	rjmp	.+84     	; 0x1e8 <Key_pad_get_char+0x154>
		Key_pad_PORT |= (1<<C0) | (1<<C1) | (1<<C2) | (1<<C3);
		
		//Column to have output 0
		Key_pad_PORT &= ~(1<<Key_pad_column[i]);
		//_delay_ms(30);
		for(j=0 ; j<4 ; j++)
 194:	c4 30       	cpi	r28, 0x04	; 4
 196:	d1 05       	cpc	r29, r1
 198:	0c f4       	brge	.+2      	; 0x19c <Key_pad_get_char+0x108>
 19a:	9d cf       	rjmp	.-198    	; 0xd6 <Key_pad_get_char+0x42>

char Key_pad_get_char()
{
	int i,j;
	
	for(i=0 ; i<4 ; i++)
 19c:	4f 5f       	subi	r20, 0xFF	; 255
 19e:	5f 4f       	sbci	r21, 0xFF	; 255
 1a0:	44 30       	cpi	r20, 0x04	; 4
 1a2:	51 05       	cpc	r21, r1
 1a4:	09 f0       	breq	.+2      	; 0x1a8 <Key_pad_get_char+0x114>
 1a6:	80 cf       	rjmp	.-256    	; 0xa8 <Key_pad_get_char+0x14>
					break;
				}
			}
		}
	}
 return 'N';
 1a8:	8e e4       	ldi	r24, 0x4E	; 78
 1aa:	25 c0       	rjmp	.+74     	; 0x1f6 <Key_pad_get_char+0x162>
				switch(i)
				{
				//====================================
					case 0:
					if(j==0)
						return '7';
 1ac:	87 e3       	ldi	r24, 0x37	; 55
 1ae:	23 c0       	rjmp	.+70     	; 0x1f6 <Key_pad_get_char+0x162>
						
					else if(j==1)
						return '4';
 1b0:	84 e3       	ldi	r24, 0x34	; 52
 1b2:	21 c0       	rjmp	.+66     	; 0x1f6 <Key_pad_get_char+0x162>
						
					else if(j==2)
						return '1';
 1b4:	81 e3       	ldi	r24, 0x31	; 49
 1b6:	1f c0       	rjmp	.+62     	; 0x1f6 <Key_pad_get_char+0x162>
					
					else if(j==3)
						return '!';
 1b8:	81 e2       	ldi	r24, 0x21	; 33
 1ba:	1d c0       	rjmp	.+58     	; 0x1f6 <Key_pad_get_char+0x162>
					break;
				//======================================			
					case 1:
					if(j==0)
						return '8';
 1bc:	88 e3       	ldi	r24, 0x38	; 56
 1be:	1b c0       	rjmp	.+54     	; 0x1f6 <Key_pad_get_char+0x162>
					
					else if(j==1)
						return '5';
 1c0:	85 e3       	ldi	r24, 0x35	; 53
 1c2:	19 c0       	rjmp	.+50     	; 0x1f6 <Key_pad_get_char+0x162>
					
					else if(j==2)
						return '2';
 1c4:	82 e3       	ldi	r24, 0x32	; 50
 1c6:	17 c0       	rjmp	.+46     	; 0x1f6 <Key_pad_get_char+0x162>
					
					else if(j==3)
						return '0';
 1c8:	80 e3       	ldi	r24, 0x30	; 48
 1ca:	15 c0       	rjmp	.+42     	; 0x1f6 <Key_pad_get_char+0x162>
					break;
				//========================================	
					case 2:
					if(j==0)
						return '9';
 1cc:	89 e3       	ldi	r24, 0x39	; 57
 1ce:	13 c0       	rjmp	.+38     	; 0x1f6 <Key_pad_get_char+0x162>
					
					else if(j==1)
						return '6';
 1d0:	86 e3       	ldi	r24, 0x36	; 54
 1d2:	11 c0       	rjmp	.+34     	; 0x1f6 <Key_pad_get_char+0x162>
					
					else if(j==2)
						return '3';
 1d4:	83 e3       	ldi	r24, 0x33	; 51
 1d6:	0f c0       	rjmp	.+30     	; 0x1f6 <Key_pad_get_char+0x162>
					
					else if(j==3)
						return '=';
 1d8:	8d e3       	ldi	r24, 0x3D	; 61
 1da:	0d c0       	rjmp	.+26     	; 0x1f6 <Key_pad_get_char+0x162>
					break;
				//=======================================		
					case 3:
					if(j==0)
						return '/';
 1dc:	8f e2       	ldi	r24, 0x2F	; 47
 1de:	0b c0       	rjmp	.+22     	; 0x1f6 <Key_pad_get_char+0x162>
					
					else if(j==1)
						return '*';
 1e0:	8a e2       	ldi	r24, 0x2A	; 42
 1e2:	09 c0       	rjmp	.+18     	; 0x1f6 <Key_pad_get_char+0x162>
					
					else if(j==2)
						return '-';
 1e4:	8d e2       	ldi	r24, 0x2D	; 45
 1e6:	07 c0       	rjmp	.+14     	; 0x1f6 <Key_pad_get_char+0x162>
					
					else if(j==3)
						return '+';
 1e8:	8b e2       	ldi	r24, 0x2B	; 43
 1ea:	05 c0       	rjmp	.+10     	; 0x1f6 <Key_pad_get_char+0x162>
		Key_pad_PORT |= (1<<C0) | (1<<C1) | (1<<C2) | (1<<C3);
		
		//Column to have output 0
		Key_pad_PORT &= ~(1<<Key_pad_column[i]);
		//_delay_ms(30);
		for(j=0 ; j<4 ; j++)
 1ec:	c4 30       	cpi	r28, 0x04	; 4
 1ee:	d1 05       	cpc	r29, r1
 1f0:	0c f4       	brge	.+2      	; 0x1f4 <Key_pad_get_char+0x160>
 1f2:	71 cf       	rjmp	.-286    	; 0xd6 <Key_pad_get_char+0x42>
					break;
				}
			}
		}
	}
 return 'N';
 1f4:	8e e4       	ldi	r24, 0x4E	; 78
 1f6:	df 91       	pop	r29
 1f8:	cf 91       	pop	r28
 1fa:	1f 91       	pop	r17
 1fc:	0f 91       	pop	r16
 1fe:	08 95       	ret

00000200 <LCD_kick>:
		case 1:
		LCD_Write_command(Begin_first_row + column);
		break;
		
		case 2:
		LCD_Write_command(Begin_second_row + column);
 200:	c3 9a       	sbi	0x18, 3	; 24
 202:	81 ee       	ldi	r24, 0xE1	; 225
 204:	94 e0       	ldi	r25, 0x04	; 4
 206:	01 97       	sbiw	r24, 0x01	; 1
 208:	f1 f7       	brne	.-4      	; 0x206 <LCD_kick+0x6>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <LCD_kick+0xc>
 20c:	00 00       	nop
 20e:	c3 98       	cbi	0x18, 3	; 24
 210:	08 95       	ret

00000212 <LCD_Write_command>:
 212:	cf 93       	push	r28
 214:	c8 2f       	mov	r28, r24
 216:	8b b3       	in	r24, 0x1b	; 27
 218:	8f 70       	andi	r24, 0x0F	; 15
 21a:	9c 2f       	mov	r25, r28
 21c:	90 7f       	andi	r25, 0xF0	; 240
 21e:	89 2b       	or	r24, r25
 220:	8b bb       	out	0x1b, r24	; 27
 222:	88 b3       	in	r24, 0x18	; 24
 224:	89 7f       	andi	r24, 0xF9	; 249
 226:	88 bb       	out	0x18, r24	; 24
 228:	89 ef       	ldi	r24, 0xF9	; 249
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	01 97       	sbiw	r24, 0x01	; 1
 22e:	f1 f7       	brne	.-4      	; 0x22c <LCD_Write_command+0x1a>
 230:	00 c0       	rjmp	.+0      	; 0x232 <LCD_Write_command+0x20>
 232:	00 00       	nop
 234:	0e 94 00 01 	call	0x200	; 0x200 <LCD_kick>
 238:	8b b3       	in	r24, 0x1b	; 27
 23a:	28 2f       	mov	r18, r24
 23c:	2f 70       	andi	r18, 0x0F	; 15
 23e:	30 e1       	ldi	r19, 0x10	; 16
 240:	c3 9f       	mul	r28, r19
 242:	c0 01       	movw	r24, r0
 244:	11 24       	eor	r1, r1
 246:	82 2b       	or	r24, r18
 248:	8b bb       	out	0x1b, r24	; 27
 24a:	88 b3       	in	r24, 0x18	; 24
 24c:	89 7f       	andi	r24, 0xF9	; 249
 24e:	88 bb       	out	0x18, r24	; 24
 250:	89 ef       	ldi	r24, 0xF9	; 249
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	01 97       	sbiw	r24, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <LCD_Write_command+0x42>
 258:	00 c0       	rjmp	.+0      	; 0x25a <LCD_Write_command+0x48>
 25a:	00 00       	nop
 25c:	0e 94 00 01 	call	0x200	; 0x200 <LCD_kick>
 260:	81 ee       	ldi	r24, 0xE1	; 225
 262:	94 e0       	ldi	r25, 0x04	; 4
 264:	01 97       	sbiw	r24, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <LCD_Write_command+0x52>
 268:	00 c0       	rjmp	.+0      	; 0x26a <LCD_Write_command+0x58>
 26a:	00 00       	nop
 26c:	cf 91       	pop	r28
 26e:	08 95       	ret

00000270 <LCD_Write_char>:
 270:	cf 93       	push	r28
 272:	c8 2f       	mov	r28, r24
 274:	8b b3       	in	r24, 0x1b	; 27
 276:	8f 70       	andi	r24, 0x0F	; 15
 278:	9c 2f       	mov	r25, r28
 27a:	90 7f       	andi	r25, 0xF0	; 240
 27c:	89 2b       	or	r24, r25
 27e:	8b bb       	out	0x1b, r24	; 27
 280:	c2 98       	cbi	0x18, 2	; 24
 282:	c1 9a       	sbi	0x18, 1	; 24
 284:	89 ef       	ldi	r24, 0xF9	; 249
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	01 97       	sbiw	r24, 0x01	; 1
 28a:	f1 f7       	brne	.-4      	; 0x288 <LCD_Write_char+0x18>
 28c:	00 c0       	rjmp	.+0      	; 0x28e <LCD_Write_char+0x1e>
 28e:	00 00       	nop
 290:	0e 94 00 01 	call	0x200	; 0x200 <LCD_kick>
 294:	8b b3       	in	r24, 0x1b	; 27
 296:	28 2f       	mov	r18, r24
 298:	2f 70       	andi	r18, 0x0F	; 15
 29a:	30 e1       	ldi	r19, 0x10	; 16
 29c:	c3 9f       	mul	r28, r19
 29e:	c0 01       	movw	r24, r0
 2a0:	11 24       	eor	r1, r1
 2a2:	82 2b       	or	r24, r18
 2a4:	8b bb       	out	0x1b, r24	; 27
 2a6:	c2 98       	cbi	0x18, 2	; 24
 2a8:	c1 9a       	sbi	0x18, 1	; 24
 2aa:	89 ef       	ldi	r24, 0xF9	; 249
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	01 97       	sbiw	r24, 0x01	; 1
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <LCD_Write_char+0x3e>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <LCD_Write_char+0x44>
 2b4:	00 00       	nop
 2b6:	0e 94 00 01 	call	0x200	; 0x200 <LCD_kick>
 2ba:	81 ee       	ldi	r24, 0xE1	; 225
 2bc:	94 e0       	ldi	r25, 0x04	; 4
 2be:	01 97       	sbiw	r24, 0x01	; 1
 2c0:	f1 f7       	brne	.-4      	; 0x2be <LCD_Write_char+0x4e>
 2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <LCD_Write_char+0x54>
 2c4:	00 00       	nop
 2c6:	cf 91       	pop	r28
 2c8:	08 95       	ret

000002ca <LCD_is_busy>:
 2ca:	87 b3       	in	r24, 0x17	; 23
 2cc:	8e 60       	ori	r24, 0x0E	; 14
 2ce:	87 bb       	out	0x17, r24	; 23
 2d0:	8a b3       	in	r24, 0x1a	; 26
 2d2:	8f 70       	andi	r24, 0x0F	; 15
 2d4:	8a bb       	out	0x1a, r24	; 26
 2d6:	c1 98       	cbi	0x18, 1	; 24
 2d8:	c2 9a       	sbi	0x18, 2	; 24
 2da:	0e 94 00 01 	call	0x200	; 0x200 <LCD_kick>
 2de:	8a b3       	in	r24, 0x1a	; 26
 2e0:	80 6f       	ori	r24, 0xF0	; 240
 2e2:	8a bb       	out	0x1a, r24	; 26
 2e4:	c2 98       	cbi	0x18, 2	; 24
 2e6:	08 95       	ret

000002e8 <LCD_clear_screen>:
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	0e 94 09 01 	call	0x212	; 0x212 <LCD_Write_command>
 2ee:	08 95       	ret

000002f0 <LCD_init>:
 2f0:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_is_busy>
 2f4:	87 b3       	in	r24, 0x17	; 23
 2f6:	8e 60       	ori	r24, 0x0E	; 14
 2f8:	87 bb       	out	0x17, r24	; 23
 2fa:	8a b3       	in	r24, 0x1a	; 26
 2fc:	80 6f       	ori	r24, 0xF0	; 240
 2fe:	8a bb       	out	0x1a, r24	; 26
 300:	0e 94 74 01 	call	0x2e8	; 0x2e8 <LCD_clear_screen>
 304:	87 e8       	ldi	r24, 0x87	; 135
 306:	93 e1       	ldi	r25, 0x13	; 19
 308:	01 97       	sbiw	r24, 0x01	; 1
 30a:	f1 f7       	brne	.-4      	; 0x308 <LCD_init+0x18>
 30c:	00 c0       	rjmp	.+0      	; 0x30e <LCD_init+0x1e>
 30e:	00 00       	nop
 310:	82 e0       	ldi	r24, 0x02	; 2
 312:	0e 94 09 01 	call	0x212	; 0x212 <LCD_Write_command>
 316:	88 e2       	ldi	r24, 0x28	; 40
 318:	0e 94 09 01 	call	0x212	; 0x212 <LCD_Write_command>
 31c:	8f e0       	ldi	r24, 0x0F	; 15
 31e:	0e 94 09 01 	call	0x212	; 0x212 <LCD_Write_command>
 322:	86 e0       	ldi	r24, 0x06	; 6
 324:	0e 94 09 01 	call	0x212	; 0x212 <LCD_Write_command>
 328:	80 e8       	ldi	r24, 0x80	; 128
 32a:	0e 94 09 01 	call	0x212	; 0x212 <LCD_Write_command>
 32e:	08 95       	ret

00000330 <LCD_Custom_charachters>:


void LCD_Custom_charachters()
{
	//To enable CGRAM and to save custom char
	LCD_Write_command(64);
 330:	80 e4       	ldi	r24, 0x40	; 64
 332:	0e 94 09 01 	call	0x212	; 0x212 <LCD_Write_command>
	
	//Angry face
	 LCD_Write_char(0b00000);
 336:	80 e0       	ldi	r24, 0x00	; 0
 338:	0e 94 38 01 	call	0x270	; 0x270 <LCD_Write_char>
	 LCD_Write_char(0b10001);
 33c:	81 e1       	ldi	r24, 0x11	; 17
 33e:	0e 94 38 01 	call	0x270	; 0x270 <LCD_Write_char>
	 LCD_Write_char(0b11011);
 342:	8b e1       	ldi	r24, 0x1B	; 27
 344:	0e 94 38 01 	call	0x270	; 0x270 <LCD_Write_char>
	 LCD_Write_char(0b00000);
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	0e 94 38 01 	call	0x270	; 0x270 <LCD_Write_char>
	 LCD_Write_char(0b00000);
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	0e 94 38 01 	call	0x270	; 0x270 <LCD_Write_char>
	 LCD_Write_char(0b01110);
 354:	8e e0       	ldi	r24, 0x0E	; 14
 356:	0e 94 38 01 	call	0x270	; 0x270 <LCD_Write_char>
	 LCD_Write_char(0b10001);
 35a:	81 e1       	ldi	r24, 0x11	; 17
 35c:	0e 94 38 01 	call	0x270	; 0x270 <LCD_Write_char>
	 LCD_Write_char(0b00000);
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	0e 94 38 01 	call	0x270	; 0x270 <LCD_Write_char>
	 
	 LCD_Write_command(Begin_first_row);
 366:	80 e8       	ldi	r24, 0x80	; 128
 368:	0e 94 09 01 	call	0x212	; 0x212 <LCD_Write_command>
	 LCD_Write_char(0); //display the first custom char
 36c:	80 e0       	ldi	r24, 0x00	; 0
 36e:	0e 94 38 01 	call	0x270	; 0x270 <LCD_Write_char>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 372:	83 ec       	ldi	r24, 0xC3	; 195
 374:	99 e0       	ldi	r25, 0x09	; 9
 376:	01 97       	sbiw	r24, 0x01	; 1
 378:	f1 f7       	brne	.-4      	; 0x376 <LCD_Custom_charachters+0x46>
 37a:	00 c0       	rjmp	.+0      	; 0x37c <LCD_Custom_charachters+0x4c>
 37c:	00 00       	nop
 37e:	08 95       	ret

00000380 <main>:
#include "LCD.h"


int main(void)
{
    LCD_init();
 380:	0e 94 78 01 	call	0x2f0	; 0x2f0 <LCD_init>
	Key_pad_init();
 384:	0e 94 41 00 	call	0x82	; 0x82 <Key_pad_init>
 388:	83 ec       	ldi	r24, 0xC3	; 195
 38a:	99 e0       	ldi	r25, 0x09	; 9
 38c:	01 97       	sbiw	r24, 0x01	; 1
 38e:	f1 f7       	brne	.-4      	; 0x38c <main+0xc>
 390:	00 c0       	rjmp	.+0      	; 0x392 <main+0x12>
 392:	00 00       	nop
	
	_delay_ms(10);
	LCD_Custom_charachters();
 394:	0e 94 98 01 	call	0x330	; 0x330 <LCD_Custom_charachters>

	
	char pressed_key;
    while (1) 
    {
		pressed_key = Key_pad_get_char();
 398:	0e 94 4a 00 	call	0x94	; 0x94 <Key_pad_get_char>
		
		switch(pressed_key)
 39c:	81 32       	cpi	r24, 0x21	; 33
 39e:	19 f0       	breq	.+6      	; 0x3a6 <main+0x26>
 3a0:	8e 34       	cpi	r24, 0x4E	; 78
 3a2:	d1 f3       	breq	.-12     	; 0x398 <main+0x18>
 3a4:	03 c0       	rjmp	.+6      	; 0x3ac <main+0x2c>
		{
			case '!':
			LCD_clear_screen();
 3a6:	0e 94 74 01 	call	0x2e8	; 0x2e8 <LCD_clear_screen>
			break;
 3aa:	f6 cf       	rjmp	.-20     	; 0x398 <main+0x18>
			
			case 'N':
			break;
			
			default:
			LCD_Write_char(pressed_key);
 3ac:	0e 94 38 01 	call	0x270	; 0x270 <LCD_Write_char>
 3b0:	f3 cf       	rjmp	.-26     	; 0x398 <main+0x18>

000003b2 <_exit>:
 3b2:	f8 94       	cli

000003b4 <__stop_program>:
 3b4:	ff cf       	rjmp	.-2      	; 0x3b4 <__stop_program>
