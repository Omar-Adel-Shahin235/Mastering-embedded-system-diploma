
Unit7_lesson2_section.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003d6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000003d6  0000044a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000045a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000048c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  000004c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001295  00000000  00000000  000005a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000842  00000000  00000000  00001835  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000969  00000000  00000000  00002077  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000180  00000000  00000000  000029e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004e7  00000000  00000000  00002b60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000e0c  00000000  00000000  00003047  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00003e53  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ed       	ldi	r30, 0xD6	; 214
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 62 01 	call	0x2c4	; 0x2c4 <main>
  7a:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_kick>:
}

void LCD_kick()
{
	//set enable
	MCAL_Dio_pinWrite(LCD_Ctrl_PORT ,LCD_EN , 1 );
  82:	41 e0       	ldi	r20, 0x01	; 1
  84:	68 e0       	ldi	r22, 0x08	; 8
  86:	81 e0       	ldi	r24, 0x01	; 1
  88:	0e 94 b0 01 	call	0x360	; 0x360 <MCAL_Dio_pinWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8c:	81 ee       	ldi	r24, 0xE1	; 225
  8e:	94 e0       	ldi	r25, 0x04	; 4
  90:	01 97       	sbiw	r24, 0x01	; 1
  92:	f1 f7       	brne	.-4      	; 0x90 <LCD_kick+0xe>
  94:	00 c0       	rjmp	.+0      	; 0x96 <LCD_kick+0x14>
  96:	00 00       	nop
	_delay_ms(5);
	//Reset enable
	MCAL_Dio_pinWrite(LCD_Ctrl_PORT ,LCD_EN , 0 );
  98:	40 e0       	ldi	r20, 0x00	; 0
  9a:	68 e0       	ldi	r22, 0x08	; 8
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	0e 94 b0 01 	call	0x360	; 0x360 <MCAL_Dio_pinWrite>
  a2:	08 95       	ret

000000a4 <LCD_Write_command>:
	LCD_Write_command(Entry_mode);
	LCD_Write_command(Begin_first_row);
}

void LCD_Write_command(unsigned char commmand)
{
  a4:	cf 93       	push	r28
  a6:	c8 2f       	mov	r28, r24
	
	LCD_kick();
	#endif
	
	#ifdef Four_bit_mode
	LCD_in_port = (LCD_in_port &(0x0F)) | (commmand & 0xF0);
  a8:	8b b3       	in	r24, 0x1b	; 27
  aa:	8f 70       	andi	r24, 0x0F	; 15
  ac:	9c 2f       	mov	r25, r28
  ae:	90 7f       	andi	r25, 0xF0	; 240
  b0:	89 2b       	or	r24, r25
  b2:	8b bb       	out	0x1b, r24	; 27
	
	MCAL_Dio_pinWrite(LCD_Ctrl_PORT , LCD_RS , 0);
  b4:	40 e0       	ldi	r20, 0x00	; 0
  b6:	62 e0       	ldi	r22, 0x02	; 2
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	0e 94 b0 01 	call	0x360	; 0x360 <MCAL_Dio_pinWrite>
	MCAL_Dio_pinWrite(LCD_Ctrl_PORT , LCD_RW , 0);
  be:	40 e0       	ldi	r20, 0x00	; 0
  c0:	64 e0       	ldi	r22, 0x04	; 4
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	0e 94 b0 01 	call	0x360	; 0x360 <MCAL_Dio_pinWrite>
  c8:	87 ea       	ldi	r24, 0xA7	; 167
  ca:	91 e6       	ldi	r25, 0x61	; 97
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <LCD_Write_command+0x28>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <LCD_Write_command+0x2e>
  d2:	00 00       	nop
	
	_delay_ms(100);
	LCD_kick();
  d4:	0e 94 41 00 	call	0x82	; 0x82 <LCD_kick>
	
	LCD_in_port = (LCD_in_port &(0x0F)) | ((commmand & 0x0F)<<4);
  d8:	8b b3       	in	r24, 0x1b	; 27
  da:	28 2f       	mov	r18, r24
  dc:	2f 70       	andi	r18, 0x0F	; 15
  de:	30 e1       	ldi	r19, 0x10	; 16
  e0:	c3 9f       	mul	r28, r19
  e2:	c0 01       	movw	r24, r0
  e4:	11 24       	eor	r1, r1
  e6:	82 2b       	or	r24, r18
  e8:	8b bb       	out	0x1b, r24	; 27
	
	MCAL_Dio_pinWrite(LCD_Ctrl_PORT , LCD_RS , 0);
  ea:	40 e0       	ldi	r20, 0x00	; 0
  ec:	62 e0       	ldi	r22, 0x02	; 2
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	0e 94 b0 01 	call	0x360	; 0x360 <MCAL_Dio_pinWrite>
	MCAL_Dio_pinWrite(LCD_Ctrl_PORT , LCD_RW , 0);
  f4:	40 e0       	ldi	r20, 0x00	; 0
  f6:	64 e0       	ldi	r22, 0x04	; 4
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	0e 94 b0 01 	call	0x360	; 0x360 <MCAL_Dio_pinWrite>
  fe:	87 ea       	ldi	r24, 0xA7	; 167
 100:	91 e6       	ldi	r25, 0x61	; 97
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <LCD_Write_command+0x5e>
 106:	00 c0       	rjmp	.+0      	; 0x108 <LCD_Write_command+0x64>
 108:	00 00       	nop
	
	_delay_ms(100);
	LCD_kick();
 10a:	0e 94 41 00 	call	0x82	; 0x82 <LCD_kick>
 10e:	81 ee       	ldi	r24, 0xE1	; 225
 110:	94 e0       	ldi	r25, 0x04	; 4
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <LCD_Write_command+0x6e>
 116:	00 c0       	rjmp	.+0      	; 0x118 <LCD_Write_command+0x74>
 118:	00 00       	nop
	
	_delay_ms(5);
	#endif
}
 11a:	cf 91       	pop	r28
 11c:	08 95       	ret

0000011e <LCD_Write_char>:

void LCD_Write_char(unsigned char data)
{
 11e:	cf 93       	push	r28
 120:	c8 2f       	mov	r28, r24
	LCD_kick();
	#endif
	
	#ifdef Four_bit_mode
	
	LCD_in_port = (LCD_in_port &(0x0F)) | (data & 0xF0);
 122:	8b b3       	in	r24, 0x1b	; 27
 124:	8f 70       	andi	r24, 0x0F	; 15
 126:	9c 2f       	mov	r25, r28
 128:	90 7f       	andi	r25, 0xF0	; 240
 12a:	89 2b       	or	r24, r25
 12c:	8b bb       	out	0x1b, r24	; 27
	
	MCAL_Dio_pinWrite(LCD_Ctrl_PORT , LCD_RS , 1);
 12e:	41 e0       	ldi	r20, 0x01	; 1
 130:	62 e0       	ldi	r22, 0x02	; 2
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	0e 94 b0 01 	call	0x360	; 0x360 <MCAL_Dio_pinWrite>
	MCAL_Dio_pinWrite(LCD_Ctrl_PORT , LCD_RW , 0);
 138:	40 e0       	ldi	r20, 0x00	; 0
 13a:	64 e0       	ldi	r22, 0x04	; 4
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	0e 94 b0 01 	call	0x360	; 0x360 <MCAL_Dio_pinWrite>
 142:	87 ea       	ldi	r24, 0xA7	; 167
 144:	91 e6       	ldi	r25, 0x61	; 97
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <LCD_Write_char+0x28>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <LCD_Write_char+0x2e>
 14c:	00 00       	nop
	
	_delay_ms(100);
	LCD_kick();
 14e:	0e 94 41 00 	call	0x82	; 0x82 <LCD_kick>
	
	LCD_in_port = (LCD_in_port &(0x0F)) | ((data & 0x0F)<<4);
 152:	8b b3       	in	r24, 0x1b	; 27
 154:	28 2f       	mov	r18, r24
 156:	2f 70       	andi	r18, 0x0F	; 15
 158:	30 e1       	ldi	r19, 0x10	; 16
 15a:	c3 9f       	mul	r28, r19
 15c:	c0 01       	movw	r24, r0
 15e:	11 24       	eor	r1, r1
 160:	82 2b       	or	r24, r18
 162:	8b bb       	out	0x1b, r24	; 27
	MCAL_Dio_pinWrite(LCD_Ctrl_PORT , LCD_RS , 1);
 164:	41 e0       	ldi	r20, 0x01	; 1
 166:	62 e0       	ldi	r22, 0x02	; 2
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	0e 94 b0 01 	call	0x360	; 0x360 <MCAL_Dio_pinWrite>
	MCAL_Dio_pinWrite(LCD_Ctrl_PORT , LCD_RW , 0);
 16e:	40 e0       	ldi	r20, 0x00	; 0
 170:	64 e0       	ldi	r22, 0x04	; 4
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	0e 94 b0 01 	call	0x360	; 0x360 <MCAL_Dio_pinWrite>
 178:	87 ea       	ldi	r24, 0xA7	; 167
 17a:	91 e6       	ldi	r25, 0x61	; 97
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <LCD_Write_char+0x5e>
 180:	00 c0       	rjmp	.+0      	; 0x182 <LCD_Write_char+0x64>
 182:	00 00       	nop
	
	_delay_ms(100);
	LCD_kick();
 184:	0e 94 41 00 	call	0x82	; 0x82 <LCD_kick>
 188:	81 ee       	ldi	r24, 0xE1	; 225
 18a:	94 e0       	ldi	r25, 0x04	; 4
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <LCD_Write_char+0x6e>
 190:	00 c0       	rjmp	.+0      	; 0x192 <LCD_Write_char+0x74>
 192:	00 00       	nop
	
	_delay_ms(5);
	#endif
}
 194:	cf 91       	pop	r28
 196:	08 95       	ret

00000198 <LCD_is_busy>:
	
	#endif
	
	#ifdef Four_bit_mode
	
	MCAL_Dio_pinDirection(LCD_Ctrl_PORT ,LCD_RS ,Output_Statues);
 198:	41 e0       	ldi	r20, 0x01	; 1
 19a:	62 e0       	ldi	r22, 0x02	; 2
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	0e 94 77 01 	call	0x2ee	; 0x2ee <MCAL_Dio_pinDirection>
	MCAL_Dio_pinDirection(LCD_Ctrl_PORT ,LCD_RW ,Output_Statues);
 1a2:	41 e0       	ldi	r20, 0x01	; 1
 1a4:	64 e0       	ldi	r22, 0x04	; 4
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	0e 94 77 01 	call	0x2ee	; 0x2ee <MCAL_Dio_pinDirection>
	MCAL_Dio_pinDirection(LCD_Ctrl_PORT ,LCD_EN ,Output_Statues);
 1ac:	41 e0       	ldi	r20, 0x01	; 1
 1ae:	68 e0       	ldi	r22, 0x08	; 8
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	0e 94 77 01 	call	0x2ee	; 0x2ee <MCAL_Dio_pinDirection>
	
	
	MCAL_Dio_pinDirection(LCD_Data_PORT ,LCD_D4 ,Input_Statues);
 1b6:	40 e0       	ldi	r20, 0x00	; 0
 1b8:	60 e1       	ldi	r22, 0x10	; 16
 1ba:	80 e0       	ldi	r24, 0x00	; 0
 1bc:	0e 94 77 01 	call	0x2ee	; 0x2ee <MCAL_Dio_pinDirection>
	MCAL_Dio_pinDirection(LCD_Data_PORT ,LCD_D5 ,Input_Statues);
 1c0:	40 e0       	ldi	r20, 0x00	; 0
 1c2:	60 e2       	ldi	r22, 0x20	; 32
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	0e 94 77 01 	call	0x2ee	; 0x2ee <MCAL_Dio_pinDirection>
	MCAL_Dio_pinDirection(LCD_Data_PORT ,LCD_D6 ,Input_Statues);
 1ca:	40 e0       	ldi	r20, 0x00	; 0
 1cc:	60 e4       	ldi	r22, 0x40	; 64
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	0e 94 77 01 	call	0x2ee	; 0x2ee <MCAL_Dio_pinDirection>
	MCAL_Dio_pinDirection(LCD_Data_PORT ,LCD_D7 ,Input_Statues);
 1d4:	40 e0       	ldi	r20, 0x00	; 0
 1d6:	60 e8       	ldi	r22, 0x80	; 128
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	0e 94 77 01 	call	0x2ee	; 0x2ee <MCAL_Dio_pinDirection>
 1de:	81 ee       	ldi	r24, 0xE1	; 225
 1e0:	94 e0       	ldi	r25, 0x04	; 4
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <LCD_is_busy+0x4a>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <LCD_is_busy+0x50>
 1e8:	00 00       	nop
	
	_delay_ms(5);
	
	//command register select
	MCAL_Dio_pinWrite(LCD_Ctrl_PORT ,LCD_RS , 0 );
 1ea:	40 e0       	ldi	r20, 0x00	; 0
 1ec:	62 e0       	ldi	r22, 0x02	; 2
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	0e 94 b0 01 	call	0x360	; 0x360 <MCAL_Dio_pinWrite>
		
	//read mode
	MCAL_Dio_pinWrite(LCD_Ctrl_PORT ,LCD_RW , 1 );
 1f4:	41 e0       	ldi	r20, 0x01	; 1
 1f6:	64 e0       	ldi	r22, 0x04	; 4
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	0e 94 b0 01 	call	0x360	; 0x360 <MCAL_Dio_pinWrite>
		
	LCD_kick();
 1fe:	0e 94 41 00 	call	0x82	; 0x82 <LCD_kick>
		
	MCAL_Dio_pinDirection(LCD_Data_PORT ,LCD_D4 ,Output_Statues);
 202:	41 e0       	ldi	r20, 0x01	; 1
 204:	60 e1       	ldi	r22, 0x10	; 16
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	0e 94 77 01 	call	0x2ee	; 0x2ee <MCAL_Dio_pinDirection>
	MCAL_Dio_pinDirection(LCD_Data_PORT ,LCD_D5 ,Output_Statues);
 20c:	41 e0       	ldi	r20, 0x01	; 1
 20e:	60 e2       	ldi	r22, 0x20	; 32
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	0e 94 77 01 	call	0x2ee	; 0x2ee <MCAL_Dio_pinDirection>
	MCAL_Dio_pinDirection(LCD_Data_PORT ,LCD_D6 ,Output_Statues);
 216:	41 e0       	ldi	r20, 0x01	; 1
 218:	60 e4       	ldi	r22, 0x40	; 64
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	0e 94 77 01 	call	0x2ee	; 0x2ee <MCAL_Dio_pinDirection>
	MCAL_Dio_pinDirection(LCD_Data_PORT ,LCD_D7 ,Output_Statues);
 220:	41 e0       	ldi	r20, 0x01	; 1
 222:	60 e8       	ldi	r22, 0x80	; 128
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	0e 94 77 01 	call	0x2ee	; 0x2ee <MCAL_Dio_pinDirection>
	
	//write mode
	MCAL_Dio_pinWrite(LCD_Ctrl_PORT ,LCD_RW , 0 );
 22a:	40 e0       	ldi	r20, 0x00	; 0
 22c:	64 e0       	ldi	r22, 0x04	; 4
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	0e 94 b0 01 	call	0x360	; 0x360 <MCAL_Dio_pinWrite>
 234:	08 95       	ret

00000236 <LCD_clear_screen>:
	MCAL_Dio_pinWrite(LCD_Ctrl_PORT ,LCD_EN , 0 );
}

void LCD_clear_screen(void)
{
	LCD_Write_command(Clear_display);
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	0e 94 52 00 	call	0xa4	; 0xa4 <LCD_Write_command>
 23c:	08 95       	ret

0000023e <LCD_init>:

#include "LCD.h"

void LCD_init()
{
	LCD_is_busy();
 23e:	0e 94 cc 00 	call	0x198	; 0x198 <LCD_is_busy>
	#endif

	#ifdef Four_bit_mode
	//set data port as output
//	LCD_Data_Dir_PORT |= 0xF0;
	LCD_clear_screen();
 242:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_clear_screen>
 246:	87 e8       	ldi	r24, 0x87	; 135
 248:	93 e1       	ldi	r25, 0x13	; 19
 24a:	01 97       	sbiw	r24, 0x01	; 1
 24c:	f1 f7       	brne	.-4      	; 0x24a <LCD_init+0xc>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <LCD_init+0x12>
 250:	00 00       	nop
	_delay_ms(20);
	LCD_Write_command(0x02);
 252:	82 e0       	ldi	r24, 0x02	; 2
 254:	0e 94 52 00 	call	0xa4	; 0xa4 <LCD_Write_command>
	LCD_Write_command(Func_set_4bit_2line);
 258:	88 e2       	ldi	r24, 0x28	; 40
 25a:	0e 94 52 00 	call	0xa4	; 0xa4 <LCD_Write_command>
	#endif
//====================================================		
	LCD_Write_command(Display_on_cursor_blink);
 25e:	8f e0       	ldi	r24, 0x0F	; 15
 260:	0e 94 52 00 	call	0xa4	; 0xa4 <LCD_Write_command>
	LCD_Write_command(Entry_mode);
 264:	86 e0       	ldi	r24, 0x06	; 6
 266:	0e 94 52 00 	call	0xa4	; 0xa4 <LCD_Write_command>
	LCD_Write_command(Begin_first_row);
 26a:	80 e8       	ldi	r24, 0x80	; 128
 26c:	0e 94 52 00 	call	0xa4	; 0xa4 <LCD_Write_command>
 270:	08 95       	ret

00000272 <LCD_Write_string>:
	
	_delay_ms(5);
	#endif
}
void LCD_Write_string(char* string)
{
 272:	0f 93       	push	r16
 274:	1f 93       	push	r17
 276:	cf 93       	push	r28
 278:	df 93       	push	r29
	int count =0;
	for(count = 0 ; (string[count]!='\0') ; count++)
 27a:	fc 01       	movw	r30, r24
 27c:	20 81       	ld	r18, Z
 27e:	22 23       	and	r18, r18
 280:	e1 f0       	breq	.+56     	; 0x2ba <LCD_Write_string+0x48>
 282:	8c 01       	movw	r16, r24
 284:	c0 e0       	ldi	r28, 0x00	; 0
 286:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if(count == 16)
 288:	c0 31       	cpi	r28, 0x10	; 16
 28a:	d1 05       	cpc	r29, r1
 28c:	21 f4       	brne	.+8      	; 0x296 <LCD_Write_string+0x24>
		case 1:
		LCD_Write_command(Begin_first_row + column);
		break;
		
		case 2:
		LCD_Write_command(Begin_second_row + column);
 28e:	80 ec       	ldi	r24, 0xC0	; 192
 290:	0e 94 52 00 	call	0xa4	; 0xa4 <LCD_Write_command>
 294:	08 c0       	rjmp	.+16     	; 0x2a6 <LCD_Write_string+0x34>
	for(count = 0 ; (string[count]!='\0') ; count++)
	{
		if(count == 16)
			LCD_Location(2,0);
		
		if(count == 32)
 296:	c0 32       	cpi	r28, 0x20	; 32
 298:	d1 05       	cpc	r29, r1
 29a:	29 f4       	brne	.+10     	; 0x2a6 <LCD_Write_string+0x34>
		{
			LCD_clear_screen();
 29c:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_clear_screen>
void LCD_Location(unsigned char row , unsigned char column)
{
	switch(row)
	{
		case 1:
		LCD_Write_command(Begin_first_row + column);
 2a0:	80 e8       	ldi	r24, 0x80	; 128
 2a2:	0e 94 52 00 	call	0xa4	; 0xa4 <LCD_Write_command>
		{
			LCD_clear_screen();
			LCD_Location(1,0);
		}
		
		LCD_Write_char(string[count]);
 2a6:	f8 01       	movw	r30, r16
 2a8:	81 91       	ld	r24, Z+
 2aa:	8f 01       	movw	r16, r30
 2ac:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_Write_char>
	#endif
}
void LCD_Write_string(char* string)
{
	int count =0;
	for(count = 0 ; (string[count]!='\0') ; count++)
 2b0:	21 96       	adiw	r28, 0x01	; 1
 2b2:	f8 01       	movw	r30, r16
 2b4:	80 81       	ld	r24, Z
 2b6:	81 11       	cpse	r24, r1
 2b8:	e7 cf       	rjmp	.-50     	; 0x288 <LCD_Write_string+0x16>
			LCD_Location(1,0);
		}
		
		LCD_Write_char(string[count]);
	}
}
 2ba:	df 91       	pop	r29
 2bc:	cf 91       	pop	r28
 2be:	1f 91       	pop	r17
 2c0:	0f 91       	pop	r16
 2c2:	08 95       	ret

000002c4 <main>:
#include "Key_pad.h"
#include "LCD.h"

int main(void)
{
	LCD_init();
 2c4:	0e 94 1f 01 	call	0x23e	; 0x23e <LCD_init>
 2c8:	87 ea       	ldi	r24, 0xA7	; 167
 2ca:	91 e6       	ldi	r25, 0x61	; 97
 2cc:	01 97       	sbiw	r24, 0x01	; 1
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <main+0x8>
 2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <main+0xe>
 2d2:	00 00       	nop

	_delay_ms(100);
	LCD_clear_screen();
 2d4:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_clear_screen>
 2d8:	87 ea       	ldi	r24, 0xA7	; 167
 2da:	91 e6       	ldi	r25, 0x61	; 97
 2dc:	01 97       	sbiw	r24, 0x01	; 1
 2de:	f1 f7       	brne	.-4      	; 0x2dc <main+0x18>
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <main+0x1e>
 2e2:	00 00       	nop
	_delay_ms(100);
	
	LCD_Write_string("Learn in depth");
 2e4:	80 e6       	ldi	r24, 0x60	; 96
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	0e 94 39 01 	call	0x272	; 0x272 <LCD_Write_string>
 2ec:	ff cf       	rjmp	.-2      	; 0x2ec <main+0x28>

000002ee <MCAL_Dio_pinDirection>:
			case 2:
			DDRC |= (0xFF);
			break;

			case 3:
			DDRD |= (0xFF);
 2ee:	44 23       	and	r20, r20
 2f0:	19 f0       	breq	.+6      	; 0x2f8 <MCAL_Dio_pinDirection+0xa>
 2f2:	41 30       	cpi	r20, 0x01	; 1
 2f4:	e9 f0       	breq	.+58     	; 0x330 <MCAL_Dio_pinDirection+0x42>
 2f6:	08 95       	ret
 2f8:	81 30       	cpi	r24, 0x01	; 1
 2fa:	59 f0       	breq	.+22     	; 0x312 <MCAL_Dio_pinDirection+0x24>
 2fc:	28 f0       	brcs	.+10     	; 0x308 <MCAL_Dio_pinDirection+0x1a>
 2fe:	82 30       	cpi	r24, 0x02	; 2
 300:	69 f0       	breq	.+26     	; 0x31c <MCAL_Dio_pinDirection+0x2e>
 302:	83 30       	cpi	r24, 0x03	; 3
 304:	81 f0       	breq	.+32     	; 0x326 <MCAL_Dio_pinDirection+0x38>
 306:	08 95       	ret
 308:	8a b3       	in	r24, 0x1a	; 26
 30a:	60 95       	com	r22
 30c:	68 23       	and	r22, r24
 30e:	6a bb       	out	0x1a, r22	; 26
 310:	08 95       	ret
 312:	87 b3       	in	r24, 0x17	; 23
 314:	60 95       	com	r22
 316:	68 23       	and	r22, r24
 318:	67 bb       	out	0x17, r22	; 23
 31a:	08 95       	ret
 31c:	84 b3       	in	r24, 0x14	; 20
 31e:	60 95       	com	r22
 320:	68 23       	and	r22, r24
 322:	64 bb       	out	0x14, r22	; 20
 324:	08 95       	ret
 326:	81 b3       	in	r24, 0x11	; 17
 328:	60 95       	com	r22
 32a:	68 23       	and	r22, r24
 32c:	61 bb       	out	0x11, r22	; 17
 32e:	08 95       	ret
 330:	81 30       	cpi	r24, 0x01	; 1
 332:	51 f0       	breq	.+20     	; 0x348 <MCAL_Dio_pinDirection+0x5a>
 334:	28 f0       	brcs	.+10     	; 0x340 <MCAL_Dio_pinDirection+0x52>
 336:	82 30       	cpi	r24, 0x02	; 2
 338:	59 f0       	breq	.+22     	; 0x350 <MCAL_Dio_pinDirection+0x62>
 33a:	83 30       	cpi	r24, 0x03	; 3
 33c:	69 f0       	breq	.+26     	; 0x358 <MCAL_Dio_pinDirection+0x6a>
 33e:	08 95       	ret
 340:	8a b3       	in	r24, 0x1a	; 26
 342:	68 2b       	or	r22, r24
 344:	6a bb       	out	0x1a, r22	; 26
 346:	08 95       	ret
 348:	87 b3       	in	r24, 0x17	; 23
 34a:	68 2b       	or	r22, r24
 34c:	67 bb       	out	0x17, r22	; 23
 34e:	08 95       	ret
 350:	84 b3       	in	r24, 0x14	; 20
 352:	68 2b       	or	r22, r24
 354:	64 bb       	out	0x14, r22	; 20
 356:	08 95       	ret
 358:	81 b3       	in	r24, 0x11	; 17
 35a:	68 2b       	or	r22, r24
 35c:	61 bb       	out	0x11, r22	; 17
 35e:	08 95       	ret

00000360 <MCAL_Dio_pinWrite>:
//==============================================
//**********************************************

void MCAL_Dio_pinWrite(PortConfig Port_Config , uint8_t Pin_number , uint8_t value)
{
	switch(value)
 360:	44 23       	and	r20, r20
 362:	19 f0       	breq	.+6      	; 0x36a <MCAL_Dio_pinWrite+0xa>
 364:	41 30       	cpi	r20, 0x01	; 1
 366:	e9 f0       	breq	.+58     	; 0x3a2 <MCAL_Dio_pinWrite+0x42>
 368:	08 95       	ret
	{
		case 0:
		switch(Port_Config)
 36a:	81 30       	cpi	r24, 0x01	; 1
 36c:	59 f0       	breq	.+22     	; 0x384 <MCAL_Dio_pinWrite+0x24>
 36e:	28 f0       	brcs	.+10     	; 0x37a <MCAL_Dio_pinWrite+0x1a>
 370:	82 30       	cpi	r24, 0x02	; 2
 372:	69 f0       	breq	.+26     	; 0x38e <MCAL_Dio_pinWrite+0x2e>
 374:	83 30       	cpi	r24, 0x03	; 3
 376:	81 f0       	breq	.+32     	; 0x398 <MCAL_Dio_pinWrite+0x38>
 378:	08 95       	ret
		{
			case 0:
			PORTA &= ~(Pin_number);
 37a:	8b b3       	in	r24, 0x1b	; 27
 37c:	60 95       	com	r22
 37e:	68 23       	and	r22, r24
 380:	6b bb       	out	0x1b, r22	; 27
			break;
 382:	08 95       	ret
			
			case 1:
			PORTB &= ~(Pin_number);
 384:	88 b3       	in	r24, 0x18	; 24
 386:	60 95       	com	r22
 388:	68 23       	and	r22, r24
 38a:	68 bb       	out	0x18, r22	; 24
			break;
 38c:	08 95       	ret

			case 2:
			PORTC &= ~(Pin_number);
 38e:	85 b3       	in	r24, 0x15	; 21
 390:	60 95       	com	r22
 392:	68 23       	and	r22, r24
 394:	65 bb       	out	0x15, r22	; 21
			break;
 396:	08 95       	ret

			case 3:
			PORTD &= ~(Pin_number);
 398:	82 b3       	in	r24, 0x12	; 18
 39a:	60 95       	com	r22
 39c:	68 23       	and	r22, r24
 39e:	62 bb       	out	0x12, r22	; 18
			break;
 3a0:	08 95       	ret
		}
		break;
		
		case 1:
		
		switch(Port_Config)
 3a2:	81 30       	cpi	r24, 0x01	; 1
 3a4:	51 f0       	breq	.+20     	; 0x3ba <MCAL_Dio_pinWrite+0x5a>
 3a6:	28 f0       	brcs	.+10     	; 0x3b2 <MCAL_Dio_pinWrite+0x52>
 3a8:	82 30       	cpi	r24, 0x02	; 2
 3aa:	59 f0       	breq	.+22     	; 0x3c2 <MCAL_Dio_pinWrite+0x62>
 3ac:	83 30       	cpi	r24, 0x03	; 3
 3ae:	69 f0       	breq	.+26     	; 0x3ca <MCAL_Dio_pinWrite+0x6a>
 3b0:	08 95       	ret
		{
			case 0:
			PORTA |= (Pin_number);
 3b2:	8b b3       	in	r24, 0x1b	; 27
 3b4:	68 2b       	or	r22, r24
 3b6:	6b bb       	out	0x1b, r22	; 27
			break;
 3b8:	08 95       	ret
			
			case 1:
			PORTB |= (Pin_number);
 3ba:	88 b3       	in	r24, 0x18	; 24
 3bc:	68 2b       	or	r22, r24
 3be:	68 bb       	out	0x18, r22	; 24
			break;
 3c0:	08 95       	ret

			case 2:
			PORTC |= (Pin_number);
 3c2:	85 b3       	in	r24, 0x15	; 21
 3c4:	68 2b       	or	r22, r24
 3c6:	65 bb       	out	0x15, r22	; 21
			break;
 3c8:	08 95       	ret

			case 3:
			PORTD |= (Pin_number);
 3ca:	82 b3       	in	r24, 0x12	; 18
 3cc:	68 2b       	or	r22, r24
 3ce:	62 bb       	out	0x12, r22	; 18
 3d0:	08 95       	ret

000003d2 <_exit>:
 3d2:	f8 94       	cli

000003d4 <__stop_program>:
 3d4:	ff cf       	rjmp	.-2      	; 0x3d4 <__stop_program>
